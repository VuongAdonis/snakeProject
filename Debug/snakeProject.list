
snakeProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004294  0800cef8  0800cef8  0001cef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801118c  0801118c  00030110  2**0
                  CONTENTS
  4 .ARM          00000008  0801118c  0801118c  0002118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011194  08011194  00030110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011194  08011194  00021194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011198  08011198  00021198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0801119c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030110  2**0
                  CONTENTS
 10 .bss          00002a60  20000110  20000110  00030110  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002b70  20002b70  00030110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001af9f  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b3d  00000000  00000000  0004b0df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001740  00000000  00000000  0004fc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014d0  00000000  00000000  00051360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028d73  00000000  00000000  00052830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000253b0  00000000  00000000  0007b5a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfeac  00000000  00000000  000a0953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001807ff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006778  00000000  00000000  00180850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000110 	.word	0x20000110
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cee0 	.word	0x0800cee0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000114 	.word	0x20000114
 80001cc:	0800cee0 	.word	0x0800cee0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800058a:	463b      	mov	r3, r7
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000596:	4b3d      	ldr	r3, [pc, #244]	; (800068c <MX_ADC1_Init+0x108>)
 8000598:	4a3d      	ldr	r2, [pc, #244]	; (8000690 <MX_ADC1_Init+0x10c>)
 800059a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800059c:	4b3b      	ldr	r3, [pc, #236]	; (800068c <MX_ADC1_Init+0x108>)
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a2:	4b3a      	ldr	r3, [pc, #232]	; (800068c <MX_ADC1_Init+0x108>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005a8:	4b38      	ldr	r3, [pc, #224]	; (800068c <MX_ADC1_Init+0x108>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005ae:	4b37      	ldr	r3, [pc, #220]	; (800068c <MX_ADC1_Init+0x108>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b4:	4b35      	ldr	r3, [pc, #212]	; (800068c <MX_ADC1_Init+0x108>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005bc:	4b33      	ldr	r3, [pc, #204]	; (800068c <MX_ADC1_Init+0x108>)
 80005be:	2200      	movs	r2, #0
 80005c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c2:	4b32      	ldr	r3, [pc, #200]	; (800068c <MX_ADC1_Init+0x108>)
 80005c4:	4a33      	ldr	r2, [pc, #204]	; (8000694 <MX_ADC1_Init+0x110>)
 80005c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c8:	4b30      	ldr	r3, [pc, #192]	; (800068c <MX_ADC1_Init+0x108>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80005ce:	4b2f      	ldr	r3, [pc, #188]	; (800068c <MX_ADC1_Init+0x108>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005d4:	4b2d      	ldr	r3, [pc, #180]	; (800068c <MX_ADC1_Init+0x108>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005dc:	4b2b      	ldr	r3, [pc, #172]	; (800068c <MX_ADC1_Init+0x108>)
 80005de:	2201      	movs	r2, #1
 80005e0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e2:	482a      	ldr	r0, [pc, #168]	; (800068c <MX_ADC1_Init+0x108>)
 80005e4:	f006 fbc4 	bl	8006d70 <HAL_ADC_Init>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80005ee:	f002 fa97 	bl	8002b20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005f2:	2308      	movs	r3, #8
 80005f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005f6:	2301      	movs	r3, #1
 80005f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005fe:	463b      	mov	r3, r7
 8000600:	4619      	mov	r1, r3
 8000602:	4822      	ldr	r0, [pc, #136]	; (800068c <MX_ADC1_Init+0x108>)
 8000604:	f006 fd26 	bl	8007054 <HAL_ADC_ConfigChannel>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800060e:	f002 fa87 	bl	8002b20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000612:	2309      	movs	r3, #9
 8000614:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000616:	2302      	movs	r3, #2
 8000618:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061a:	463b      	mov	r3, r7
 800061c:	4619      	mov	r1, r3
 800061e:	481b      	ldr	r0, [pc, #108]	; (800068c <MX_ADC1_Init+0x108>)
 8000620:	f006 fd18 	bl	8007054 <HAL_ADC_ConfigChannel>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800062a:	f002 fa79 	bl	8002b20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800062e:	230a      	movs	r3, #10
 8000630:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000632:	2303      	movs	r3, #3
 8000634:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000636:	463b      	mov	r3, r7
 8000638:	4619      	mov	r1, r3
 800063a:	4814      	ldr	r0, [pc, #80]	; (800068c <MX_ADC1_Init+0x108>)
 800063c:	f006 fd0a 	bl	8007054 <HAL_ADC_ConfigChannel>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000646:	f002 fa6b 	bl	8002b20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800064a:	230b      	movs	r3, #11
 800064c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800064e:	2304      	movs	r3, #4
 8000650:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000652:	463b      	mov	r3, r7
 8000654:	4619      	mov	r1, r3
 8000656:	480d      	ldr	r0, [pc, #52]	; (800068c <MX_ADC1_Init+0x108>)
 8000658:	f006 fcfc 	bl	8007054 <HAL_ADC_ConfigChannel>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000662:	f002 fa5d 	bl	8002b20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000666:	230c      	movs	r3, #12
 8000668:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800066a:	2305      	movs	r3, #5
 800066c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066e:	463b      	mov	r3, r7
 8000670:	4619      	mov	r1, r3
 8000672:	4806      	ldr	r0, [pc, #24]	; (800068c <MX_ADC1_Init+0x108>)
 8000674:	f006 fcee 	bl	8007054 <HAL_ADC_ConfigChannel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800067e:	f002 fa4f 	bl	8002b20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	2000012c 	.word	0x2000012c
 8000690:	40012000 	.word	0x40012000
 8000694:	0f000001 	.word	0x0f000001

08000698 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a3c      	ldr	r2, [pc, #240]	; (80007a8 <HAL_ADC_MspInit+0x110>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d171      	bne.n	800079e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	613b      	str	r3, [r7, #16]
 80006be:	4b3b      	ldr	r3, [pc, #236]	; (80007ac <HAL_ADC_MspInit+0x114>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	4a3a      	ldr	r2, [pc, #232]	; (80007ac <HAL_ADC_MspInit+0x114>)
 80006c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ca:	4b38      	ldr	r3, [pc, #224]	; (80007ac <HAL_ADC_MspInit+0x114>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	4b34      	ldr	r3, [pc, #208]	; (80007ac <HAL_ADC_MspInit+0x114>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a33      	ldr	r2, [pc, #204]	; (80007ac <HAL_ADC_MspInit+0x114>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b31      	ldr	r3, [pc, #196]	; (80007ac <HAL_ADC_MspInit+0x114>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	4b2d      	ldr	r3, [pc, #180]	; (80007ac <HAL_ADC_MspInit+0x114>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a2c      	ldr	r2, [pc, #176]	; (80007ac <HAL_ADC_MspInit+0x114>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b2a      	ldr	r3, [pc, #168]	; (80007ac <HAL_ADC_MspInit+0x114>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800070e:	2307      	movs	r3, #7
 8000710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000712:	2303      	movs	r3, #3
 8000714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	4823      	ldr	r0, [pc, #140]	; (80007b0 <HAL_ADC_MspInit+0x118>)
 8000722:	f007 fc4b 	bl	8007fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000726:	2303      	movs	r3, #3
 8000728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800072a:	2303      	movs	r3, #3
 800072c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	4619      	mov	r1, r3
 8000738:	481e      	ldr	r0, [pc, #120]	; (80007b4 <HAL_ADC_MspInit+0x11c>)
 800073a:	f007 fc3f 	bl	8007fbc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800073e:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <HAL_ADC_MspInit+0x120>)
 8000740:	4a1e      	ldr	r2, [pc, #120]	; (80007bc <HAL_ADC_MspInit+0x124>)
 8000742:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <HAL_ADC_MspInit+0x120>)
 8000746:	2200      	movs	r2, #0
 8000748:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <HAL_ADC_MspInit+0x120>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <HAL_ADC_MspInit+0x120>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <HAL_ADC_MspInit+0x120>)
 8000758:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800075c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <HAL_ADC_MspInit+0x120>)
 8000760:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000764:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <HAL_ADC_MspInit+0x120>)
 8000768:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800076c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800076e:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <HAL_ADC_MspInit+0x120>)
 8000770:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000774:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <HAL_ADC_MspInit+0x120>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <HAL_ADC_MspInit+0x120>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000782:	480d      	ldr	r0, [pc, #52]	; (80007b8 <HAL_ADC_MspInit+0x120>)
 8000784:	f007 f818 	bl	80077b8 <HAL_DMA_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800078e:	f002 f9c7 	bl	8002b20 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <HAL_ADC_MspInit+0x120>)
 8000796:	639a      	str	r2, [r3, #56]	; 0x38
 8000798:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <HAL_ADC_MspInit+0x120>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800079e:	bf00      	nop
 80007a0:	3728      	adds	r7, #40	; 0x28
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40012000 	.word	0x40012000
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020800 	.word	0x40020800
 80007b4:	40020400 	.word	0x40020400
 80007b8:	20000174 	.word	0x20000174
 80007bc:	40026410 	.word	0x40026410

080007c0 <setupAdvance>:
#include "picture.h"
#include "lcd.h"
#include "button.h"

void setupAdvance()
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b095      	sub	sp, #84	; 0x54
 80007c4:	af04      	add	r7, sp, #16
	lcd_Clear(BLACK);
 80007c6:	2000      	movs	r0, #0
 80007c8:	f001 fae0 	bl	8001d8c <lcd_Clear>

	//	lcd_Fill(0, 0, 240, 30, BLACK);

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 80007cc:	4bb0      	ldr	r3, [pc, #704]	; (8000a90 <setupAdvance+0x2d0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	b298      	uxth	r0, r3
 80007d2:	4bb0      	ldr	r3, [pc, #704]	; (8000a94 <setupAdvance+0x2d4>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	b299      	uxth	r1, r3
 80007d8:	4baf      	ldr	r3, [pc, #700]	; (8000a98 <setupAdvance+0x2d8>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	b29a      	uxth	r2, r3
 80007de:	4baf      	ldr	r3, [pc, #700]	; (8000a9c <setupAdvance+0x2dc>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	4cae      	ldr	r4, [pc, #696]	; (8000aa0 <setupAdvance+0x2e0>)
 80007e6:	9400      	str	r4, [sp, #0]
 80007e8:	f001 fcda 	bl	80021a0 <lcd_ShowPicture>

	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 80007ec:	2300      	movs	r3, #0
 80007ee:	9302      	str	r3, [sp, #8]
 80007f0:	2318      	movs	r3, #24
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	f248 4330 	movw	r3, #33840	; 0x8430
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007fe:	4aa9      	ldr	r2, [pc, #676]	; (8000aa4 <setupAdvance+0x2e4>)
 8000800:	2137      	movs	r1, #55	; 0x37
 8000802:	203c      	movs	r0, #60	; 0x3c
 8000804:	f001 fea6 	bl	8002554 <lcd_ShowStr>

	char str1[50] = " ID: ";
 8000808:	4aa7      	ldr	r2, [pc, #668]	; (8000aa8 <setupAdvance+0x2e8>)
 800080a:	463b      	mov	r3, r7
 800080c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000810:	6018      	str	r0, [r3, #0]
 8000812:	3304      	adds	r3, #4
 8000814:	8019      	strh	r1, [r3, #0]
 8000816:	1dbb      	adds	r3, r7, #6
 8000818:	222c      	movs	r2, #44	; 0x2c
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f00b f8d3 	bl	800b9c8 <memset>
	char *str2 = convert2str(ID);
 8000822:	4ba2      	ldr	r3, [pc, #648]	; (8000aac <setupAdvance+0x2ec>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	4618      	mov	r0, r3
 8000828:	f002 f9d2 	bl	8002bd0 <convert2str>
 800082c:	4603      	mov	r3, r0
 800082e:	63fb      	str	r3, [r7, #60]	; 0x3c
	strcat(str1, str2);
 8000830:	463b      	mov	r3, r7
 8000832:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000834:	4618      	mov	r0, r3
 8000836:	f00b f96f 	bl	800bb18 <strcat>

	lcd_StrCenter(0, 100, str1, WHITE, GRAY, 24, 0);
 800083a:	463a      	mov	r2, r7
 800083c:	2300      	movs	r3, #0
 800083e:	9302      	str	r3, [sp, #8]
 8000840:	2318      	movs	r3, #24
 8000842:	9301      	str	r3, [sp, #4]
 8000844:	f248 4330 	movw	r3, #33840	; 0x8430
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800084e:	2164      	movs	r1, #100	; 0x64
 8000850:	2000      	movs	r0, #0
 8000852:	f001 fee3 	bl	800261c <lcd_StrCenter>

	lcd_StrCenter(0, 150, " MODE: TIMING", WHITE, GRAY, 24, 0);
 8000856:	2300      	movs	r3, #0
 8000858:	9302      	str	r3, [sp, #8]
 800085a:	2318      	movs	r3, #24
 800085c:	9301      	str	r3, [sp, #4]
 800085e:	f248 4330 	movw	r3, #33840	; 0x8430
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000868:	4a91      	ldr	r2, [pc, #580]	; (8000ab0 <setupAdvance+0x2f0>)
 800086a:	2196      	movs	r1, #150	; 0x96
 800086c:	2000      	movs	r0, #0
 800086e:	f001 fed5 	bl	800261c <lcd_StrCenter>

	lcd_ShowStr(20, 215, " TIME:", WHITE, GRAY, 24, 0);
 8000872:	2300      	movs	r3, #0
 8000874:	9302      	str	r3, [sp, #8]
 8000876:	2318      	movs	r3, #24
 8000878:	9301      	str	r3, [sp, #4]
 800087a:	f248 4330 	movw	r3, #33840	; 0x8430
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000884:	4a8b      	ldr	r2, [pc, #556]	; (8000ab4 <setupAdvance+0x2f4>)
 8000886:	21d7      	movs	r1, #215	; 0xd7
 8000888:	2014      	movs	r0, #20
 800088a:	f001 fe63 	bl	8002554 <lcd_ShowStr>
	lcd_DrawRectangle(150, 210, 200, 240, WHITE);
 800088e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	23f0      	movs	r3, #240	; 0xf0
 8000896:	22c8      	movs	r2, #200	; 0xc8
 8000898:	21d2      	movs	r1, #210	; 0xd2
 800089a:	2096      	movs	r0, #150	; 0x96
 800089c:	f001 fb79 	bl	8001f92 <lcd_DrawRectangle>

	char *str3 = convert2str(TIMING);
 80008a0:	4b85      	ldr	r3, [pc, #532]	; (8000ab8 <setupAdvance+0x2f8>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 f993 	bl	8002bd0 <convert2str>
 80008aa:	4603      	mov	r3, r0
 80008ac:	63bb      	str	r3, [r7, #56]	; 0x38
	if(TIMING < 120)
 80008ae:	4b82      	ldr	r3, [pc, #520]	; (8000ab8 <setupAdvance+0x2f8>)
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	2b77      	cmp	r3, #119	; 0x77
 80008b4:	d80e      	bhi.n	80008d4 <setupAdvance+0x114>
	{
		lcd_ShowStr(165, 212, str3, WHITE, GRAY, 24, 1);
 80008b6:	2301      	movs	r3, #1
 80008b8:	9302      	str	r3, [sp, #8]
 80008ba:	2318      	movs	r3, #24
 80008bc:	9301      	str	r3, [sp, #4]
 80008be:	f248 4330 	movw	r3, #33840	; 0x8430
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80008ca:	21d4      	movs	r1, #212	; 0xd4
 80008cc:	20a5      	movs	r0, #165	; 0xa5
 80008ce:	f001 fe41 	bl	8002554 <lcd_ShowStr>
 80008d2:	e00d      	b.n	80008f0 <setupAdvance+0x130>
	}else{
		lcd_ShowStr(157, 212, str3, WHITE, GRAY, 24, 1);
 80008d4:	2301      	movs	r3, #1
 80008d6:	9302      	str	r3, [sp, #8]
 80008d8:	2318      	movs	r3, #24
 80008da:	9301      	str	r3, [sp, #4]
 80008dc:	f248 4330 	movw	r3, #33840	; 0x8430
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80008e8:	21d4      	movs	r1, #212	; 0xd4
 80008ea:	209d      	movs	r0, #157	; 0x9d
 80008ec:	f001 fe32 	bl	8002554 <lcd_ShowStr>
	}

	if(TIMING < 120)
 80008f0:	4b71      	ldr	r3, [pc, #452]	; (8000ab8 <setupAdvance+0x2f8>)
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	2b77      	cmp	r3, #119	; 0x77
 80008f6:	d81a      	bhi.n	800092e <setupAdvance+0x16e>
	{
		lcd_DrawLine(205, 220, 225, 220, WHITE);
 80008f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	23dc      	movs	r3, #220	; 0xdc
 8000900:	22e1      	movs	r2, #225	; 0xe1
 8000902:	21dc      	movs	r1, #220	; 0xdc
 8000904:	20cd      	movs	r0, #205	; 0xcd
 8000906:	f001 fac0 	bl	8001e8a <lcd_DrawLine>
		lcd_DrawLine(205, 220, 215, 210, WHITE);
 800090a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800090e:	9300      	str	r3, [sp, #0]
 8000910:	23d2      	movs	r3, #210	; 0xd2
 8000912:	22d7      	movs	r2, #215	; 0xd7
 8000914:	21dc      	movs	r1, #220	; 0xdc
 8000916:	20cd      	movs	r0, #205	; 0xcd
 8000918:	f001 fab7 	bl	8001e8a <lcd_DrawLine>
		lcd_DrawLine(225, 220, 215, 210, WHITE);
 800091c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	23d2      	movs	r3, #210	; 0xd2
 8000924:	22d7      	movs	r2, #215	; 0xd7
 8000926:	21dc      	movs	r1, #220	; 0xdc
 8000928:	20e1      	movs	r0, #225	; 0xe1
 800092a:	f001 faae 	bl	8001e8a <lcd_DrawLine>
	}
	if(TIMING > 30)
 800092e:	4b62      	ldr	r3, [pc, #392]	; (8000ab8 <setupAdvance+0x2f8>)
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	2b1e      	cmp	r3, #30
 8000934:	d91a      	bls.n	800096c <setupAdvance+0x1ac>
	{
		lcd_DrawLine(205, 230, 225, 230, WHITE);
 8000936:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	23e6      	movs	r3, #230	; 0xe6
 800093e:	22e1      	movs	r2, #225	; 0xe1
 8000940:	21e6      	movs	r1, #230	; 0xe6
 8000942:	20cd      	movs	r0, #205	; 0xcd
 8000944:	f001 faa1 	bl	8001e8a <lcd_DrawLine>
		lcd_DrawLine(205, 230, 215, 240, WHITE);
 8000948:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	23f0      	movs	r3, #240	; 0xf0
 8000950:	22d7      	movs	r2, #215	; 0xd7
 8000952:	21e6      	movs	r1, #230	; 0xe6
 8000954:	20cd      	movs	r0, #205	; 0xcd
 8000956:	f001 fa98 	bl	8001e8a <lcd_DrawLine>
		lcd_DrawLine(225, 230, 215, 240, WHITE);
 800095a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	23f0      	movs	r3, #240	; 0xf0
 8000962:	22d7      	movs	r2, #215	; 0xd7
 8000964:	21e6      	movs	r1, #230	; 0xe6
 8000966:	20e1      	movs	r0, #225	; 0xe1
 8000968:	f001 fa8f 	bl	8001e8a <lcd_DrawLine>
	}

	lcd_ShowStr(20, 265, " WALL:", WHITE, GRAY, 24, 0);
 800096c:	2300      	movs	r3, #0
 800096e:	9302      	str	r3, [sp, #8]
 8000970:	2318      	movs	r3, #24
 8000972:	9301      	str	r3, [sp, #4]
 8000974:	f248 4330 	movw	r3, #33840	; 0x8430
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800097e:	4a4f      	ldr	r2, [pc, #316]	; (8000abc <setupAdvance+0x2fc>)
 8000980:	f240 1109 	movw	r1, #265	; 0x109
 8000984:	2014      	movs	r0, #20
 8000986:	f001 fde5 	bl	8002554 <lcd_ShowStr>
	lcd_DrawRectangle(150, 260, 200, 290, WHITE);
 800098a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000994:	22c8      	movs	r2, #200	; 0xc8
 8000996:	f44f 7182 	mov.w	r1, #260	; 0x104
 800099a:	2096      	movs	r0, #150	; 0x96
 800099c:	f001 faf9 	bl	8001f92 <lcd_DrawRectangle>
	char *str4 = convert2str(WALL);
 80009a0:	4b47      	ldr	r3, [pc, #284]	; (8000ac0 <setupAdvance+0x300>)
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f002 f913 	bl	8002bd0 <convert2str>
 80009aa:	4603      	mov	r3, r0
 80009ac:	637b      	str	r3, [r7, #52]	; 0x34
	if(WALL < 10)
 80009ae:	4b44      	ldr	r3, [pc, #272]	; (8000ac0 <setupAdvance+0x300>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	2b09      	cmp	r3, #9
 80009b4:	d80f      	bhi.n	80009d6 <setupAdvance+0x216>
	{
		lcd_ShowStr(170, 265, str4, WHITE, GRAY, 24, 1);
 80009b6:	2301      	movs	r3, #1
 80009b8:	9302      	str	r3, [sp, #8]
 80009ba:	2318      	movs	r3, #24
 80009bc:	9301      	str	r3, [sp, #4]
 80009be:	f248 4330 	movw	r3, #33840	; 0x8430
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009ca:	f240 1109 	movw	r1, #265	; 0x109
 80009ce:	20aa      	movs	r0, #170	; 0xaa
 80009d0:	f001 fdc0 	bl	8002554 <lcd_ShowStr>
 80009d4:	e00e      	b.n	80009f4 <setupAdvance+0x234>
	}else{
		lcd_ShowStr(165, 265, str4, WHITE, GRAY, 24, 1);
 80009d6:	2301      	movs	r3, #1
 80009d8:	9302      	str	r3, [sp, #8]
 80009da:	2318      	movs	r3, #24
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	f248 4330 	movw	r3, #33840	; 0x8430
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009ea:	f240 1109 	movw	r1, #265	; 0x109
 80009ee:	20a5      	movs	r0, #165	; 0xa5
 80009f0:	f001 fdb0 	bl	8002554 <lcd_ShowStr>
	}

	if(WALL < 30)
 80009f4:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <setupAdvance+0x300>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	2b1d      	cmp	r3, #29
 80009fa:	d820      	bhi.n	8000a3e <setupAdvance+0x27e>
	{
		lcd_DrawLine(205, 270, 225, 270, WHITE);
 80009fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8000a06:	22e1      	movs	r2, #225	; 0xe1
 8000a08:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8000a0c:	20cd      	movs	r0, #205	; 0xcd
 8000a0e:	f001 fa3c 	bl	8001e8a <lcd_DrawLine>
		lcd_DrawLine(205, 270, 215, 260, WHITE);
 8000a12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000a1c:	22d7      	movs	r2, #215	; 0xd7
 8000a1e:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8000a22:	20cd      	movs	r0, #205	; 0xcd
 8000a24:	f001 fa31 	bl	8001e8a <lcd_DrawLine>
		lcd_DrawLine(225, 270, 215, 260, WHITE);
 8000a28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000a32:	22d7      	movs	r2, #215	; 0xd7
 8000a34:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8000a38:	20e1      	movs	r0, #225	; 0xe1
 8000a3a:	f001 fa26 	bl	8001e8a <lcd_DrawLine>
	}
	if(WALL > 0)
 8000a3e:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <setupAdvance+0x300>)
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d020      	beq.n	8000a88 <setupAdvance+0x2c8>
	{
		lcd_DrawLine(205, 280, 225, 280, WHITE);
 8000a46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000a50:	22e1      	movs	r2, #225	; 0xe1
 8000a52:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000a56:	20cd      	movs	r0, #205	; 0xcd
 8000a58:	f001 fa17 	bl	8001e8a <lcd_DrawLine>
		lcd_DrawLine(205, 280, 215, 290, WHITE);
 8000a5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000a66:	22d7      	movs	r2, #215	; 0xd7
 8000a68:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000a6c:	20cd      	movs	r0, #205	; 0xcd
 8000a6e:	f001 fa0c 	bl	8001e8a <lcd_DrawLine>
		lcd_DrawLine(225, 280, 215, 290, WHITE);
 8000a72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000a7c:	22d7      	movs	r2, #215	; 0xd7
 8000a7e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000a82:	20e1      	movs	r0, #225	; 0xe1
 8000a84:	f001 fa01 	bl	8001e8a <lcd_DrawLine>
	}
}
 8000a88:	bf00      	nop
 8000a8a:	3744      	adds	r7, #68	; 0x44
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd90      	pop	{r4, r7, pc}
 8000a90:	20000074 	.word	0x20000074
 8000a94:	20000078 	.word	0x20000078
 8000a98:	2000007c 	.word	0x2000007c
 8000a9c:	20000080 	.word	0x20000080
 8000aa0:	080103f4 	.word	0x080103f4
 8000aa4:	0800cef8 	.word	0x0800cef8
 8000aa8:	0800cf28 	.word	0x0800cf28
 8000aac:	20000258 	.word	0x20000258
 8000ab0:	0800cf08 	.word	0x0800cf08
 8000ab4:	0800cf18 	.word	0x0800cf18
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	0800cf20 	.word	0x0800cf20
 8000ac0:	2000025c 	.word	0x2000025c

08000ac4 <initAdvanceMode>:

void initAdvanceMode()
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	if(button_count[3] == 1)
 8000ac8:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <initAdvanceMode+0x94>)
 8000aca:	88db      	ldrh	r3, [r3, #6]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d10e      	bne.n	8000aee <initAdvanceMode+0x2a>
	{
		TIMING = TIMING + 30;
 8000ad0:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <initAdvanceMode+0x98>)
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	331e      	adds	r3, #30
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <initAdvanceMode+0x98>)
 8000ada:	801a      	strh	r2, [r3, #0]
		if(TIMING > 120)
 8000adc:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <initAdvanceMode+0x98>)
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	2b78      	cmp	r3, #120	; 0x78
 8000ae2:	d902      	bls.n	8000aea <initAdvanceMode+0x26>
		{
			TIMING = 120;
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <initAdvanceMode+0x98>)
 8000ae6:	2278      	movs	r2, #120	; 0x78
 8000ae8:	801a      	strh	r2, [r3, #0]
		}
		setupAdvance();
 8000aea:	f7ff fe69 	bl	80007c0 <setupAdvance>
	}
	if(button_count[7] == 1)
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <initAdvanceMode+0x94>)
 8000af0:	89db      	ldrh	r3, [r3, #14]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d10e      	bne.n	8000b14 <initAdvanceMode+0x50>
	{
		TIMING = TIMING - 30;
 8000af6:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <initAdvanceMode+0x98>)
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	3b1e      	subs	r3, #30
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <initAdvanceMode+0x98>)
 8000b00:	801a      	strh	r2, [r3, #0]
		if(TIMING < 30)
 8000b02:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <initAdvanceMode+0x98>)
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	2b1d      	cmp	r3, #29
 8000b08:	d802      	bhi.n	8000b10 <initAdvanceMode+0x4c>
		{
			TIMING = 30;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <initAdvanceMode+0x98>)
 8000b0c:	221e      	movs	r2, #30
 8000b0e:	801a      	strh	r2, [r3, #0]
		}
		setupAdvance();
 8000b10:	f7ff fe56 	bl	80007c0 <setupAdvance>
	}
	if(button_count[11] == 1)
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <initAdvanceMode+0x94>)
 8000b16:	8adb      	ldrh	r3, [r3, #22]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d10e      	bne.n	8000b3a <initAdvanceMode+0x76>
	{
		WALL = WALL + 5;
 8000b1c:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <initAdvanceMode+0x9c>)
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	3305      	adds	r3, #5
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <initAdvanceMode+0x9c>)
 8000b26:	801a      	strh	r2, [r3, #0]
		if(WALL > 30)
 8000b28:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <initAdvanceMode+0x9c>)
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	2b1e      	cmp	r3, #30
 8000b2e:	d902      	bls.n	8000b36 <initAdvanceMode+0x72>
		{
			WALL = 30;
 8000b30:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <initAdvanceMode+0x9c>)
 8000b32:	221e      	movs	r2, #30
 8000b34:	801a      	strh	r2, [r3, #0]
		}
		setupAdvance();
 8000b36:	f7ff fe43 	bl	80007c0 <setupAdvance>
	}
	if(button_count[15] == 1)
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <initAdvanceMode+0x94>)
 8000b3c:	8bdb      	ldrh	r3, [r3, #30]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d107      	bne.n	8000b52 <initAdvanceMode+0x8e>
	{
		WALL = WALL - 5;
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <initAdvanceMode+0x9c>)
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	3b05      	subs	r3, #5
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <initAdvanceMode+0x9c>)
 8000b4c:	801a      	strh	r2, [r3, #0]
		if(WALL < 0)
		{
			WALL = 0;
		}
		setupAdvance();
 8000b4e:	f7ff fe37 	bl	80007c0 <setupAdvance>
	}
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200001d4 	.word	0x200001d4
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	2000025c 	.word	0x2000025c

08000b64 <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2108      	movs	r1, #8
 8000b6e:	480b      	ldr	r0, [pc, #44]	; (8000b9c <button_init+0x38>)
 8000b70:	f007 fbc0 	bl	80082f4 <HAL_GPIO_WritePin>
	for (int i= 0; i < 6; i++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	e007      	b.n	8000b8a <button_init+0x26>
	{
		buttonForSnake[i]= 0;
 8000b7a:	4a09      	ldr	r2, [pc, #36]	; (8000ba0 <button_init+0x3c>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i= 0; i < 6; i++)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3301      	adds	r3, #1
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b05      	cmp	r3, #5
 8000b8e:	ddf4      	ble.n	8000b7a <button_init+0x16>
	}
}
 8000b90:	bf00      	nop
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40020c00 	.word	0x40020c00
 8000ba0:	200001f8 	.word	0x200001f8

08000ba4 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2108      	movs	r1, #8
 8000bae:	4851      	ldr	r0, [pc, #324]	; (8000cf4 <button_Scan+0x150>)
 8000bb0:	f007 fba0 	bl	80082f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2108      	movs	r1, #8
 8000bb8:	484e      	ldr	r0, [pc, #312]	; (8000cf4 <button_Scan+0x150>)
 8000bba:	f007 fb9b 	bl	80082f4 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000bbe:	230a      	movs	r3, #10
 8000bc0:	2202      	movs	r2, #2
 8000bc2:	494d      	ldr	r1, [pc, #308]	; (8000cf8 <button_Scan+0x154>)
 8000bc4:	484d      	ldr	r0, [pc, #308]	; (8000cfc <button_Scan+0x158>)
 8000bc6:	f008 fa0c 	bl	8008fe2 <HAL_SPI_Receive>
	  int button_index = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bd2:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	e083      	b.n	8000ce2 <button_Scan+0x13e>
		  if(i >= 0 && i <= 3){   /// 4 --> 7
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	db06      	blt.n	8000bee <button_Scan+0x4a>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b03      	cmp	r3, #3
 8000be4:	dc03      	bgt.n	8000bee <button_Scan+0x4a>
			  button_index = i + 4;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3304      	adds	r3, #4
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	e018      	b.n	8000c20 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b03      	cmp	r3, #3
 8000bf2:	dd07      	ble.n	8000c04 <button_Scan+0x60>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b07      	cmp	r3, #7
 8000bf8:	dc04      	bgt.n	8000c04 <button_Scan+0x60>
			  button_index = 7 - i;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f1c3 0307 	rsb	r3, r3, #7
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	e00d      	b.n	8000c20 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b07      	cmp	r3, #7
 8000c08:	dd06      	ble.n	8000c18 <button_Scan+0x74>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b0b      	cmp	r3, #11
 8000c0e:	dc03      	bgt.n	8000c18 <button_Scan+0x74>
			  button_index = i + 4;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3304      	adds	r3, #4
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	e003      	b.n	8000c20 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f1c3 0317 	rsb	r3, r3, #23
 8000c1e:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000c20:	4b35      	ldr	r3, [pc, #212]	; (8000cf8 <button_Scan+0x154>)
 8000c22:	881a      	ldrh	r2, [r3, #0]
 8000c24:	897b      	ldrh	r3, [r7, #10]
 8000c26:	4013      	ands	r3, r2
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d005      	beq.n	8000c3a <button_Scan+0x96>
 8000c2e:	4a34      	ldr	r2, [pc, #208]	; (8000d00 <button_Scan+0x15c>)
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	2100      	movs	r1, #0
 8000c34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c38:	e04d      	b.n	8000cd6 <button_Scan+0x132>
		  else
	  	  {
				button_count[button_index]++;
 8000c3a:	4a31      	ldr	r2, [pc, #196]	; (8000d00 <button_Scan+0x15c>)
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c42:	3301      	adds	r3, #1
 8000c44:	b299      	uxth	r1, r3
 8000c46:	4a2e      	ldr	r2, [pc, #184]	; (8000d00 <button_Scan+0x15c>)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				switch (button_index)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	3b05      	subs	r3, #5
 8000c52:	2b08      	cmp	r3, #8
 8000c54:	d83e      	bhi.n	8000cd4 <button_Scan+0x130>
 8000c56:	a201      	add	r2, pc, #4	; (adr r2, 8000c5c <button_Scan+0xb8>)
 8000c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c5c:	08000c81 	.word	0x08000c81
 8000c60:	08000cd5 	.word	0x08000cd5
 8000c64:	08000cd5 	.word	0x08000cd5
 8000c68:	08000c8f 	.word	0x08000c8f
 8000c6c:	08000c9d 	.word	0x08000c9d
 8000c70:	08000cab 	.word	0x08000cab
 8000c74:	08000cd5 	.word	0x08000cd5
 8000c78:	08000cb9 	.word	0x08000cb9
 8000c7c:	08000cc7 	.word	0x08000cc7
				{
				case 5:
					buttonForSnake[0]++;
 8000c80:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <button_Scan+0x160>)
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	3301      	adds	r3, #1
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <button_Scan+0x160>)
 8000c8a:	801a      	strh	r2, [r3, #0]
					break;
 8000c8c:	e023      	b.n	8000cd6 <button_Scan+0x132>
				case 8:
					buttonForSnake[1]++;
 8000c8e:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <button_Scan+0x160>)
 8000c90:	885b      	ldrh	r3, [r3, #2]
 8000c92:	3301      	adds	r3, #1
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <button_Scan+0x160>)
 8000c98:	805a      	strh	r2, [r3, #2]
					break;
 8000c9a:	e01c      	b.n	8000cd6 <button_Scan+0x132>
				case 9:
					buttonForSnake[2]++;
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <button_Scan+0x160>)
 8000c9e:	889b      	ldrh	r3, [r3, #4]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <button_Scan+0x160>)
 8000ca6:	809a      	strh	r2, [r3, #4]
					break;
 8000ca8:	e015      	b.n	8000cd6 <button_Scan+0x132>
				case 10:
					buttonForSnake[3]++;
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <button_Scan+0x160>)
 8000cac:	88db      	ldrh	r3, [r3, #6]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <button_Scan+0x160>)
 8000cb4:	80da      	strh	r2, [r3, #6]
					break;
 8000cb6:	e00e      	b.n	8000cd6 <button_Scan+0x132>
				case 12:
					buttonForSnake[4]++;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <button_Scan+0x160>)
 8000cba:	891b      	ldrh	r3, [r3, #8]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <button_Scan+0x160>)
 8000cc2:	811a      	strh	r2, [r3, #8]
					break;
 8000cc4:	e007      	b.n	8000cd6 <button_Scan+0x132>
				case 13:
					buttonForSnake[5]++;
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <button_Scan+0x160>)
 8000cc8:	895b      	ldrh	r3, [r3, #10]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <button_Scan+0x160>)
 8000cd0:	815a      	strh	r2, [r3, #10]
					break;
 8000cd2:	e000      	b.n	8000cd6 <button_Scan+0x132>
				default:
					break;
 8000cd4:	bf00      	nop
				}
		  }
		  mask = mask >> 1;
 8000cd6:	897b      	ldrh	r3, [r7, #10]
 8000cd8:	085b      	lsrs	r3, r3, #1
 8000cda:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	f77f af78 	ble.w	8000bda <button_Scan+0x36>
	  }
}
 8000cea:	bf00      	nop
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40020c00 	.word	0x40020c00
 8000cf8:	200001f4 	.word	0x200001f4
 8000cfc:	20002a28 	.word	0x20002a28
 8000d00:	200001d4 	.word	0x200001d4
 8000d04:	200001f8 	.word	0x200001f8

08000d08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_DMA_Init+0x3c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <MX_DMA_Init+0x3c>)
 8000d18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_DMA_Init+0x3c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2038      	movs	r0, #56	; 0x38
 8000d30:	f006 fd0b 	bl	800774a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d34:	2038      	movs	r0, #56	; 0x38
 8000d36:	f006 fd24 	bl	8007782 <HAL_NVIC_EnableIRQ>

}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800

08000d48 <showNotifyExit>:
{

}

void showNotifyExit()
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af04      	add	r7, sp, #16
	lcd_StrCenter(0, overWallY[0] + 5, "DO YOU WANT", WHITE, BLACK, 16, 0);
 8000d4e:	4b2d      	ldr	r3, [pc, #180]	; (8000e04 <showNotifyExit+0xbc>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	3305      	adds	r3, #5
 8000d56:	b299      	uxth	r1, r3
 8000d58:	2300      	movs	r3, #0
 8000d5a:	9302      	str	r3, [sp, #8]
 8000d5c:	2310      	movs	r3, #16
 8000d5e:	9301      	str	r3, [sp, #4]
 8000d60:	2300      	movs	r3, #0
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d68:	4a27      	ldr	r2, [pc, #156]	; (8000e08 <showNotifyExit+0xc0>)
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f001 fc56 	bl	800261c <lcd_StrCenter>
	lcd_StrCenter(0, overWallY[0] + 20, "TO EXIT?", WHITE, BLACK, 16, 0);
 8000d70:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <showNotifyExit+0xbc>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	3314      	adds	r3, #20
 8000d78:	b299      	uxth	r1, r3
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	9302      	str	r3, [sp, #8]
 8000d7e:	2310      	movs	r3, #16
 8000d80:	9301      	str	r3, [sp, #4]
 8000d82:	2300      	movs	r3, #0
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d8a:	4a20      	ldr	r2, [pc, #128]	; (8000e0c <showNotifyExit+0xc4>)
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f001 fc45 	bl	800261c <lcd_StrCenter>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "YES", BLACK, GRAY, 16, 1);
 8000d92:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <showNotifyExit+0xc8>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	3308      	adds	r3, #8
 8000d9a:	b298      	uxth	r0, r3
 8000d9c:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <showNotifyExit+0xbc>)
 8000d9e:	689a      	ldr	r2, [r3, #8]
 8000da0:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <showNotifyExit+0xbc>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4413      	add	r3, r2
 8000da6:	0fda      	lsrs	r2, r3, #31
 8000da8:	4413      	add	r3, r2
 8000daa:	105b      	asrs	r3, r3, #1
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	3b14      	subs	r3, #20
 8000db0:	b299      	uxth	r1, r3
 8000db2:	2301      	movs	r3, #1
 8000db4:	9302      	str	r3, [sp, #8]
 8000db6:	2310      	movs	r3, #16
 8000db8:	9301      	str	r3, [sp, #4]
 8000dba:	f248 4330 	movw	r3, #33840	; 0x8430
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <showNotifyExit+0xcc>)
 8000dc4:	f001 fbc6 	bl	8002554 <lcd_ShowStr>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 25, "NO", BLACK, GRAY, 16, 1);
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <showNotifyExit+0xc8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	3308      	adds	r3, #8
 8000dd0:	b298      	uxth	r0, r3
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <showNotifyExit+0xbc>)
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <showNotifyExit+0xbc>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	0fda      	lsrs	r2, r3, #31
 8000dde:	4413      	add	r3, r2
 8000de0:	105b      	asrs	r3, r3, #1
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	3319      	adds	r3, #25
 8000de6:	b299      	uxth	r1, r3
 8000de8:	2301      	movs	r3, #1
 8000dea:	9302      	str	r3, [sp, #8]
 8000dec:	2310      	movs	r3, #16
 8000dee:	9301      	str	r3, [sp, #4]
 8000df0:	f248 4330 	movw	r3, #33840	; 0x8430
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2300      	movs	r3, #0
 8000df8:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <showNotifyExit+0xd0>)
 8000dfa:	f001 fbab 	bl	8002554 <lcd_ShowStr>
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	2000004c 	.word	0x2000004c
 8000e08:	0800cf5c 	.word	0x0800cf5c
 8000e0c:	0800cf68 	.word	0x0800cf68
 8000e10:	2000003c 	.word	0x2000003c
 8000e14:	0800cf74 	.word	0x0800cf74
 8000e18:	0800cf78 	.word	0x0800cf78

08000e1c <drawArrowExit>:

void drawArrowExit()
{
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b087      	sub	sp, #28
 8000e20:	af04      	add	r7, sp, #16
	int yValNewGame = (overWallY[2]+overWallY[0])/2 - 15 + 7;
 8000e22:	4b58      	ldr	r3, [pc, #352]	; (8000f84 <drawArrowExit+0x168>)
 8000e24:	689a      	ldr	r2, [r3, #8]
 8000e26:	4b57      	ldr	r3, [pc, #348]	; (8000f84 <drawArrowExit+0x168>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	0fda      	lsrs	r2, r3, #31
 8000e2e:	4413      	add	r3, r2
 8000e30:	105b      	asrs	r3, r3, #1
 8000e32:	3b08      	subs	r3, #8
 8000e34:	607b      	str	r3, [r7, #4]
	int yValExit = (overWallY[2]+overWallY[0])/2 + 20 + 8;
 8000e36:	4b53      	ldr	r3, [pc, #332]	; (8000f84 <drawArrowExit+0x168>)
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	4b52      	ldr	r3, [pc, #328]	; (8000f84 <drawArrowExit+0x168>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	0fda      	lsrs	r2, r3, #31
 8000e42:	4413      	add	r3, r2
 8000e44:	105b      	asrs	r3, r3, #1
 8000e46:	331c      	adds	r3, #28
 8000e48:	603b      	str	r3, [r7, #0]

	switch(arrowExitMode)
 8000e4a:	4b4f      	ldr	r3, [pc, #316]	; (8000f88 <drawArrowExit+0x16c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d003      	beq.n	8000e5a <drawArrowExit+0x3e>
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	f000 80a2 	beq.w	8000f9c <drawArrowExit+0x180>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
		break;
	}
}
 8000e58:	e135      	b.n	80010c6 <drawArrowExit+0x2aa>
		lcd_Fill(overWallX[0] + wallSize, overWallY[0] + 35, overWallX[1] - wallSize, overWallY[3]-5, GRAY);
 8000e5a:	4b4c      	ldr	r3, [pc, #304]	; (8000f8c <drawArrowExit+0x170>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	4b4b      	ldr	r3, [pc, #300]	; (8000f90 <drawArrowExit+0x174>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	4413      	add	r3, r2
 8000e68:	b298      	uxth	r0, r3
 8000e6a:	4b46      	ldr	r3, [pc, #280]	; (8000f84 <drawArrowExit+0x168>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	3323      	adds	r3, #35	; 0x23
 8000e72:	b299      	uxth	r1, r3
 8000e74:	4b45      	ldr	r3, [pc, #276]	; (8000f8c <drawArrowExit+0x170>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	4b45      	ldr	r3, [pc, #276]	; (8000f90 <drawArrowExit+0x174>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	4b3f      	ldr	r3, [pc, #252]	; (8000f84 <drawArrowExit+0x168>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	3b05      	subs	r3, #5
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	f248 4430 	movw	r4, #33840	; 0x8430
 8000e92:	9400      	str	r4, [sp, #0]
 8000e94:	f000 ffac 	bl	8001df0 <lcd_Fill>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "YES", RED, GRAY, 16, 1);
 8000e98:	4b3c      	ldr	r3, [pc, #240]	; (8000f8c <drawArrowExit+0x170>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	3308      	adds	r3, #8
 8000ea0:	b298      	uxth	r0, r3
 8000ea2:	4b38      	ldr	r3, [pc, #224]	; (8000f84 <drawArrowExit+0x168>)
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	4b37      	ldr	r3, [pc, #220]	; (8000f84 <drawArrowExit+0x168>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	0fda      	lsrs	r2, r3, #31
 8000eae:	4413      	add	r3, r2
 8000eb0:	105b      	asrs	r3, r3, #1
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	3b0f      	subs	r3, #15
 8000eb6:	b299      	uxth	r1, r3
 8000eb8:	2301      	movs	r3, #1
 8000eba:	9302      	str	r3, [sp, #8]
 8000ebc:	2310      	movs	r3, #16
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	f248 4330 	movw	r3, #33840	; 0x8430
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000eca:	4a32      	ldr	r2, [pc, #200]	; (8000f94 <drawArrowExit+0x178>)
 8000ecc:	f001 fb42 	bl	8002554 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "NO", BLACK, GRAY, 16, 1);
 8000ed0:	4b2e      	ldr	r3, [pc, #184]	; (8000f8c <drawArrowExit+0x170>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	3308      	adds	r3, #8
 8000ed8:	b298      	uxth	r0, r3
 8000eda:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <drawArrowExit+0x168>)
 8000edc:	689a      	ldr	r2, [r3, #8]
 8000ede:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <drawArrowExit+0x168>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	0fda      	lsrs	r2, r3, #31
 8000ee6:	4413      	add	r3, r2
 8000ee8:	105b      	asrs	r3, r3, #1
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	3314      	adds	r3, #20
 8000eee:	b299      	uxth	r1, r3
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	9302      	str	r3, [sp, #8]
 8000ef4:	2310      	movs	r3, #16
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	f248 4330 	movw	r3, #33840	; 0x8430
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	2300      	movs	r3, #0
 8000f00:	4a25      	ldr	r2, [pc, #148]	; (8000f98 <drawArrowExit+0x17c>)
 8000f02:	f001 fb27 	bl	8002554 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame - 5, BLACK);
 8000f06:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <drawArrowExit+0x170>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	3b0f      	subs	r3, #15
 8000f0e:	b298      	uxth	r0, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	b299      	uxth	r1, r3
 8000f14:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <drawArrowExit+0x170>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	3b0a      	subs	r3, #10
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	3b05      	subs	r3, #5
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	2400      	movs	r4, #0
 8000f28:	9400      	str	r4, [sp, #0]
 8000f2a:	f000 ffae 	bl	8001e8a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame + 5, BLACK);
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <drawArrowExit+0x170>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	3b0f      	subs	r3, #15
 8000f36:	b298      	uxth	r0, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	b299      	uxth	r1, r3
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <drawArrowExit+0x170>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	3b0a      	subs	r3, #10
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	3305      	adds	r3, #5
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	2400      	movs	r4, #0
 8000f50:	9400      	str	r4, [sp, #0]
 8000f52:	f000 ff9a 	bl	8001e8a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValNewGame - 5, overWallX[1] - 10, yValNewGame + 5, BLACK);
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <drawArrowExit+0x170>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	3b0a      	subs	r3, #10
 8000f5e:	b298      	uxth	r0, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	3b05      	subs	r3, #5
 8000f66:	b299      	uxth	r1, r3
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <drawArrowExit+0x170>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	3b0a      	subs	r3, #10
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	3305      	adds	r3, #5
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	2400      	movs	r4, #0
 8000f7c:	9400      	str	r4, [sp, #0]
 8000f7e:	f000 ff84 	bl	8001e8a <lcd_DrawLine>
		break;
 8000f82:	e0a0      	b.n	80010c6 <drawArrowExit+0x2aa>
 8000f84:	2000004c 	.word	0x2000004c
 8000f88:	20000060 	.word	0x20000060
 8000f8c:	2000003c 	.word	0x2000003c
 8000f90:	20000038 	.word	0x20000038
 8000f94:	0800cf74 	.word	0x0800cf74
 8000f98:	0800cf78 	.word	0x0800cf78
		lcd_Fill(overWallX[0] + wallSize, overWallY[0] + 35, overWallX[1] - wallSize, overWallY[3]-5, GRAY);
 8000f9c:	4b4c      	ldr	r3, [pc, #304]	; (80010d0 <drawArrowExit+0x2b4>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	4b4c      	ldr	r3, [pc, #304]	; (80010d4 <drawArrowExit+0x2b8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	4413      	add	r3, r2
 8000faa:	b298      	uxth	r0, r3
 8000fac:	4b4a      	ldr	r3, [pc, #296]	; (80010d8 <drawArrowExit+0x2bc>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	3323      	adds	r3, #35	; 0x23
 8000fb4:	b299      	uxth	r1, r3
 8000fb6:	4b46      	ldr	r3, [pc, #280]	; (80010d0 <drawArrowExit+0x2b4>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	4b45      	ldr	r3, [pc, #276]	; (80010d4 <drawArrowExit+0x2b8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	4b44      	ldr	r3, [pc, #272]	; (80010d8 <drawArrowExit+0x2bc>)
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	3b05      	subs	r3, #5
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	f248 4430 	movw	r4, #33840	; 0x8430
 8000fd4:	9400      	str	r4, [sp, #0]
 8000fd6:	f000 ff0b 	bl	8001df0 <lcd_Fill>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "YES", BLACK, GRAY, 16, 1);
 8000fda:	4b3d      	ldr	r3, [pc, #244]	; (80010d0 <drawArrowExit+0x2b4>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	3308      	adds	r3, #8
 8000fe2:	b298      	uxth	r0, r3
 8000fe4:	4b3c      	ldr	r3, [pc, #240]	; (80010d8 <drawArrowExit+0x2bc>)
 8000fe6:	689a      	ldr	r2, [r3, #8]
 8000fe8:	4b3b      	ldr	r3, [pc, #236]	; (80010d8 <drawArrowExit+0x2bc>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4413      	add	r3, r2
 8000fee:	0fda      	lsrs	r2, r3, #31
 8000ff0:	4413      	add	r3, r2
 8000ff2:	105b      	asrs	r3, r3, #1
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	3b0f      	subs	r3, #15
 8000ff8:	b299      	uxth	r1, r3
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	2310      	movs	r3, #16
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	f248 4330 	movw	r3, #33840	; 0x8430
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2300      	movs	r3, #0
 800100a:	4a34      	ldr	r2, [pc, #208]	; (80010dc <drawArrowExit+0x2c0>)
 800100c:	f001 faa2 	bl	8002554 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "NO", RED, GRAY, 16, 1);
 8001010:	4b2f      	ldr	r3, [pc, #188]	; (80010d0 <drawArrowExit+0x2b4>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	b29b      	uxth	r3, r3
 8001016:	3308      	adds	r3, #8
 8001018:	b298      	uxth	r0, r3
 800101a:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <drawArrowExit+0x2bc>)
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	4b2e      	ldr	r3, [pc, #184]	; (80010d8 <drawArrowExit+0x2bc>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4413      	add	r3, r2
 8001024:	0fda      	lsrs	r2, r3, #31
 8001026:	4413      	add	r3, r2
 8001028:	105b      	asrs	r3, r3, #1
 800102a:	b29b      	uxth	r3, r3
 800102c:	3314      	adds	r3, #20
 800102e:	b299      	uxth	r1, r3
 8001030:	2301      	movs	r3, #1
 8001032:	9302      	str	r3, [sp, #8]
 8001034:	2310      	movs	r3, #16
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	f248 4330 	movw	r3, #33840	; 0x8430
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001042:	4a27      	ldr	r2, [pc, #156]	; (80010e0 <drawArrowExit+0x2c4>)
 8001044:	f001 fa86 	bl	8002554 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
 8001048:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <drawArrowExit+0x2b4>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	b29b      	uxth	r3, r3
 800104e:	3b0f      	subs	r3, #15
 8001050:	b298      	uxth	r0, r3
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	b299      	uxth	r1, r3
 8001056:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <drawArrowExit+0x2b4>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	b29b      	uxth	r3, r3
 800105c:	3b0a      	subs	r3, #10
 800105e:	b29a      	uxth	r2, r3
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b29b      	uxth	r3, r3
 8001064:	3b05      	subs	r3, #5
 8001066:	b29b      	uxth	r3, r3
 8001068:	2400      	movs	r4, #0
 800106a:	9400      	str	r4, [sp, #0]
 800106c:	f000 ff0d 	bl	8001e8a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <drawArrowExit+0x2b4>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	b29b      	uxth	r3, r3
 8001076:	3b0f      	subs	r3, #15
 8001078:	b298      	uxth	r0, r3
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b299      	uxth	r1, r3
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <drawArrowExit+0x2b4>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	b29b      	uxth	r3, r3
 8001084:	3b0a      	subs	r3, #10
 8001086:	b29a      	uxth	r2, r3
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b29b      	uxth	r3, r3
 800108c:	3305      	adds	r3, #5
 800108e:	b29b      	uxth	r3, r3
 8001090:	2400      	movs	r4, #0
 8001092:	9400      	str	r4, [sp, #0]
 8001094:	f000 fef9 	bl	8001e8a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <drawArrowExit+0x2b4>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	b29b      	uxth	r3, r3
 800109e:	3b0a      	subs	r3, #10
 80010a0:	b298      	uxth	r0, r3
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	3b05      	subs	r3, #5
 80010a8:	b299      	uxth	r1, r3
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <drawArrowExit+0x2b4>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	3b0a      	subs	r3, #10
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	3305      	adds	r3, #5
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	2400      	movs	r4, #0
 80010be:	9400      	str	r4, [sp, #0]
 80010c0:	f000 fee3 	bl	8001e8a <lcd_DrawLine>
		break;
 80010c4:	bf00      	nop
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd90      	pop	{r4, r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000003c 	.word	0x2000003c
 80010d4:	20000038 	.word	0x20000038
 80010d8:	2000004c 	.word	0x2000004c
 80010dc:	0800cf74 	.word	0x0800cf74
 80010e0:	0800cf78 	.word	0x0800cf78

080010e4 <gameExitUI>:

void gameExitUI()
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	showWallnotify();
 80010e8:	f000 f91e 	bl	8001328 <showWallnotify>
	showNotifyExit();
 80010ec:	f7ff fe2c 	bl	8000d48 <showNotifyExit>
	drawArrowExit();
 80010f0:	f7ff fe94 	bl	8000e1c <drawArrowExit>
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <askToExit>:

void askToExit()
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	if(statusGame == EXITMODE)
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <askToExit+0x74>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b0a      	cmp	r3, #10
 8001102:	d131      	bne.n	8001168 <askToExit+0x70>
	{
		if(button_count[3] == 1)
 8001104:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <askToExit+0x78>)
 8001106:	88db      	ldrh	r3, [r3, #6]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d10c      	bne.n	8001126 <askToExit+0x2e>
		{
			flagExit = 1;
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <askToExit+0x7c>)
 800110e:	2201      	movs	r2, #1
 8001110:	601a      	str	r2, [r3, #0]
			switch(arrowExitMode)
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <askToExit+0x80>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b03      	cmp	r3, #3
 8001118:	d023      	beq.n	8001162 <askToExit+0x6a>
 800111a:	2b04      	cmp	r3, #4
 800111c:	d104      	bne.n	8001128 <askToExit+0x30>
			case YES:
				// Do nothing
				return;
				break;
			case NO:
				arrowExitMode = YES;
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <askToExit+0x80>)
 8001120:	2203      	movs	r2, #3
 8001122:	601a      	str	r2, [r3, #0]
				break;
 8001124:	e000      	b.n	8001128 <askToExit+0x30>
			}
		}
 8001126:	bf00      	nop
		if(button_count[7] == 1)
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <askToExit+0x78>)
 800112a:	89db      	ldrh	r3, [r3, #14]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d10d      	bne.n	800114c <askToExit+0x54>
		{
			flagExit = 1;
 8001130:	4b10      	ldr	r3, [pc, #64]	; (8001174 <askToExit+0x7c>)
 8001132:	2201      	movs	r2, #1
 8001134:	601a      	str	r2, [r3, #0]
			switch(arrowExitMode)
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <askToExit+0x80>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b03      	cmp	r3, #3
 800113c:	d002      	beq.n	8001144 <askToExit+0x4c>
 800113e:	2b04      	cmp	r3, #4
 8001140:	d011      	beq.n	8001166 <askToExit+0x6e>
 8001142:	e004      	b.n	800114e <askToExit+0x56>
			{
			case YES:
				arrowExitMode = NO;
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <askToExit+0x80>)
 8001146:	2204      	movs	r2, #4
 8001148:	601a      	str	r2, [r3, #0]
				break;
 800114a:	e000      	b.n	800114e <askToExit+0x56>
			case NO:
				// Do nothing
				return;
				break;
			}
		}
 800114c:	bf00      	nop
		if(flagExit == 1)
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <askToExit+0x7c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d108      	bne.n	8001168 <askToExit+0x70>
		{
			gameExitUI();
 8001156:	f7ff ffc5 	bl	80010e4 <gameExitUI>
			flagExit = 0;
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <askToExit+0x7c>)
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	e002      	b.n	8001168 <askToExit+0x70>
				return;
 8001162:	bf00      	nop
 8001164:	e000      	b.n	8001168 <askToExit+0x70>
				return;
 8001166:	bf00      	nop
		}
	}
}
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2000026c 	.word	0x2000026c
 8001170:	200001d4 	.word	0x200001d4
 8001174:	2000027c 	.word	0x2000027c
 8001178:	20000060 	.word	0x20000060

0800117c <initExit>:

void initExit()
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	gameExitUI();
 8001180:	f7ff ffb0 	bl	80010e4 <gameExitUI>
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08e      	sub	sp, #56	; 0x38
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]
 800119e:	615a      	str	r2, [r3, #20]
 80011a0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80011a2:	463b      	mov	r3, r7
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
 80011b0:	615a      	str	r2, [r3, #20]
 80011b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80011b4:	4b2f      	ldr	r3, [pc, #188]	; (8001274 <MX_FSMC_Init+0xec>)
 80011b6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80011ba:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80011bc:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <MX_FSMC_Init+0xec>)
 80011be:	4a2e      	ldr	r2, [pc, #184]	; (8001278 <MX_FSMC_Init+0xf0>)
 80011c0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80011c2:	4b2c      	ldr	r3, [pc, #176]	; (8001274 <MX_FSMC_Init+0xec>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80011c8:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <MX_FSMC_Init+0xec>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80011ce:	4b29      	ldr	r3, [pc, #164]	; (8001274 <MX_FSMC_Init+0xec>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80011d4:	4b27      	ldr	r3, [pc, #156]	; (8001274 <MX_FSMC_Init+0xec>)
 80011d6:	2210      	movs	r2, #16
 80011d8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80011da:	4b26      	ldr	r3, [pc, #152]	; (8001274 <MX_FSMC_Init+0xec>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80011e0:	4b24      	ldr	r3, [pc, #144]	; (8001274 <MX_FSMC_Init+0xec>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80011e6:	4b23      	ldr	r3, [pc, #140]	; (8001274 <MX_FSMC_Init+0xec>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80011ec:	4b21      	ldr	r3, [pc, #132]	; (8001274 <MX_FSMC_Init+0xec>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80011f2:	4b20      	ldr	r3, [pc, #128]	; (8001274 <MX_FSMC_Init+0xec>)
 80011f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011f8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80011fa:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <MX_FSMC_Init+0xec>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001200:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <MX_FSMC_Init+0xec>)
 8001202:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001206:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001208:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_FSMC_Init+0xec>)
 800120a:	2200      	movs	r2, #0
 800120c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <MX_FSMC_Init+0xec>)
 8001210:	2200      	movs	r2, #0
 8001212:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_FSMC_Init+0xec>)
 8001216:	2200      	movs	r2, #0
 8001218:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800121a:	230f      	movs	r3, #15
 800121c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800121e:	230f      	movs	r3, #15
 8001220:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001222:	233c      	movs	r3, #60	; 0x3c
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800122a:	2310      	movs	r3, #16
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800122e:	2311      	movs	r3, #17
 8001230:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001232:	2300      	movs	r3, #0
 8001234:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001236:	2308      	movs	r3, #8
 8001238:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800123a:	230f      	movs	r3, #15
 800123c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800123e:	2309      	movs	r3, #9
 8001240:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001246:	2310      	movs	r3, #16
 8001248:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800124a:	2311      	movs	r3, #17
 800124c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001252:	463a      	mov	r2, r7
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	4619      	mov	r1, r3
 800125a:	4806      	ldr	r0, [pc, #24]	; (8001274 <MX_FSMC_Init+0xec>)
 800125c:	f008 faa4 	bl	80097a8 <HAL_SRAM_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001266:	f001 fc5b 	bl	8002b20 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800126a:	bf00      	nop
 800126c:	3738      	adds	r7, #56	; 0x38
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000204 	.word	0x20000204
 8001278:	a0000104 	.word	0xa0000104

0800127c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001290:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <HAL_FSMC_MspInit+0x88>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d131      	bne.n	80012fc <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001298:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <HAL_FSMC_MspInit+0x88>)
 800129a:	2201      	movs	r2, #1
 800129c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	603b      	str	r3, [r7, #0]
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <HAL_FSMC_MspInit+0x8c>)
 80012a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a6:	4a18      	ldr	r2, [pc, #96]	; (8001308 <HAL_FSMC_MspInit+0x8c>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6393      	str	r3, [r2, #56]	; 0x38
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <HAL_FSMC_MspInit+0x8c>)
 80012b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80012ba:	f64f 7388 	movw	r3, #65416	; 0xff88
 80012be:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80012cc:	230c      	movs	r3, #12
 80012ce:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	4619      	mov	r1, r3
 80012d4:	480d      	ldr	r0, [pc, #52]	; (800130c <HAL_FSMC_MspInit+0x90>)
 80012d6:	f006 fe71 	bl	8007fbc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80012da:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80012de:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80012ec:	230c      	movs	r3, #12
 80012ee:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f0:	1d3b      	adds	r3, r7, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	4806      	ldr	r0, [pc, #24]	; (8001310 <HAL_FSMC_MspInit+0x94>)
 80012f6:	f006 fe61 	bl	8007fbc <HAL_GPIO_Init>
 80012fa:	e000      	b.n	80012fe <HAL_FSMC_MspInit+0x82>
    return;
 80012fc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000254 	.word	0x20000254
 8001308:	40023800 	.word	0x40023800
 800130c:	40021000 	.word	0x40021000
 8001310:	40020c00 	.word	0x40020c00

08001314 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800131c:	f7ff ffae 	bl	800127c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <showWallnotify>:
#include "button.h"
#include "picture.h"
#include "uart.h"

void showWallnotify()
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b083      	sub	sp, #12
 800132c:	af02      	add	r7, sp, #8
	lcd_Fill(overWallX[0], overWallY[0], overWallX[3], overWallY[3] - wallSize, GRAY);
 800132e:	4b38      	ldr	r3, [pc, #224]	; (8001410 <showWallnotify+0xe8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	b298      	uxth	r0, r3
 8001334:	4b37      	ldr	r3, [pc, #220]	; (8001414 <showWallnotify+0xec>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	b299      	uxth	r1, r3
 800133a:	4b35      	ldr	r3, [pc, #212]	; (8001410 <showWallnotify+0xe8>)
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	b29c      	uxth	r4, r3
 8001340:	4b34      	ldr	r3, [pc, #208]	; (8001414 <showWallnotify+0xec>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	b29a      	uxth	r2, r3
 8001346:	4b34      	ldr	r3, [pc, #208]	; (8001418 <showWallnotify+0xf0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	b29b      	uxth	r3, r3
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	b29b      	uxth	r3, r3
 8001350:	f248 4230 	movw	r2, #33840	; 0x8430
 8001354:	9200      	str	r2, [sp, #0]
 8001356:	4622      	mov	r2, r4
 8001358:	f000 fd4a 	bl	8001df0 <lcd_Fill>

	// Wall top
	lcd_Fill(overWallX[0], overWallY[0], overWallX[1], overWallY[1] + wallSize, BLACK);
 800135c:	4b2c      	ldr	r3, [pc, #176]	; (8001410 <showWallnotify+0xe8>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	b298      	uxth	r0, r3
 8001362:	4b2c      	ldr	r3, [pc, #176]	; (8001414 <showWallnotify+0xec>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	b299      	uxth	r1, r3
 8001368:	4b29      	ldr	r3, [pc, #164]	; (8001410 <showWallnotify+0xe8>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	b29c      	uxth	r4, r3
 800136e:	4b29      	ldr	r3, [pc, #164]	; (8001414 <showWallnotify+0xec>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	b29a      	uxth	r2, r3
 8001374:	4b28      	ldr	r3, [pc, #160]	; (8001418 <showWallnotify+0xf0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	b29b      	uxth	r3, r3
 800137a:	4413      	add	r3, r2
 800137c:	b29b      	uxth	r3, r3
 800137e:	2200      	movs	r2, #0
 8001380:	9200      	str	r2, [sp, #0]
 8001382:	4622      	mov	r2, r4
 8001384:	f000 fd34 	bl	8001df0 <lcd_Fill>
	// Wall left
	lcd_Fill(overWallX[0], overWallY[0], overWallX[2] + wallSize, overWallY[2], BLACK);
 8001388:	4b21      	ldr	r3, [pc, #132]	; (8001410 <showWallnotify+0xe8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	b298      	uxth	r0, r3
 800138e:	4b21      	ldr	r3, [pc, #132]	; (8001414 <showWallnotify+0xec>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	b299      	uxth	r1, r3
 8001394:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <showWallnotify+0xe8>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	b29a      	uxth	r2, r3
 800139a:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <showWallnotify+0xf0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	4413      	add	r3, r2
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <showWallnotify+0xec>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	2400      	movs	r4, #0
 80013ac:	9400      	str	r4, [sp, #0]
 80013ae:	f000 fd1f 	bl	8001df0 <lcd_Fill>
	//Wall right
	lcd_Fill(overWallX[1] - wallSize, overWallY[1], overWallX[3], overWallY[3], BLACK);
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <showWallnotify+0xe8>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <showWallnotify+0xf0>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	b298      	uxth	r0, r3
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <showWallnotify+0xec>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	b299      	uxth	r1, r3
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <showWallnotify+0xe8>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <showWallnotify+0xec>)
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	2400      	movs	r4, #0
 80013d6:	9400      	str	r4, [sp, #0]
 80013d8:	f000 fd0a 	bl	8001df0 <lcd_Fill>
	//Wall bottom
	lcd_Fill(overWallX[2], overWallY[2] - wallSize, overWallX[3], overWallY[3], BLACK);
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <showWallnotify+0xe8>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	b298      	uxth	r0, r3
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <showWallnotify+0xec>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <showWallnotify+0xf0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	b299      	uxth	r1, r3
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <showWallnotify+0xe8>)
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <showWallnotify+0xec>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	2400      	movs	r4, #0
 8001400:	9400      	str	r4, [sp, #0]
 8001402:	f000 fcf5 	bl	8001df0 <lcd_Fill>

}
 8001406:	bf00      	nop
 8001408:	3704      	adds	r7, #4
 800140a:	46bd      	mov	sp, r7
 800140c:	bd90      	pop	{r4, r7, pc}
 800140e:	bf00      	nop
 8001410:	2000003c 	.word	0x2000003c
 8001414:	2000004c 	.word	0x2000004c
 8001418:	20000038 	.word	0x20000038

0800141c <showNotifyOver>:

void showNotifyOver(uint16_t overVal)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b094      	sub	sp, #80	; 0x50
 8001420:	af04      	add	r7, sp, #16
 8001422:	4603      	mov	r3, r0
 8001424:	80fb      	strh	r3, [r7, #6]
	char str1[50] = "";
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	f107 030c 	add.w	r3, r7, #12
 800142e:	222e      	movs	r2, #46	; 0x2e
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f00a fac8 	bl	800b9c8 <memset>
	char* str2;
	switch(overVal)
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	2b03      	cmp	r3, #3
 800143c:	d816      	bhi.n	800146c <showNotifyOver+0x50>
 800143e:	a201      	add	r2, pc, #4	; (adr r2, 8001444 <showNotifyOver+0x28>)
 8001440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001444:	08001455 	.word	0x08001455
 8001448:	0800145b 	.word	0x0800145b
 800144c:	08001461 	.word	0x08001461
 8001450:	08001467 	.word	0x08001467
	{
	case 0:
		str2 = " HIT WALL ";
 8001454:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <showNotifyOver+0xf4>)
 8001456:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 8001458:	e008      	b.n	800146c <showNotifyOver+0x50>
	case 1:
		str2 = " TIME OUT ";
 800145a:	4b2e      	ldr	r3, [pc, #184]	; (8001514 <showNotifyOver+0xf8>)
 800145c:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 800145e:	e005      	b.n	800146c <showNotifyOver+0x50>
	case 2:
		str2 = " EAT BODY ";
 8001460:	4b2d      	ldr	r3, [pc, #180]	; (8001518 <showNotifyOver+0xfc>)
 8001462:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 8001464:	e002      	b.n	800146c <showNotifyOver+0x50>
	case 3:
		str2 = " OUT OF RANGE ";
 8001466:	4b2d      	ldr	r3, [pc, #180]	; (800151c <showNotifyOver+0x100>)
 8001468:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 800146a:	bf00      	nop
	}
	strcat(str1, str2);
 800146c:	f107 0308 	add.w	r3, r7, #8
 8001470:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001472:	4618      	mov	r0, r3
 8001474:	f00a fb50 	bl	800bb18 <strcat>
	lcd_StrCenter(0, overWallY[0] + 10, str1, WHITE, BLACK, 16, 0);
 8001478:	4b29      	ldr	r3, [pc, #164]	; (8001520 <showNotifyOver+0x104>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	b29b      	uxth	r3, r3
 800147e:	330a      	adds	r3, #10
 8001480:	b299      	uxth	r1, r3
 8001482:	f107 0208 	add.w	r2, r7, #8
 8001486:	2300      	movs	r3, #0
 8001488:	9302      	str	r3, [sp, #8]
 800148a:	2310      	movs	r3, #16
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	2300      	movs	r3, #0
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001496:	2000      	movs	r0, #0
 8001498:	f001 f8c0 	bl	800261c <lcd_StrCenter>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "NEW GAME", BLACK, GRAY, 16, 1);
 800149c:	4b21      	ldr	r3, [pc, #132]	; (8001524 <showNotifyOver+0x108>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	3308      	adds	r3, #8
 80014a4:	b298      	uxth	r0, r3
 80014a6:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <showNotifyOver+0x104>)
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <showNotifyOver+0x104>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	0fda      	lsrs	r2, r3, #31
 80014b2:	4413      	add	r3, r2
 80014b4:	105b      	asrs	r3, r3, #1
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	3b0f      	subs	r3, #15
 80014ba:	b299      	uxth	r1, r3
 80014bc:	2301      	movs	r3, #1
 80014be:	9302      	str	r3, [sp, #8]
 80014c0:	2310      	movs	r3, #16
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	f248 4330 	movw	r3, #33840	; 0x8430
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2300      	movs	r3, #0
 80014cc:	4a16      	ldr	r2, [pc, #88]	; (8001528 <showNotifyOver+0x10c>)
 80014ce:	f001 f841 	bl	8002554 <lcd_ShowStr>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "EXIT", BLACK, GRAY, 16, 1);
 80014d2:	4b14      	ldr	r3, [pc, #80]	; (8001524 <showNotifyOver+0x108>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	3308      	adds	r3, #8
 80014da:	b298      	uxth	r0, r3
 80014dc:	4b10      	ldr	r3, [pc, #64]	; (8001520 <showNotifyOver+0x104>)
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <showNotifyOver+0x104>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4413      	add	r3, r2
 80014e6:	0fda      	lsrs	r2, r3, #31
 80014e8:	4413      	add	r3, r2
 80014ea:	105b      	asrs	r3, r3, #1
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	3314      	adds	r3, #20
 80014f0:	b299      	uxth	r1, r3
 80014f2:	2301      	movs	r3, #1
 80014f4:	9302      	str	r3, [sp, #8]
 80014f6:	2310      	movs	r3, #16
 80014f8:	9301      	str	r3, [sp, #4]
 80014fa:	f248 4330 	movw	r3, #33840	; 0x8430
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	2300      	movs	r3, #0
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <showNotifyOver+0x110>)
 8001504:	f001 f826 	bl	8002554 <lcd_ShowStr>
}
 8001508:	bf00      	nop
 800150a:	3740      	adds	r7, #64	; 0x40
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	0800cf7c 	.word	0x0800cf7c
 8001514:	0800cf88 	.word	0x0800cf88
 8001518:	0800cf94 	.word	0x0800cf94
 800151c:	0800cfa0 	.word	0x0800cfa0
 8001520:	2000004c 	.word	0x2000004c
 8001524:	2000003c 	.word	0x2000003c
 8001528:	0800cfb0 	.word	0x0800cfb0
 800152c:	0800cfbc 	.word	0x0800cfbc

08001530 <eraseFull>:

void eraseFull()
{
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b083      	sub	sp, #12
 8001534:	af02      	add	r7, sp, #8
	lcd_Fill(overWallX[0] + wallSize, overWallY[0] + 25, overWallX[1] - wallSize, overWallY[3]-5, GRAY);
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <eraseFull+0x4c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	b29a      	uxth	r2, r3
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <eraseFull+0x50>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	b29b      	uxth	r3, r3
 8001542:	4413      	add	r3, r2
 8001544:	b298      	uxth	r0, r3
 8001546:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <eraseFull+0x54>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	3319      	adds	r3, #25
 800154e:	b299      	uxth	r1, r3
 8001550:	4b0a      	ldr	r3, [pc, #40]	; (800157c <eraseFull+0x4c>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	b29a      	uxth	r2, r3
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <eraseFull+0x50>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	b29b      	uxth	r3, r3
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	b29a      	uxth	r2, r3
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <eraseFull+0x54>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	b29b      	uxth	r3, r3
 8001566:	3b05      	subs	r3, #5
 8001568:	b29b      	uxth	r3, r3
 800156a:	f248 4430 	movw	r4, #33840	; 0x8430
 800156e:	9400      	str	r4, [sp, #0]
 8001570:	f000 fc3e 	bl	8001df0 <lcd_Fill>

}
 8001574:	bf00      	nop
 8001576:	3704      	adds	r7, #4
 8001578:	46bd      	mov	sp, r7
 800157a:	bd90      	pop	{r4, r7, pc}
 800157c:	2000003c 	.word	0x2000003c
 8001580:	20000038 	.word	0x20000038
 8001584:	2000004c 	.word	0x2000004c

08001588 <drawArrowOver>:

void drawArrowOver()
{
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	b087      	sub	sp, #28
 800158c:	af04      	add	r7, sp, #16
	int yValNewGame = (overWallY[2]+overWallY[0])/2 - 15 + 7;
 800158e:	4b87      	ldr	r3, [pc, #540]	; (80017ac <drawArrowOver+0x224>)
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	4b86      	ldr	r3, [pc, #536]	; (80017ac <drawArrowOver+0x224>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4413      	add	r3, r2
 8001598:	0fda      	lsrs	r2, r3, #31
 800159a:	4413      	add	r3, r2
 800159c:	105b      	asrs	r3, r3, #1
 800159e:	3b08      	subs	r3, #8
 80015a0:	607b      	str	r3, [r7, #4]
	int yValExit = (overWallY[2]+overWallY[0])/2 + 20 + 8;
 80015a2:	4b82      	ldr	r3, [pc, #520]	; (80017ac <drawArrowOver+0x224>)
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	4b81      	ldr	r3, [pc, #516]	; (80017ac <drawArrowOver+0x224>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	0fda      	lsrs	r2, r3, #31
 80015ae:	4413      	add	r3, r2
 80015b0:	105b      	asrs	r3, r3, #1
 80015b2:	331c      	adds	r3, #28
 80015b4:	603b      	str	r3, [r7, #0]

	switch(arrowOverMode)
 80015b6:	4b7e      	ldr	r3, [pc, #504]	; (80017b0 <drawArrowOver+0x228>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d002      	beq.n	80015c4 <drawArrowOver+0x3c>
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d078      	beq.n	80016b4 <drawArrowOver+0x12c>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
		break;
	}
}
 80015c2:	e0ef      	b.n	80017a4 <drawArrowOver+0x21c>
		eraseFull();
 80015c4:	f7ff ffb4 	bl	8001530 <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "NEW GAME", RED, GRAY, 16, 1);
 80015c8:	4b7a      	ldr	r3, [pc, #488]	; (80017b4 <drawArrowOver+0x22c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	3308      	adds	r3, #8
 80015d0:	b298      	uxth	r0, r3
 80015d2:	4b76      	ldr	r3, [pc, #472]	; (80017ac <drawArrowOver+0x224>)
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	4b75      	ldr	r3, [pc, #468]	; (80017ac <drawArrowOver+0x224>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4413      	add	r3, r2
 80015dc:	0fda      	lsrs	r2, r3, #31
 80015de:	4413      	add	r3, r2
 80015e0:	105b      	asrs	r3, r3, #1
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	3b0f      	subs	r3, #15
 80015e6:	b299      	uxth	r1, r3
 80015e8:	2301      	movs	r3, #1
 80015ea:	9302      	str	r3, [sp, #8]
 80015ec:	2310      	movs	r3, #16
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	f248 4330 	movw	r3, #33840	; 0x8430
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80015fa:	4a6f      	ldr	r2, [pc, #444]	; (80017b8 <drawArrowOver+0x230>)
 80015fc:	f000 ffaa 	bl	8002554 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "EXIT", BLACK, GRAY, 16, 1);
 8001600:	4b6c      	ldr	r3, [pc, #432]	; (80017b4 <drawArrowOver+0x22c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	b29b      	uxth	r3, r3
 8001606:	3308      	adds	r3, #8
 8001608:	b298      	uxth	r0, r3
 800160a:	4b68      	ldr	r3, [pc, #416]	; (80017ac <drawArrowOver+0x224>)
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	4b67      	ldr	r3, [pc, #412]	; (80017ac <drawArrowOver+0x224>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4413      	add	r3, r2
 8001614:	0fda      	lsrs	r2, r3, #31
 8001616:	4413      	add	r3, r2
 8001618:	105b      	asrs	r3, r3, #1
 800161a:	b29b      	uxth	r3, r3
 800161c:	3314      	adds	r3, #20
 800161e:	b299      	uxth	r1, r3
 8001620:	2301      	movs	r3, #1
 8001622:	9302      	str	r3, [sp, #8]
 8001624:	2310      	movs	r3, #16
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	f248 4330 	movw	r3, #33840	; 0x8430
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	2300      	movs	r3, #0
 8001630:	4a62      	ldr	r2, [pc, #392]	; (80017bc <drawArrowOver+0x234>)
 8001632:	f000 ff8f 	bl	8002554 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame - 5, BLACK);
 8001636:	4b5f      	ldr	r3, [pc, #380]	; (80017b4 <drawArrowOver+0x22c>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	b29b      	uxth	r3, r3
 800163c:	3b0f      	subs	r3, #15
 800163e:	b298      	uxth	r0, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	b299      	uxth	r1, r3
 8001644:	4b5b      	ldr	r3, [pc, #364]	; (80017b4 <drawArrowOver+0x22c>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	b29b      	uxth	r3, r3
 800164a:	3b0a      	subs	r3, #10
 800164c:	b29a      	uxth	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	b29b      	uxth	r3, r3
 8001652:	3b05      	subs	r3, #5
 8001654:	b29b      	uxth	r3, r3
 8001656:	2400      	movs	r4, #0
 8001658:	9400      	str	r4, [sp, #0]
 800165a:	f000 fc16 	bl	8001e8a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame + 5, BLACK);
 800165e:	4b55      	ldr	r3, [pc, #340]	; (80017b4 <drawArrowOver+0x22c>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	b29b      	uxth	r3, r3
 8001664:	3b0f      	subs	r3, #15
 8001666:	b298      	uxth	r0, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	b299      	uxth	r1, r3
 800166c:	4b51      	ldr	r3, [pc, #324]	; (80017b4 <drawArrowOver+0x22c>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	b29b      	uxth	r3, r3
 8001672:	3b0a      	subs	r3, #10
 8001674:	b29a      	uxth	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	b29b      	uxth	r3, r3
 800167a:	3305      	adds	r3, #5
 800167c:	b29b      	uxth	r3, r3
 800167e:	2400      	movs	r4, #0
 8001680:	9400      	str	r4, [sp, #0]
 8001682:	f000 fc02 	bl	8001e8a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValNewGame - 5, overWallX[1] - 10, yValNewGame + 5, BLACK);
 8001686:	4b4b      	ldr	r3, [pc, #300]	; (80017b4 <drawArrowOver+0x22c>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	b29b      	uxth	r3, r3
 800168c:	3b0a      	subs	r3, #10
 800168e:	b298      	uxth	r0, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	b29b      	uxth	r3, r3
 8001694:	3b05      	subs	r3, #5
 8001696:	b299      	uxth	r1, r3
 8001698:	4b46      	ldr	r3, [pc, #280]	; (80017b4 <drawArrowOver+0x22c>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	b29b      	uxth	r3, r3
 800169e:	3b0a      	subs	r3, #10
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	3305      	adds	r3, #5
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	2400      	movs	r4, #0
 80016ac:	9400      	str	r4, [sp, #0]
 80016ae:	f000 fbec 	bl	8001e8a <lcd_DrawLine>
		break;
 80016b2:	e077      	b.n	80017a4 <drawArrowOver+0x21c>
		eraseFull();
 80016b4:	f7ff ff3c 	bl	8001530 <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 15, "NEW GAME", BLACK, GRAY, 16, 1);
 80016b8:	4b3e      	ldr	r3, [pc, #248]	; (80017b4 <drawArrowOver+0x22c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	3308      	adds	r3, #8
 80016c0:	b298      	uxth	r0, r3
 80016c2:	4b3a      	ldr	r3, [pc, #232]	; (80017ac <drawArrowOver+0x224>)
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	4b39      	ldr	r3, [pc, #228]	; (80017ac <drawArrowOver+0x224>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	0fda      	lsrs	r2, r3, #31
 80016ce:	4413      	add	r3, r2
 80016d0:	105b      	asrs	r3, r3, #1
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	3b0f      	subs	r3, #15
 80016d6:	b299      	uxth	r1, r3
 80016d8:	2301      	movs	r3, #1
 80016da:	9302      	str	r3, [sp, #8]
 80016dc:	2310      	movs	r3, #16
 80016de:	9301      	str	r3, [sp, #4]
 80016e0:	f248 4330 	movw	r3, #33840	; 0x8430
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2300      	movs	r3, #0
 80016e8:	4a33      	ldr	r2, [pc, #204]	; (80017b8 <drawArrowOver+0x230>)
 80016ea:	f000 ff33 	bl	8002554 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 20, "EXIT", RED, GRAY, 16, 1);
 80016ee:	4b31      	ldr	r3, [pc, #196]	; (80017b4 <drawArrowOver+0x22c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3308      	adds	r3, #8
 80016f6:	b298      	uxth	r0, r3
 80016f8:	4b2c      	ldr	r3, [pc, #176]	; (80017ac <drawArrowOver+0x224>)
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <drawArrowOver+0x224>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4413      	add	r3, r2
 8001702:	0fda      	lsrs	r2, r3, #31
 8001704:	4413      	add	r3, r2
 8001706:	105b      	asrs	r3, r3, #1
 8001708:	b29b      	uxth	r3, r3
 800170a:	3314      	adds	r3, #20
 800170c:	b299      	uxth	r1, r3
 800170e:	2301      	movs	r3, #1
 8001710:	9302      	str	r3, [sp, #8]
 8001712:	2310      	movs	r3, #16
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	f248 4330 	movw	r3, #33840	; 0x8430
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001720:	4a26      	ldr	r2, [pc, #152]	; (80017bc <drawArrowOver+0x234>)
 8001722:	f000 ff17 	bl	8002554 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <drawArrowOver+0x22c>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	b29b      	uxth	r3, r3
 800172c:	3b0f      	subs	r3, #15
 800172e:	b298      	uxth	r0, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	b299      	uxth	r1, r3
 8001734:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <drawArrowOver+0x22c>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	b29b      	uxth	r3, r3
 800173a:	3b0a      	subs	r3, #10
 800173c:	b29a      	uxth	r2, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	b29b      	uxth	r3, r3
 8001742:	3b05      	subs	r3, #5
 8001744:	b29b      	uxth	r3, r3
 8001746:	2400      	movs	r4, #0
 8001748:	9400      	str	r4, [sp, #0]
 800174a:	f000 fb9e 	bl	8001e8a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
 800174e:	4b19      	ldr	r3, [pc, #100]	; (80017b4 <drawArrowOver+0x22c>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	b29b      	uxth	r3, r3
 8001754:	3b0f      	subs	r3, #15
 8001756:	b298      	uxth	r0, r3
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b299      	uxth	r1, r3
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <drawArrowOver+0x22c>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	b29b      	uxth	r3, r3
 8001762:	3b0a      	subs	r3, #10
 8001764:	b29a      	uxth	r2, r3
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	b29b      	uxth	r3, r3
 800176a:	3305      	adds	r3, #5
 800176c:	b29b      	uxth	r3, r3
 800176e:	2400      	movs	r4, #0
 8001770:	9400      	str	r4, [sp, #0]
 8001772:	f000 fb8a 	bl	8001e8a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
 8001776:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <drawArrowOver+0x22c>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	b29b      	uxth	r3, r3
 800177c:	3b0a      	subs	r3, #10
 800177e:	b298      	uxth	r0, r3
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	b29b      	uxth	r3, r3
 8001784:	3b05      	subs	r3, #5
 8001786:	b299      	uxth	r1, r3
 8001788:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <drawArrowOver+0x22c>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	b29b      	uxth	r3, r3
 800178e:	3b0a      	subs	r3, #10
 8001790:	b29a      	uxth	r2, r3
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	b29b      	uxth	r3, r3
 8001796:	3305      	adds	r3, #5
 8001798:	b29b      	uxth	r3, r3
 800179a:	2400      	movs	r4, #0
 800179c:	9400      	str	r4, [sp, #0]
 800179e:	f000 fb74 	bl	8001e8a <lcd_DrawLine>
		break;
 80017a2:	bf00      	nop
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd90      	pop	{r4, r7, pc}
 80017ac:	2000004c 	.word	0x2000004c
 80017b0:	20000260 	.word	0x20000260
 80017b4:	2000003c 	.word	0x2000003c
 80017b8:	0800cfb0 	.word	0x0800cfb0
 80017bc:	0800cfbc 	.word	0x0800cfbc

080017c0 <gameOverUI>:

void gameOverUI(uint16_t overVal)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]
	showWallnotify();
 80017ca:	f7ff fdad 	bl	8001328 <showWallnotify>
	showNotifyOver(overVal);
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fe23 	bl	800141c <showNotifyOver>
	drawArrowOver();
 80017d6:	f7ff fed7 	bl	8001588 <drawArrowOver>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <pickOver>:

void pickOver(uint16_t overVal)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	80fb      	strh	r3, [r7, #6]
	if(button_count[3] == 1)
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <pickOver+0x78>)
 80017f0:	88db      	ldrh	r3, [r3, #6]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d10c      	bne.n	8001810 <pickOver+0x2c>
	{
		flagOver = 1;
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <pickOver+0x7c>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	601a      	str	r2, [r3, #0]
		switch(arrowOverMode)
 80017fc:	4b19      	ldr	r3, [pc, #100]	; (8001864 <pickOver+0x80>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d025      	beq.n	8001850 <pickOver+0x6c>
 8001804:	2b01      	cmp	r3, #1
 8001806:	d104      	bne.n	8001812 <pickOver+0x2e>
		case NEWGAME:
			// Do nothing
			return;
			break;
		case EXIT:
			arrowOverMode = NEWGAME;
 8001808:	4b16      	ldr	r3, [pc, #88]	; (8001864 <pickOver+0x80>)
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
			break;
 800180e:	e000      	b.n	8001812 <pickOver+0x2e>
		}
	}
 8001810:	bf00      	nop
	if(button_count[7] == 1)
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <pickOver+0x78>)
 8001814:	89db      	ldrh	r3, [r3, #14]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d10d      	bne.n	8001836 <pickOver+0x52>
	{
		flagOver = 1;
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <pickOver+0x7c>)
 800181c:	2201      	movs	r2, #1
 800181e:	601a      	str	r2, [r3, #0]
		switch(arrowOverMode)
 8001820:	4b10      	ldr	r3, [pc, #64]	; (8001864 <pickOver+0x80>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d002      	beq.n	800182e <pickOver+0x4a>
 8001828:	2b01      	cmp	r3, #1
 800182a:	d013      	beq.n	8001854 <pickOver+0x70>
 800182c:	e004      	b.n	8001838 <pickOver+0x54>
		{
		case NEWGAME:
			arrowOverMode = EXIT;
 800182e:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <pickOver+0x80>)
 8001830:	2201      	movs	r2, #1
 8001832:	601a      	str	r2, [r3, #0]
			break;
 8001834:	e000      	b.n	8001838 <pickOver+0x54>
		case EXIT:
			// Do nothing
			return;
			break;
		}
	}
 8001836:	bf00      	nop
	if(flagOver == 1)
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <pickOver+0x7c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d10a      	bne.n	8001856 <pickOver+0x72>
	{
		gameOverUI(overVal);
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ffbc 	bl	80017c0 <gameOverUI>
		flagOver = 0;
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <pickOver+0x7c>)
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	e002      	b.n	8001856 <pickOver+0x72>
			return;
 8001850:	bf00      	nop
 8001852:	e000      	b.n	8001856 <pickOver+0x72>
			return;
 8001854:	bf00      	nop
	}
}
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200001d4 	.word	0x200001d4
 8001860:	20000274 	.word	0x20000274
 8001864:	20000260 	.word	0x20000260

08001868 <initOverMode>:

void initOverMode(uint16_t overVal)
{
 8001868:	b5b0      	push	{r4, r5, r7, lr}
 800186a:	b0a6      	sub	sp, #152	; 0x98
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	80fb      	strh	r3, [r7, #6]
	TOTALSCORE = TOTALSCORE + SCORE;
 8001872:	4b6b      	ldr	r3, [pc, #428]	; (8001a20 <initOverMode+0x1b8>)
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	4b6a      	ldr	r3, [pc, #424]	; (8001a24 <initOverMode+0x1bc>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4413      	add	r3, r2
 800187e:	4a69      	ldr	r2, [pc, #420]	; (8001a24 <initOverMode+0x1bc>)
 8001880:	6013      	str	r3, [r2, #0]
	TOTALTIMEPLAY = TOTALTIMEPLAY + TOTALTIME;
 8001882:	4b69      	ldr	r3, [pc, #420]	; (8001a28 <initOverMode+0x1c0>)
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	4b68      	ldr	r3, [pc, #416]	; (8001a2c <initOverMode+0x1c4>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4413      	add	r3, r2
 800188e:	4a67      	ldr	r2, [pc, #412]	; (8001a2c <initOverMode+0x1c4>)
 8001890:	6013      	str	r3, [r2, #0]
	TOTALPLAY = TOTALPLAY + 1;
 8001892:	4b67      	ldr	r3, [pc, #412]	; (8001a30 <initOverMode+0x1c8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	3301      	adds	r3, #1
 8001898:	4a65      	ldr	r2, [pc, #404]	; (8001a30 <initOverMode+0x1c8>)
 800189a:	6013      	str	r3, [r2, #0]

	char str1[70] = "GAME_FINISH#";
 800189c:	4b65      	ldr	r3, [pc, #404]	; (8001a34 <initOverMode+0x1cc>)
 800189e:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80018a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018a4:	c407      	stmia	r4!, {r0, r1, r2}
 80018a6:	7023      	strb	r3, [r4, #0]
 80018a8:	f107 034d 	add.w	r3, r7, #77	; 0x4d
 80018ac:	2239      	movs	r2, #57	; 0x39
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f00a f889 	bl	800b9c8 <memset>
	char *str2 = convert2str(ID);
 80018b6:	4b60      	ldr	r3, [pc, #384]	; (8001a38 <initOverMode+0x1d0>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f001 f988 	bl	8002bd0 <convert2str>
 80018c0:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	strcat(str1, str2);
 80018c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018c8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80018cc:	4618      	mov	r0, r3
 80018ce:	f00a f923 	bl	800bb18 <strcat>
	char str3[50] = "has finished game, performance value: ";
 80018d2:	4b5a      	ldr	r3, [pc, #360]	; (8001a3c <initOverMode+0x1d4>)
 80018d4:	f107 040c 	add.w	r4, r7, #12
 80018d8:	461d      	mov	r5, r3
 80018da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80018e6:	6020      	str	r0, [r4, #0]
 80018e8:	3404      	adds	r4, #4
 80018ea:	8021      	strh	r1, [r4, #0]
 80018ec:	3402      	adds	r4, #2
 80018ee:	0c0b      	lsrs	r3, r1, #16
 80018f0:	7023      	strb	r3, [r4, #0]
 80018f2:	f107 0333 	add.w	r3, r7, #51	; 0x33
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	f8c3 2007 	str.w	r2, [r3, #7]
	char *str4 = convert2str(SCORE);
 8001900:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <initOverMode+0x1b8>)
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f001 f963 	bl	8002bd0 <convert2str>
 800190a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	strcat(str3, str4);
 800190e:	f107 030c 	add.w	r3, r7, #12
 8001912:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001916:	4618      	mov	r0, r3
 8001918:	f00a f8fe 	bl	800bb18 <strcat>
	strcat(str1, str3);
 800191c:	f107 020c 	add.w	r2, r7, #12
 8001920:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001924:	4611      	mov	r1, r2
 8001926:	4618      	mov	r0, r3
 8001928:	f00a f8f6 	bl	800bb18 <strcat>
	strcat(str1, "#");
 800192c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fc4d 	bl	80001d0 <strlen>
 8001936:	4603      	mov	r3, r0
 8001938:	461a      	mov	r2, r3
 800193a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800193e:	4413      	add	r3, r2
 8001940:	493f      	ldr	r1, [pc, #252]	; (8001a40 <initOverMode+0x1d8>)
 8001942:	461a      	mov	r2, r3
 8001944:	460b      	mov	r3, r1
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	8013      	strh	r3, [r2, #0]

	char *str5 = convert2str(TOTALSCORE/TOTALPLAY);
 800194a:	4b36      	ldr	r3, [pc, #216]	; (8001a24 <initOverMode+0x1bc>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	4b38      	ldr	r3, [pc, #224]	; (8001a30 <initOverMode+0x1c8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	fbb2 f3f3 	udiv	r3, r2, r3
 8001956:	b29b      	uxth	r3, r3
 8001958:	4618      	mov	r0, r3
 800195a:	f001 f939 	bl	8002bd0 <convert2str>
 800195e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	strcat(str1, str5);
 8001962:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001966:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800196a:	4618      	mov	r0, r3
 800196c:	f00a f8d4 	bl	800bb18 <strcat>
	strcat(str1, "#");
 8001970:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fc2b 	bl	80001d0 <strlen>
 800197a:	4603      	mov	r3, r0
 800197c:	461a      	mov	r2, r3
 800197e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001982:	4413      	add	r3, r2
 8001984:	492e      	ldr	r1, [pc, #184]	; (8001a40 <initOverMode+0x1d8>)
 8001986:	461a      	mov	r2, r3
 8001988:	460b      	mov	r3, r1
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	8013      	strh	r3, [r2, #0]

	char *str6 = convert2str(TOTALTIMEPLAY/TOTALPLAY);
 800198e:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <initOverMode+0x1c4>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <initOverMode+0x1c8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	fbb2 f3f3 	udiv	r3, r2, r3
 800199a:	b29b      	uxth	r3, r3
 800199c:	4618      	mov	r0, r3
 800199e:	f001 f917 	bl	8002bd0 <convert2str>
 80019a2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	strcat(str1, str6);
 80019a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019aa:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80019ae:	4618      	mov	r0, r3
 80019b0:	f00a f8b2 	bl	800bb18 <strcat>
	strcat(str1, "#");
 80019b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fc09 	bl	80001d0 <strlen>
 80019be:	4603      	mov	r3, r0
 80019c0:	461a      	mov	r2, r3
 80019c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019c6:	4413      	add	r3, r2
 80019c8:	491d      	ldr	r1, [pc, #116]	; (8001a40 <initOverMode+0x1d8>)
 80019ca:	461a      	mov	r2, r3
 80019cc:	460b      	mov	r3, r1
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	8013      	strh	r3, [r2, #0]
	uart_EspSendBytes(str1, strlen(str1));
 80019d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fbfa 	bl	80001d0 <strlen>
 80019dc:	4603      	mov	r3, r0
 80019de:	b29a      	uxth	r2, r3
 80019e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019e4:	4611      	mov	r1, r2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f004 fed0 	bl	800678c <uart_EspSendBytes>

	statusGame = OVERMODE;
 80019ec:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <initOverMode+0x1dc>)
 80019ee:	2207      	movs	r2, #7
 80019f0:	601a      	str	r2, [r3, #0]
	SCORE = 0;
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <initOverMode+0x1b8>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	801a      	strh	r2, [r3, #0]
	TOTALTIME = 0;
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <initOverMode+0x1c0>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	801a      	strh	r2, [r3, #0]
	arrowOverMode = NEWGAME;
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <initOverMode+0x1e0>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
	flagOver = 1;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <initOverMode+0x1e4>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]
	pickOver(overVal);
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fee9 	bl	80017e4 <pickOver>
	OVERMESSAGE = overVal;
 8001a12:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <initOverMode+0x1e8>)
 8001a14:	88fb      	ldrh	r3, [r7, #6]
 8001a16:	8013      	strh	r3, [r2, #0]

}
 8001a18:	bf00      	nop
 8001a1a:	3798      	adds	r7, #152	; 0x98
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a20:	2000025a 	.word	0x2000025a
 8001a24:	20000288 	.word	0x20000288
 8001a28:	20000284 	.word	0x20000284
 8001a2c:	2000028c 	.word	0x2000028c
 8001a30:	20000290 	.word	0x20000290
 8001a34:	0800cfc8 	.word	0x0800cfc8
 8001a38:	20000258 	.word	0x20000258
 8001a3c:	0800d010 	.word	0x0800d010
 8001a40:	0800cfc4 	.word	0x0800cfc4
 8001a44:	2000026c 	.word	0x2000026c
 8001a48:	20000260 	.word	0x20000260
 8001a4c:	20000274 	.word	0x20000274
 8001a50:	20000282 	.word	0x20000282

08001a54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08e      	sub	sp, #56	; 0x38
 8001a58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
 8001a68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
 8001a6e:	4b81      	ldr	r3, [pc, #516]	; (8001c74 <MX_GPIO_Init+0x220>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a80      	ldr	r2, [pc, #512]	; (8001c74 <MX_GPIO_Init+0x220>)
 8001a74:	f043 0310 	orr.w	r3, r3, #16
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b7e      	ldr	r3, [pc, #504]	; (8001c74 <MX_GPIO_Init+0x220>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0310 	and.w	r3, r3, #16
 8001a82:	623b      	str	r3, [r7, #32]
 8001a84:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	4b7a      	ldr	r3, [pc, #488]	; (8001c74 <MX_GPIO_Init+0x220>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a79      	ldr	r2, [pc, #484]	; (8001c74 <MX_GPIO_Init+0x220>)
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b77      	ldr	r3, [pc, #476]	; (8001c74 <MX_GPIO_Init+0x220>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	61fb      	str	r3, [r7, #28]
 8001aa0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
 8001aa6:	4b73      	ldr	r3, [pc, #460]	; (8001c74 <MX_GPIO_Init+0x220>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a72      	ldr	r2, [pc, #456]	; (8001c74 <MX_GPIO_Init+0x220>)
 8001aac:	f043 0320 	orr.w	r3, r3, #32
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b70      	ldr	r3, [pc, #448]	; (8001c74 <MX_GPIO_Init+0x220>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0320 	and.w	r3, r3, #32
 8001aba:	61bb      	str	r3, [r7, #24]
 8001abc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	4b6c      	ldr	r3, [pc, #432]	; (8001c74 <MX_GPIO_Init+0x220>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a6b      	ldr	r2, [pc, #428]	; (8001c74 <MX_GPIO_Init+0x220>)
 8001ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b69      	ldr	r3, [pc, #420]	; (8001c74 <MX_GPIO_Init+0x220>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	4b65      	ldr	r3, [pc, #404]	; (8001c74 <MX_GPIO_Init+0x220>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a64      	ldr	r2, [pc, #400]	; (8001c74 <MX_GPIO_Init+0x220>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b62      	ldr	r3, [pc, #392]	; (8001c74 <MX_GPIO_Init+0x220>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b5e      	ldr	r3, [pc, #376]	; (8001c74 <MX_GPIO_Init+0x220>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a5d      	ldr	r2, [pc, #372]	; (8001c74 <MX_GPIO_Init+0x220>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b5b      	ldr	r3, [pc, #364]	; (8001c74 <MX_GPIO_Init+0x220>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	4b57      	ldr	r3, [pc, #348]	; (8001c74 <MX_GPIO_Init+0x220>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a56      	ldr	r2, [pc, #344]	; (8001c74 <MX_GPIO_Init+0x220>)
 8001b1c:	f043 0308 	orr.w	r3, r3, #8
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b54      	ldr	r3, [pc, #336]	; (8001c74 <MX_GPIO_Init+0x220>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
 8001b32:	4b50      	ldr	r3, [pc, #320]	; (8001c74 <MX_GPIO_Init+0x220>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a4f      	ldr	r2, [pc, #316]	; (8001c74 <MX_GPIO_Init+0x220>)
 8001b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b4d      	ldr	r3, [pc, #308]	; (8001c74 <MX_GPIO_Init+0x220>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2170      	movs	r1, #112	; 0x70
 8001b4e:	484a      	ldr	r0, [pc, #296]	; (8001c78 <MX_GPIO_Init+0x224>)
 8001b50:	f006 fbd0 	bl	80082f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001b54:	2200      	movs	r2, #0
 8001b56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b5a:	4848      	ldr	r0, [pc, #288]	; (8001c7c <MX_GPIO_Init+0x228>)
 8001b5c:	f006 fbca 	bl	80082f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, ESP12_BUSY_Pin|ESP12_PWR_Pin, GPIO_PIN_RESET);
 8001b60:	2200      	movs	r2, #0
 8001b62:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001b66:	4846      	ldr	r0, [pc, #280]	; (8001c80 <MX_GPIO_Init+0x22c>)
 8001b68:	f006 fbc4 	bl	80082f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2140      	movs	r1, #64	; 0x40
 8001b70:	4844      	ldr	r0, [pc, #272]	; (8001c84 <MX_GPIO_Init+0x230>)
 8001b72:	f006 fbbf 	bl	80082f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001b76:	2200      	movs	r2, #0
 8001b78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b7c:	4842      	ldr	r0, [pc, #264]	; (8001c88 <MX_GPIO_Init+0x234>)
 8001b7e:	f006 fbb9 	bl	80082f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2108      	movs	r1, #8
 8001b86:	4841      	ldr	r0, [pc, #260]	; (8001c8c <MX_GPIO_Init+0x238>)
 8001b88:	f006 fbb4 	bl	80082f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001b8c:	2370      	movs	r3, #112	; 0x70
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4835      	ldr	r0, [pc, #212]	; (8001c78 <MX_GPIO_Init+0x224>)
 8001ba4:	f006 fa0a 	bl	8007fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001ba8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	482e      	ldr	r0, [pc, #184]	; (8001c7c <MX_GPIO_Init+0x228>)
 8001bc2:	f006 f9fb 	bl	8007fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin|ESP12_PWR_Pin;
 8001bc6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4828      	ldr	r0, [pc, #160]	; (8001c80 <MX_GPIO_Init+0x22c>)
 8001be0:	f006 f9ec 	bl	8007fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001be4:	23c0      	movs	r3, #192	; 0xc0
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be8:	2300      	movs	r3, #0
 8001bea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4824      	ldr	r0, [pc, #144]	; (8001c88 <MX_GPIO_Init+0x234>)
 8001bf8:	f006 f9e0 	bl	8007fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001bfc:	2330      	movs	r3, #48	; 0x30
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c00:	2300      	movs	r3, #0
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	481b      	ldr	r0, [pc, #108]	; (8001c7c <MX_GPIO_Init+0x228>)
 8001c10:	f006 f9d4 	bl	8007fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001c14:	2340      	movs	r3, #64	; 0x40
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4816      	ldr	r0, [pc, #88]	; (8001c84 <MX_GPIO_Init+0x230>)
 8001c2c:	f006 f9c6 	bl	8007fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001c30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c36:	2301      	movs	r3, #1
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c46:	4619      	mov	r1, r3
 8001c48:	480f      	ldr	r0, [pc, #60]	; (8001c88 <MX_GPIO_Init+0x234>)
 8001c4a:	f006 f9b7 	bl	8007fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001c4e:	2308      	movs	r3, #8
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c52:	2301      	movs	r3, #1
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c62:	4619      	mov	r1, r3
 8001c64:	4809      	ldr	r0, [pc, #36]	; (8001c8c <MX_GPIO_Init+0x238>)
 8001c66:	f006 f9a9 	bl	8007fbc <HAL_GPIO_Init>

}
 8001c6a:	bf00      	nop
 8001c6c:	3738      	adds	r7, #56	; 0x38
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40020800 	.word	0x40020800
 8001c80:	40021400 	.word	0x40021400
 8001c84:	40021800 	.word	0x40021800
 8001c88:	40020000 	.word	0x40020000
 8001c8c:	40020c00 	.word	0x40020c00

08001c90 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001c9a:	4a04      	ldr	r2, [pc, #16]	; (8001cac <LCD_WR_REG+0x1c>)
 8001c9c:	88fb      	ldrh	r3, [r7, #6]
 8001c9e:	8013      	strh	r3, [r2, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	600ffffe 	.word	0x600ffffe

08001cb0 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001cba:	4a04      	ldr	r2, [pc, #16]	; (8001ccc <LCD_WR_DATA+0x1c>)
 8001cbc:	88fb      	ldrh	r3, [r7, #6]
 8001cbe:	8053      	strh	r3, [r2, #2]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	600ffffe 	.word	0x600ffffe

08001cd0 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <LCD_RD_DATA+0x20>)
 8001cd8:	885b      	ldrh	r3, [r3, #2]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	b29b      	uxth	r3, r3
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	600ffffe 	.word	0x600ffffe

08001cf4 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	4608      	mov	r0, r1
 8001cfe:	4611      	mov	r1, r2
 8001d00:	461a      	mov	r2, r3
 8001d02:	4623      	mov	r3, r4
 8001d04:	80fb      	strh	r3, [r7, #6]
 8001d06:	4603      	mov	r3, r0
 8001d08:	80bb      	strh	r3, [r7, #4]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	807b      	strh	r3, [r7, #2]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001d12:	202a      	movs	r0, #42	; 0x2a
 8001d14:	f7ff ffbc 	bl	8001c90 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001d18:	88fb      	ldrh	r3, [r7, #6]
 8001d1a:	0a1b      	lsrs	r3, r3, #8
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ffc6 	bl	8001cb0 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff ffc0 	bl	8001cb0 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001d30:	887b      	ldrh	r3, [r7, #2]
 8001d32:	0a1b      	lsrs	r3, r3, #8
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ffba 	bl	8001cb0 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001d3c:	887b      	ldrh	r3, [r7, #2]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff ffb4 	bl	8001cb0 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001d48:	202b      	movs	r0, #43	; 0x2b
 8001d4a:	f7ff ffa1 	bl	8001c90 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001d4e:	88bb      	ldrh	r3, [r7, #4]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ffab 	bl	8001cb0 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001d5a:	88bb      	ldrh	r3, [r7, #4]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ffa5 	bl	8001cb0 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001d66:	883b      	ldrh	r3, [r7, #0]
 8001d68:	0a1b      	lsrs	r3, r3, #8
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff9f 	bl	8001cb0 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001d72:	883b      	ldrh	r3, [r7, #0]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff99 	bl	8001cb0 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001d7e:	202c      	movs	r0, #44	; 0x2c
 8001d80:	f7ff ff86 	bl	8001c90 <LCD_WR_REG>
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd90      	pop	{r4, r7, pc}

08001d8c <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001d96:	4b15      	ldr	r3, [pc, #84]	; (8001dec <lcd_Clear+0x60>)
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	4b13      	ldr	r3, [pc, #76]	; (8001dec <lcd_Clear+0x60>)
 8001da0:	885b      	ldrh	r3, [r3, #2]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	2100      	movs	r1, #0
 8001da8:	2000      	movs	r0, #0
 8001daa:	f7ff ffa3 	bl	8001cf4 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	81fb      	strh	r3, [r7, #14]
 8001db2:	e011      	b.n	8001dd8 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001db4:	2300      	movs	r3, #0
 8001db6:	81bb      	strh	r3, [r7, #12]
 8001db8:	e006      	b.n	8001dc8 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff77 	bl	8001cb0 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001dc2:	89bb      	ldrh	r3, [r7, #12]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	81bb      	strh	r3, [r7, #12]
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <lcd_Clear+0x60>)
 8001dca:	885b      	ldrh	r3, [r3, #2]
 8001dcc:	89ba      	ldrh	r2, [r7, #12]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d3f3      	bcc.n	8001dba <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8001dd2:	89fb      	ldrh	r3, [r7, #14]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	81fb      	strh	r3, [r7, #14]
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <lcd_Clear+0x60>)
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	89fa      	ldrh	r2, [r7, #14]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d3e8      	bcc.n	8001db4 <lcd_Clear+0x28>
		}
	}
}
 8001de2:	bf00      	nop
 8001de4:	bf00      	nop
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000294 	.word	0x20000294

08001df0 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4604      	mov	r4, r0
 8001df8:	4608      	mov	r0, r1
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4623      	mov	r3, r4
 8001e00:	80fb      	strh	r3, [r7, #6]
 8001e02:	4603      	mov	r3, r0
 8001e04:	80bb      	strh	r3, [r7, #4]
 8001e06:	460b      	mov	r3, r1
 8001e08:	807b      	strh	r3, [r7, #2]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8001e0e:	887b      	ldrh	r3, [r7, #2]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	883b      	ldrh	r3, [r7, #0]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	88b9      	ldrh	r1, [r7, #4]
 8001e1c:	88f8      	ldrh	r0, [r7, #6]
 8001e1e:	f7ff ff69 	bl	8001cf4 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8001e22:	88bb      	ldrh	r3, [r7, #4]
 8001e24:	81fb      	strh	r3, [r7, #14]
 8001e26:	e010      	b.n	8001e4a <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001e28:	88fb      	ldrh	r3, [r7, #6]
 8001e2a:	81bb      	strh	r3, [r7, #12]
 8001e2c:	e006      	b.n	8001e3c <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8001e2e:	8c3b      	ldrh	r3, [r7, #32]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff3d 	bl	8001cb0 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8001e36:	89bb      	ldrh	r3, [r7, #12]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	81bb      	strh	r3, [r7, #12]
 8001e3c:	89ba      	ldrh	r2, [r7, #12]
 8001e3e:	887b      	ldrh	r3, [r7, #2]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d3f4      	bcc.n	8001e2e <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8001e44:	89fb      	ldrh	r3, [r7, #14]
 8001e46:	3301      	adds	r3, #1
 8001e48:	81fb      	strh	r3, [r7, #14]
 8001e4a:	89fa      	ldrh	r2, [r7, #14]
 8001e4c:	883b      	ldrh	r3, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d3ea      	bcc.n	8001e28 <lcd_Fill+0x38>
		}
	}
}
 8001e52:	bf00      	nop
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd90      	pop	{r4, r7, pc}

08001e5c <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	80fb      	strh	r3, [r7, #6]
 8001e66:	460b      	mov	r3, r1
 8001e68:	80bb      	strh	r3, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001e6e:	88bb      	ldrh	r3, [r7, #4]
 8001e70:	88fa      	ldrh	r2, [r7, #6]
 8001e72:	88b9      	ldrh	r1, [r7, #4]
 8001e74:	88f8      	ldrh	r0, [r7, #6]
 8001e76:	f7ff ff3d 	bl	8001cf4 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001e7a:	887b      	ldrh	r3, [r7, #2]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff17 	bl	8001cb0 <LCD_WR_DATA>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8001e8a:	b590      	push	{r4, r7, lr}
 8001e8c:	b08d      	sub	sp, #52	; 0x34
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4604      	mov	r4, r0
 8001e92:	4608      	mov	r0, r1
 8001e94:	4611      	mov	r1, r2
 8001e96:	461a      	mov	r2, r3
 8001e98:	4623      	mov	r3, r4
 8001e9a:	80fb      	strh	r3, [r7, #6]
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	80bb      	strh	r3, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	807b      	strh	r3, [r7, #2]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eac:	2300      	movs	r3, #0
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8001eb0:	887a      	ldrh	r2, [r7, #2]
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001eb8:	883a      	ldrh	r2, [r7, #0]
 8001eba:	88bb      	ldrh	r3, [r7, #4]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001ec0:	88fb      	ldrh	r3, [r7, #6]
 8001ec2:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8001ec4:	88bb      	ldrh	r3, [r7, #4]
 8001ec6:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	dd02      	ble.n	8001ed4 <lcd_DrawLine+0x4a>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	e00b      	b.n	8001eec <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d102      	bne.n	8001ee0 <lcd_DrawLine+0x56>
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	e005      	b.n	8001eec <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	425b      	negs	r3, r3
 8001eea:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	dd02      	ble.n	8001ef8 <lcd_DrawLine+0x6e>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	e00b      	b.n	8001f10 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d102      	bne.n	8001f04 <lcd_DrawLine+0x7a>
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	e005      	b.n	8001f10 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8001f04:	f04f 33ff 	mov.w	r3, #4294967295
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	425b      	negs	r3, r3
 8001f0e:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001f10:	6a3a      	ldr	r2, [r7, #32]
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	dd02      	ble.n	8001f1e <lcd_DrawLine+0x94>
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	61bb      	str	r3, [r7, #24]
 8001f1c:	e001      	b.n	8001f22 <lcd_DrawLine+0x98>
	else distance=delta_y;
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001f26:	e02b      	b.n	8001f80 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	b291      	uxth	r1, r2
 8001f30:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff ff91 	bl	8001e5c <lcd_DrawPoint>
		xerr+=delta_x;
 8001f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	4413      	add	r3, r2
 8001f40:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8001f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	4413      	add	r3, r2
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8001f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	dd07      	ble.n	8001f62 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8001f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	4413      	add	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8001f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	dd07      	ble.n	8001f7a <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8001f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4413      	add	r3, r2
 8001f78:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8001f7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001f80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	dacf      	bge.n	8001f28 <lcd_DrawLine+0x9e>
		}
	}
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3734      	adds	r7, #52	; 0x34
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd90      	pop	{r4, r7, pc}

08001f92 <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 8001f92:	b590      	push	{r4, r7, lr}
 8001f94:	b085      	sub	sp, #20
 8001f96:	af02      	add	r7, sp, #8
 8001f98:	4604      	mov	r4, r0
 8001f9a:	4608      	mov	r0, r1
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	4623      	mov	r3, r4
 8001fa2:	80fb      	strh	r3, [r7, #6]
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	80bb      	strh	r3, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	807b      	strh	r3, [r7, #2]
 8001fac:	4613      	mov	r3, r2
 8001fae:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8001fb0:	88bc      	ldrh	r4, [r7, #4]
 8001fb2:	887a      	ldrh	r2, [r7, #2]
 8001fb4:	88b9      	ldrh	r1, [r7, #4]
 8001fb6:	88f8      	ldrh	r0, [r7, #6]
 8001fb8:	8b3b      	ldrh	r3, [r7, #24]
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	4623      	mov	r3, r4
 8001fbe:	f7ff ff64 	bl	8001e8a <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8001fc2:	883c      	ldrh	r4, [r7, #0]
 8001fc4:	88fa      	ldrh	r2, [r7, #6]
 8001fc6:	88b9      	ldrh	r1, [r7, #4]
 8001fc8:	88f8      	ldrh	r0, [r7, #6]
 8001fca:	8b3b      	ldrh	r3, [r7, #24]
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	4623      	mov	r3, r4
 8001fd0:	f7ff ff5b 	bl	8001e8a <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8001fd4:	883c      	ldrh	r4, [r7, #0]
 8001fd6:	887a      	ldrh	r2, [r7, #2]
 8001fd8:	8839      	ldrh	r1, [r7, #0]
 8001fda:	88f8      	ldrh	r0, [r7, #6]
 8001fdc:	8b3b      	ldrh	r3, [r7, #24]
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	4623      	mov	r3, r4
 8001fe2:	f7ff ff52 	bl	8001e8a <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8001fe6:	883c      	ldrh	r4, [r7, #0]
 8001fe8:	887a      	ldrh	r2, [r7, #2]
 8001fea:	88b9      	ldrh	r1, [r7, #4]
 8001fec:	8878      	ldrh	r0, [r7, #2]
 8001fee:	8b3b      	ldrh	r3, [r7, #24]
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	4623      	mov	r3, r4
 8001ff4:	f7ff ff49 	bl	8001e8a <lcd_DrawLine>
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd90      	pop	{r4, r7, pc}

08002000 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
 8002006:	4604      	mov	r4, r0
 8002008:	4608      	mov	r0, r1
 800200a:	4611      	mov	r1, r2
 800200c:	461a      	mov	r2, r3
 800200e:	4623      	mov	r3, r4
 8002010:	80fb      	strh	r3, [r7, #6]
 8002012:	4603      	mov	r3, r0
 8002014:	80bb      	strh	r3, [r7, #4]
 8002016:	460b      	mov	r3, r1
 8002018:	70fb      	strb	r3, [r7, #3]
 800201a:	4613      	mov	r3, r2
 800201c:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 800201e:	2300      	movs	r3, #0
 8002020:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8002026:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800202a:	085b      	lsrs	r3, r3, #1
 800202c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	08db      	lsrs	r3, r3, #3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	461a      	mov	r2, r3
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	bf14      	ite	ne
 8002042:	2301      	movne	r3, #1
 8002044:	2300      	moveq	r3, #0
 8002046:	b2db      	uxtb	r3, r3
 8002048:	4413      	add	r3, r2
 800204a:	b29a      	uxth	r2, r3
 800204c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002050:	b29b      	uxth	r3, r3
 8002052:	fb12 f303 	smulbb	r3, r2, r3
 8002056:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8002058:	78fb      	ldrb	r3, [r7, #3]
 800205a:	3b20      	subs	r3, #32
 800205c:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	b29a      	uxth	r2, r3
 8002062:	88fb      	ldrh	r3, [r7, #6]
 8002064:	4413      	add	r3, r2
 8002066:	b29b      	uxth	r3, r3
 8002068:	3b01      	subs	r3, #1
 800206a:	b29c      	uxth	r4, r3
 800206c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002070:	b29a      	uxth	r2, r3
 8002072:	88bb      	ldrh	r3, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	b29b      	uxth	r3, r3
 8002078:	3b01      	subs	r3, #1
 800207a:	b29b      	uxth	r3, r3
 800207c:	88b9      	ldrh	r1, [r7, #4]
 800207e:	88f8      	ldrh	r0, [r7, #6]
 8002080:	4622      	mov	r2, r4
 8002082:	f7ff fe37 	bl	8001cf4 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8002086:	2300      	movs	r3, #0
 8002088:	827b      	strh	r3, [r7, #18]
 800208a:	e07a      	b.n	8002182 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 800208c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002090:	2b0c      	cmp	r3, #12
 8002092:	d028      	beq.n	80020e6 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8002094:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002098:	2b10      	cmp	r3, #16
 800209a:	d108      	bne.n	80020ae <lcd_ShowChar+0xae>
 800209c:	78fa      	ldrb	r2, [r7, #3]
 800209e:	8a7b      	ldrh	r3, [r7, #18]
 80020a0:	493c      	ldr	r1, [pc, #240]	; (8002194 <lcd_ShowChar+0x194>)
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	440a      	add	r2, r1
 80020a6:	4413      	add	r3, r2
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	75fb      	strb	r3, [r7, #23]
 80020ac:	e01b      	b.n	80020e6 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 80020ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80020b2:	2b18      	cmp	r3, #24
 80020b4:	d10b      	bne.n	80020ce <lcd_ShowChar+0xce>
 80020b6:	78fa      	ldrb	r2, [r7, #3]
 80020b8:	8a79      	ldrh	r1, [r7, #18]
 80020ba:	4837      	ldr	r0, [pc, #220]	; (8002198 <lcd_ShowChar+0x198>)
 80020bc:	4613      	mov	r3, r2
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4413      	add	r3, r2
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	4403      	add	r3, r0
 80020c6:	440b      	add	r3, r1
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	75fb      	strb	r3, [r7, #23]
 80020cc:	e00b      	b.n	80020e6 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 80020ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80020d2:	2b20      	cmp	r3, #32
 80020d4:	d15a      	bne.n	800218c <lcd_ShowChar+0x18c>
 80020d6:	78fa      	ldrb	r2, [r7, #3]
 80020d8:	8a7b      	ldrh	r3, [r7, #18]
 80020da:	4930      	ldr	r1, [pc, #192]	; (800219c <lcd_ShowChar+0x19c>)
 80020dc:	0192      	lsls	r2, r2, #6
 80020de:	440a      	add	r2, r1
 80020e0:	4413      	add	r3, r2
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 80020e6:	2300      	movs	r3, #0
 80020e8:	75bb      	strb	r3, [r7, #22]
 80020ea:	e044      	b.n	8002176 <lcd_ShowChar+0x176>
		{
			if(!mode)
 80020ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d120      	bne.n	8002136 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80020f4:	7dfa      	ldrb	r2, [r7, #23]
 80020f6:	7dbb      	ldrb	r3, [r7, #22]
 80020f8:	fa42 f303 	asr.w	r3, r2, r3
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d004      	beq.n	800210e <lcd_ShowChar+0x10e>
 8002104:	883b      	ldrh	r3, [r7, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fdd2 	bl	8001cb0 <LCD_WR_DATA>
 800210c:	e003      	b.n	8002116 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 800210e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fdcd 	bl	8001cb0 <LCD_WR_DATA>
				m++;
 8002116:	7d7b      	ldrb	r3, [r7, #21]
 8002118:	3301      	adds	r3, #1
 800211a:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 800211c:	7d7b      	ldrb	r3, [r7, #21]
 800211e:	7bfa      	ldrb	r2, [r7, #15]
 8002120:	fbb3 f1f2 	udiv	r1, r3, r2
 8002124:	fb01 f202 	mul.w	r2, r1, r2
 8002128:	1a9b      	subs	r3, r3, r2
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	d11f      	bne.n	8002170 <lcd_ShowChar+0x170>
				{
					m=0;
 8002130:	2300      	movs	r3, #0
 8002132:	757b      	strb	r3, [r7, #21]
					break;
 8002134:	e022      	b.n	800217c <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8002136:	7dfa      	ldrb	r2, [r7, #23]
 8002138:	7dbb      	ldrb	r3, [r7, #22]
 800213a:	fa42 f303 	asr.w	r3, r2, r3
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d005      	beq.n	8002152 <lcd_ShowChar+0x152>
 8002146:	883a      	ldrh	r2, [r7, #0]
 8002148:	88b9      	ldrh	r1, [r7, #4]
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fe85 	bl	8001e5c <lcd_DrawPoint>
				x++;
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	3301      	adds	r3, #1
 8002156:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8002158:	88fa      	ldrh	r2, [r7, #6]
 800215a:	8a3b      	ldrh	r3, [r7, #16]
 800215c:	1ad2      	subs	r2, r2, r3
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	429a      	cmp	r2, r3
 8002162:	d105      	bne.n	8002170 <lcd_ShowChar+0x170>
				{
					x=x0;
 8002164:	8a3b      	ldrh	r3, [r7, #16]
 8002166:	80fb      	strh	r3, [r7, #6]
					y++;
 8002168:	88bb      	ldrh	r3, [r7, #4]
 800216a:	3301      	adds	r3, #1
 800216c:	80bb      	strh	r3, [r7, #4]
					break;
 800216e:	e005      	b.n	800217c <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8002170:	7dbb      	ldrb	r3, [r7, #22]
 8002172:	3301      	adds	r3, #1
 8002174:	75bb      	strb	r3, [r7, #22]
 8002176:	7dbb      	ldrb	r3, [r7, #22]
 8002178:	2b07      	cmp	r3, #7
 800217a:	d9b7      	bls.n	80020ec <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 800217c:	8a7b      	ldrh	r3, [r7, #18]
 800217e:	3301      	adds	r3, #1
 8002180:	827b      	strh	r3, [r7, #18]
 8002182:	8a7a      	ldrh	r2, [r7, #18]
 8002184:	89bb      	ldrh	r3, [r7, #12]
 8002186:	429a      	cmp	r2, r3
 8002188:	d380      	bcc.n	800208c <lcd_ShowChar+0x8c>
 800218a:	e000      	b.n	800218e <lcd_ShowChar+0x18e>
		else return;
 800218c:	bf00      	nop
				}
			}
		}
	}
}
 800218e:	371c      	adds	r7, #28
 8002190:	46bd      	mov	sp, r7
 8002192:	bd90      	pop	{r4, r7, pc}
 8002194:	0800d474 	.word	0x0800d474
 8002198:	0800da64 	.word	0x0800da64
 800219c:	0800ec34 	.word	0x0800ec34

080021a0 <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 80021a0:	b590      	push	{r4, r7, lr}
 80021a2:	b087      	sub	sp, #28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4604      	mov	r4, r0
 80021a8:	4608      	mov	r0, r1
 80021aa:	4611      	mov	r1, r2
 80021ac:	461a      	mov	r2, r3
 80021ae:	4623      	mov	r3, r4
 80021b0:	80fb      	strh	r3, [r7, #6]
 80021b2:	4603      	mov	r3, r0
 80021b4:	80bb      	strh	r3, [r7, #4]
 80021b6:	460b      	mov	r3, r1
 80021b8:	807b      	strh	r3, [r7, #2]
 80021ba:	4613      	mov	r3, r2
 80021bc:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 80021c2:	88fa      	ldrh	r2, [r7, #6]
 80021c4:	887b      	ldrh	r3, [r7, #2]
 80021c6:	4413      	add	r3, r2
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29c      	uxth	r4, r3
 80021ce:	88ba      	ldrh	r2, [r7, #4]
 80021d0:	883b      	ldrh	r3, [r7, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	3b01      	subs	r3, #1
 80021d8:	b29b      	uxth	r3, r3
 80021da:	88b9      	ldrh	r1, [r7, #4]
 80021dc:	88f8      	ldrh	r0, [r7, #6]
 80021de:	4622      	mov	r2, r4
 80021e0:	f7ff fd88 	bl	8001cf4 <lcd_AddressSet>
	for(i=0;i<length;i++)
 80021e4:	2300      	movs	r3, #0
 80021e6:	82fb      	strh	r3, [r7, #22]
 80021e8:	e027      	b.n	800223a <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	82bb      	strh	r3, [r7, #20]
 80021ee:	e01d      	b.n	800222c <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021f6:	4413      	add	r3, r2
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	3301      	adds	r3, #1
 8002202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002204:	4413      	add	r3, r2
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	b21a      	sxth	r2, r3
 8002210:	7bbb      	ldrb	r3, [r7, #14]
 8002212:	b21b      	sxth	r3, r3
 8002214:	4313      	orrs	r3, r2
 8002216:	b21b      	sxth	r3, r3
 8002218:	b29b      	uxth	r3, r3
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fd48 	bl	8001cb0 <LCD_WR_DATA>
			k++;
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	3301      	adds	r3, #1
 8002224:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8002226:	8abb      	ldrh	r3, [r7, #20]
 8002228:	3301      	adds	r3, #1
 800222a:	82bb      	strh	r3, [r7, #20]
 800222c:	8aba      	ldrh	r2, [r7, #20]
 800222e:	883b      	ldrh	r3, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d3dd      	bcc.n	80021f0 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8002234:	8afb      	ldrh	r3, [r7, #22]
 8002236:	3301      	adds	r3, #1
 8002238:	82fb      	strh	r3, [r7, #22]
 800223a:	8afa      	ldrh	r2, [r7, #22]
 800223c:	887b      	ldrh	r3, [r7, #2]
 800223e:	429a      	cmp	r2, r3
 8002240:	d3d3      	bcc.n	80021ea <lcd_ShowPicture+0x4a>
		}
	}
}
 8002242:	bf00      	nop
 8002244:	bf00      	nop
 8002246:	371c      	adds	r7, #28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd90      	pop	{r4, r7, pc}

0800224c <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	091b      	lsrs	r3, r3, #4
 800225a:	b2db      	uxtb	r3, r3
 800225c:	f003 0303 	and.w	r3, r3, #3
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d007      	beq.n	8002276 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8002266:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <lcd_SetDir+0x44>)
 8002268:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800226c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <lcd_SetDir+0x44>)
 8002270:	22f0      	movs	r2, #240	; 0xf0
 8002272:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8002274:	e006      	b.n	8002284 <lcd_SetDir+0x38>
		lcddev.width=240;
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <lcd_SetDir+0x44>)
 8002278:	22f0      	movs	r2, #240	; 0xf0
 800227a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 800227c:	4b04      	ldr	r3, [pc, #16]	; (8002290 <lcd_SetDir+0x44>)
 800227e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002282:	805a      	strh	r2, [r3, #2]
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	20000294 	.word	0x20000294

08002294 <lcd_init>:


void lcd_init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8002298:	2200      	movs	r2, #0
 800229a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800229e:	48aa      	ldr	r0, [pc, #680]	; (8002548 <lcd_init+0x2b4>)
 80022a0:	f006 f828 	bl	80082f4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80022a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022a8:	f004 fd3e 	bl	8006d28 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80022ac:	2201      	movs	r2, #1
 80022ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022b2:	48a5      	ldr	r0, [pc, #660]	; (8002548 <lcd_init+0x2b4>)
 80022b4:	f006 f81e 	bl	80082f4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80022b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022bc:	f004 fd34 	bl	8006d28 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 80022c0:	2000      	movs	r0, #0
 80022c2:	f7ff ffc3 	bl	800224c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80022c6:	20d3      	movs	r0, #211	; 0xd3
 80022c8:	f7ff fce2 	bl	8001c90 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80022cc:	f7ff fd00 	bl	8001cd0 <LCD_RD_DATA>
 80022d0:	4603      	mov	r3, r0
 80022d2:	461a      	mov	r2, r3
 80022d4:	4b9d      	ldr	r3, [pc, #628]	; (800254c <lcd_init+0x2b8>)
 80022d6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80022d8:	f7ff fcfa 	bl	8001cd0 <LCD_RD_DATA>
 80022dc:	4603      	mov	r3, r0
 80022de:	461a      	mov	r2, r3
 80022e0:	4b9a      	ldr	r3, [pc, #616]	; (800254c <lcd_init+0x2b8>)
 80022e2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80022e4:	f7ff fcf4 	bl	8001cd0 <LCD_RD_DATA>
 80022e8:	4603      	mov	r3, r0
 80022ea:	461a      	mov	r2, r3
 80022ec:	4b97      	ldr	r3, [pc, #604]	; (800254c <lcd_init+0x2b8>)
 80022ee:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80022f0:	4b96      	ldr	r3, [pc, #600]	; (800254c <lcd_init+0x2b8>)
 80022f2:	889b      	ldrh	r3, [r3, #4]
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	4b94      	ldr	r3, [pc, #592]	; (800254c <lcd_init+0x2b8>)
 80022fa:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80022fc:	f7ff fce8 	bl	8001cd0 <LCD_RD_DATA>
 8002300:	4603      	mov	r3, r0
 8002302:	461a      	mov	r2, r3
 8002304:	4b91      	ldr	r3, [pc, #580]	; (800254c <lcd_init+0x2b8>)
 8002306:	889b      	ldrh	r3, [r3, #4]
 8002308:	4313      	orrs	r3, r2
 800230a:	b29a      	uxth	r2, r3
 800230c:	4b8f      	ldr	r3, [pc, #572]	; (800254c <lcd_init+0x2b8>)
 800230e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8002310:	20cf      	movs	r0, #207	; 0xcf
 8002312:	f7ff fcbd 	bl	8001c90 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002316:	2000      	movs	r0, #0
 8002318:	f7ff fcca 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 800231c:	20c1      	movs	r0, #193	; 0xc1
 800231e:	f7ff fcc7 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8002322:	2030      	movs	r0, #48	; 0x30
 8002324:	f7ff fcc4 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8002328:	20ed      	movs	r0, #237	; 0xed
 800232a:	f7ff fcb1 	bl	8001c90 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800232e:	2064      	movs	r0, #100	; 0x64
 8002330:	f7ff fcbe 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8002334:	2003      	movs	r0, #3
 8002336:	f7ff fcbb 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800233a:	2012      	movs	r0, #18
 800233c:	f7ff fcb8 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8002340:	2081      	movs	r0, #129	; 0x81
 8002342:	f7ff fcb5 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8002346:	20e8      	movs	r0, #232	; 0xe8
 8002348:	f7ff fca2 	bl	8001c90 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 800234c:	2085      	movs	r0, #133	; 0x85
 800234e:	f7ff fcaf 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002352:	2010      	movs	r0, #16
 8002354:	f7ff fcac 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8002358:	207a      	movs	r0, #122	; 0x7a
 800235a:	f7ff fca9 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800235e:	20cb      	movs	r0, #203	; 0xcb
 8002360:	f7ff fc96 	bl	8001c90 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8002364:	2039      	movs	r0, #57	; 0x39
 8002366:	f7ff fca3 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800236a:	202c      	movs	r0, #44	; 0x2c
 800236c:	f7ff fca0 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002370:	2000      	movs	r0, #0
 8002372:	f7ff fc9d 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8002376:	2034      	movs	r0, #52	; 0x34
 8002378:	f7ff fc9a 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 800237c:	2002      	movs	r0, #2
 800237e:	f7ff fc97 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8002382:	20f7      	movs	r0, #247	; 0xf7
 8002384:	f7ff fc84 	bl	8001c90 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8002388:	2020      	movs	r0, #32
 800238a:	f7ff fc91 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800238e:	20ea      	movs	r0, #234	; 0xea
 8002390:	f7ff fc7e 	bl	8001c90 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002394:	2000      	movs	r0, #0
 8002396:	f7ff fc8b 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800239a:	2000      	movs	r0, #0
 800239c:	f7ff fc88 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80023a0:	20c0      	movs	r0, #192	; 0xc0
 80023a2:	f7ff fc75 	bl	8001c90 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80023a6:	201b      	movs	r0, #27
 80023a8:	f7ff fc82 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80023ac:	20c1      	movs	r0, #193	; 0xc1
 80023ae:	f7ff fc6f 	bl	8001c90 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80023b2:	2001      	movs	r0, #1
 80023b4:	f7ff fc7c 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80023b8:	20c5      	movs	r0, #197	; 0xc5
 80023ba:	f7ff fc69 	bl	8001c90 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80023be:	2030      	movs	r0, #48	; 0x30
 80023c0:	f7ff fc76 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80023c4:	2030      	movs	r0, #48	; 0x30
 80023c6:	f7ff fc73 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80023ca:	20c7      	movs	r0, #199	; 0xc7
 80023cc:	f7ff fc60 	bl	8001c90 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80023d0:	20b7      	movs	r0, #183	; 0xb7
 80023d2:	f7ff fc6d 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80023d6:	2036      	movs	r0, #54	; 0x36
 80023d8:	f7ff fc5a 	bl	8001c90 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 80023dc:	2008      	movs	r0, #8
 80023de:	f7ff fc67 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80023e2:	203a      	movs	r0, #58	; 0x3a
 80023e4:	f7ff fc54 	bl	8001c90 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80023e8:	2055      	movs	r0, #85	; 0x55
 80023ea:	f7ff fc61 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80023ee:	20b1      	movs	r0, #177	; 0xb1
 80023f0:	f7ff fc4e 	bl	8001c90 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80023f4:	2000      	movs	r0, #0
 80023f6:	f7ff fc5b 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80023fa:	201a      	movs	r0, #26
 80023fc:	f7ff fc58 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8002400:	20b6      	movs	r0, #182	; 0xb6
 8002402:	f7ff fc45 	bl	8001c90 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8002406:	200a      	movs	r0, #10
 8002408:	f7ff fc52 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 800240c:	20a2      	movs	r0, #162	; 0xa2
 800240e:	f7ff fc4f 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002412:	20f2      	movs	r0, #242	; 0xf2
 8002414:	f7ff fc3c 	bl	8001c90 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002418:	2000      	movs	r0, #0
 800241a:	f7ff fc49 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800241e:	2026      	movs	r0, #38	; 0x26
 8002420:	f7ff fc36 	bl	8001c90 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002424:	2001      	movs	r0, #1
 8002426:	f7ff fc43 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800242a:	20e0      	movs	r0, #224	; 0xe0
 800242c:	f7ff fc30 	bl	8001c90 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002430:	200f      	movs	r0, #15
 8002432:	f7ff fc3d 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8002436:	202a      	movs	r0, #42	; 0x2a
 8002438:	f7ff fc3a 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 800243c:	2028      	movs	r0, #40	; 0x28
 800243e:	f7ff fc37 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002442:	2008      	movs	r0, #8
 8002444:	f7ff fc34 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8002448:	200e      	movs	r0, #14
 800244a:	f7ff fc31 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800244e:	2008      	movs	r0, #8
 8002450:	f7ff fc2e 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002454:	2054      	movs	r0, #84	; 0x54
 8002456:	f7ff fc2b 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800245a:	20a9      	movs	r0, #169	; 0xa9
 800245c:	f7ff fc28 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8002460:	2043      	movs	r0, #67	; 0x43
 8002462:	f7ff fc25 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8002466:	200a      	movs	r0, #10
 8002468:	f7ff fc22 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800246c:	200f      	movs	r0, #15
 800246e:	f7ff fc1f 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002472:	2000      	movs	r0, #0
 8002474:	f7ff fc1c 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002478:	2000      	movs	r0, #0
 800247a:	f7ff fc19 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800247e:	2000      	movs	r0, #0
 8002480:	f7ff fc16 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002484:	2000      	movs	r0, #0
 8002486:	f7ff fc13 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800248a:	20e1      	movs	r0, #225	; 0xe1
 800248c:	f7ff fc00 	bl	8001c90 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002490:	2000      	movs	r0, #0
 8002492:	f7ff fc0d 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8002496:	2015      	movs	r0, #21
 8002498:	f7ff fc0a 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 800249c:	2017      	movs	r0, #23
 800249e:	f7ff fc07 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80024a2:	2007      	movs	r0, #7
 80024a4:	f7ff fc04 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80024a8:	2011      	movs	r0, #17
 80024aa:	f7ff fc01 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80024ae:	2006      	movs	r0, #6
 80024b0:	f7ff fbfe 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80024b4:	202b      	movs	r0, #43	; 0x2b
 80024b6:	f7ff fbfb 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80024ba:	2056      	movs	r0, #86	; 0x56
 80024bc:	f7ff fbf8 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80024c0:	203c      	movs	r0, #60	; 0x3c
 80024c2:	f7ff fbf5 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80024c6:	2005      	movs	r0, #5
 80024c8:	f7ff fbf2 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80024cc:	2010      	movs	r0, #16
 80024ce:	f7ff fbef 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80024d2:	200f      	movs	r0, #15
 80024d4:	f7ff fbec 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80024d8:	203f      	movs	r0, #63	; 0x3f
 80024da:	f7ff fbe9 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80024de:	203f      	movs	r0, #63	; 0x3f
 80024e0:	f7ff fbe6 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80024e4:	200f      	movs	r0, #15
 80024e6:	f7ff fbe3 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80024ea:	202b      	movs	r0, #43	; 0x2b
 80024ec:	f7ff fbd0 	bl	8001c90 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80024f0:	2000      	movs	r0, #0
 80024f2:	f7ff fbdd 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80024f6:	2000      	movs	r0, #0
 80024f8:	f7ff fbda 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80024fc:	2001      	movs	r0, #1
 80024fe:	f7ff fbd7 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8002502:	203f      	movs	r0, #63	; 0x3f
 8002504:	f7ff fbd4 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002508:	202a      	movs	r0, #42	; 0x2a
 800250a:	f7ff fbc1 	bl	8001c90 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800250e:	2000      	movs	r0, #0
 8002510:	f7ff fbce 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002514:	2000      	movs	r0, #0
 8002516:	f7ff fbcb 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800251a:	2000      	movs	r0, #0
 800251c:	f7ff fbc8 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002520:	20ef      	movs	r0, #239	; 0xef
 8002522:	f7ff fbc5 	bl	8001cb0 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8002526:	2011      	movs	r0, #17
 8002528:	f7ff fbb2 	bl	8001c90 <LCD_WR_REG>
	HAL_Delay(120);
 800252c:	2078      	movs	r0, #120	; 0x78
 800252e:	f004 fbfb 	bl	8006d28 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8002532:	2029      	movs	r0, #41	; 0x29
 8002534:	f7ff fbac 	bl	8001c90 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002538:	2201      	movs	r2, #1
 800253a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800253e:	4804      	ldr	r0, [pc, #16]	; (8002550 <lcd_init+0x2bc>)
 8002540:	f005 fed8 	bl	80082f4 <HAL_GPIO_WritePin>
}
 8002544:	bf00      	nop
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40020800 	.word	0x40020800
 800254c:	20000294 	.word	0x20000294
 8002550:	40020000 	.word	0x40020000

08002554 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b08b      	sub	sp, #44	; 0x2c
 8002558:	af04      	add	r7, sp, #16
 800255a:	60ba      	str	r2, [r7, #8]
 800255c:	461a      	mov	r2, r3
 800255e:	4603      	mov	r3, r0
 8002560:	81fb      	strh	r3, [r7, #14]
 8002562:	460b      	mov	r3, r1
 8002564:	81bb      	strh	r3, [r7, #12]
 8002566:	4613      	mov	r3, r2
 8002568:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800256a:	89fb      	ldrh	r3, [r7, #14]
 800256c:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 800256e:	2300      	movs	r3, #0
 8002570:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8002572:	e048      	b.n	8002606 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8002574:	7dfb      	ldrb	r3, [r7, #23]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d145      	bne.n	8002606 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800257a:	89fa      	ldrh	r2, [r7, #14]
 800257c:	4b26      	ldr	r3, [pc, #152]	; (8002618 <lcd_ShowStr+0xc4>)
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	4619      	mov	r1, r3
 8002582:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002586:	085b      	lsrs	r3, r3, #1
 8002588:	b2db      	uxtb	r3, r3
 800258a:	1acb      	subs	r3, r1, r3
 800258c:	429a      	cmp	r2, r3
 800258e:	dc3f      	bgt.n	8002610 <lcd_ShowStr+0xbc>
 8002590:	89ba      	ldrh	r2, [r7, #12]
 8002592:	4b21      	ldr	r3, [pc, #132]	; (8002618 <lcd_ShowStr+0xc4>)
 8002594:	885b      	ldrh	r3, [r3, #2]
 8002596:	4619      	mov	r1, r3
 8002598:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800259c:	1acb      	subs	r3, r1, r3
 800259e:	429a      	cmp	r2, r3
 80025a0:	dc36      	bgt.n	8002610 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b80      	cmp	r3, #128	; 0x80
 80025a8:	d902      	bls.n	80025b0 <lcd_ShowStr+0x5c>
 80025aa:	2301      	movs	r3, #1
 80025ac:	75fb      	strb	r3, [r7, #23]
 80025ae:	e02a      	b.n	8002606 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b0d      	cmp	r3, #13
 80025b6:	d10b      	bne.n	80025d0 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80025b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80025bc:	b29a      	uxth	r2, r3
 80025be:	89bb      	ldrh	r3, [r7, #12]
 80025c0:	4413      	add	r3, r2
 80025c2:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80025c4:	8abb      	ldrh	r3, [r7, #20]
 80025c6:	81fb      	strh	r3, [r7, #14]
					str++;
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	3301      	adds	r3, #1
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	e017      	b.n	8002600 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	781a      	ldrb	r2, [r3, #0]
 80025d4:	88fc      	ldrh	r4, [r7, #6]
 80025d6:	89b9      	ldrh	r1, [r7, #12]
 80025d8:	89f8      	ldrh	r0, [r7, #14]
 80025da:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80025de:	9302      	str	r3, [sp, #8]
 80025e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	4623      	mov	r3, r4
 80025ec:	f7ff fd08 	bl	8002000 <lcd_ShowChar>
					x+=sizey/2;
 80025f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80025f4:	085b      	lsrs	r3, r3, #1
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	89fb      	ldrh	r3, [r7, #14]
 80025fc:	4413      	add	r3, r2
 80025fe:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	3301      	adds	r3, #1
 8002604:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1b2      	bne.n	8002574 <lcd_ShowStr+0x20>
 800260e:	e000      	b.n	8002612 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002610:	bf00      	nop
			}
		}
	}
}
 8002612:	371c      	adds	r7, #28
 8002614:	46bd      	mov	sp, r7
 8002616:	bd90      	pop	{r4, r7, pc}
 8002618:	20000294 	.word	0x20000294

0800261c <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y,char *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08a      	sub	sp, #40	; 0x28
 8002620:	af04      	add	r7, sp, #16
 8002622:	60ba      	str	r2, [r7, #8]
 8002624:	461a      	mov	r2, r3
 8002626:	4603      	mov	r3, r0
 8002628:	81fb      	strh	r3, [r7, #14]
 800262a:	460b      	mov	r3, r1
 800262c:	81bb      	strh	r3, [r7, #12]
 800262e:	4613      	mov	r3, r2
 8002630:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8002632:	68b8      	ldr	r0, [r7, #8]
 8002634:	f7fd fdcc 	bl	80001d0 <strlen>
 8002638:	4603      	mov	r3, r0
 800263a:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 800263c:	4b0f      	ldr	r3, [pc, #60]	; (800267c <lcd_StrCenter+0x60>)
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	461a      	mov	r2, r3
 8002642:	8afb      	ldrh	r3, [r7, #22]
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	0fda      	lsrs	r2, r3, #31
 800264a:	4413      	add	r3, r2
 800264c:	105b      	asrs	r3, r3, #1
 800264e:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8002650:	89fa      	ldrh	r2, [r7, #14]
 8002652:	8abb      	ldrh	r3, [r7, #20]
 8002654:	4413      	add	r3, r2
 8002656:	b298      	uxth	r0, r3
 8002658:	88fa      	ldrh	r2, [r7, #6]
 800265a:	89b9      	ldrh	r1, [r7, #12]
 800265c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002660:	9302      	str	r3, [sp, #8]
 8002662:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	8c3b      	ldrh	r3, [r7, #32]
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	4613      	mov	r3, r2
 800266e:	68ba      	ldr	r2, [r7, #8]
 8002670:	f7ff ff70 	bl	8002554 <lcd_ShowStr>
}
 8002674:	bf00      	nop
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20000294 	.word	0x20000294

08002680 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002684:	2201      	movs	r2, #1
 8002686:	2140      	movs	r1, #64	; 0x40
 8002688:	4802      	ldr	r0, [pc, #8]	; (8002694 <led7_init+0x14>)
 800268a:	f005 fe33 	bl	80082f4 <HAL_GPIO_WritePin>
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40021800 	.word	0x40021800

08002698 <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 800269c:	4b3f      	ldr	r3, [pc, #252]	; (800279c <led7_Scan+0x104>)
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	4b3d      	ldr	r3, [pc, #244]	; (800279c <led7_Scan+0x104>)
 80026a6:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80026a8:	4b3d      	ldr	r3, [pc, #244]	; (80027a0 <led7_Scan+0x108>)
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b3d      	ldr	r3, [pc, #244]	; (80027a4 <led7_Scan+0x10c>)
 80026b0:	5c9b      	ldrb	r3, [r3, r2]
 80026b2:	021b      	lsls	r3, r3, #8
 80026b4:	b21a      	sxth	r2, r3
 80026b6:	4b39      	ldr	r3, [pc, #228]	; (800279c <led7_Scan+0x104>)
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	b21b      	sxth	r3, r3
 80026bc:	4313      	orrs	r3, r2
 80026be:	b21b      	sxth	r3, r3
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	4b36      	ldr	r3, [pc, #216]	; (800279c <led7_Scan+0x104>)
 80026c4:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80026c6:	4b36      	ldr	r3, [pc, #216]	; (80027a0 <led7_Scan+0x108>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	d846      	bhi.n	800275c <led7_Scan+0xc4>
 80026ce:	a201      	add	r2, pc, #4	; (adr r2, 80026d4 <led7_Scan+0x3c>)
 80026d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d4:	080026e5 	.word	0x080026e5
 80026d8:	08002703 	.word	0x08002703
 80026dc:	08002721 	.word	0x08002721
 80026e0:	0800273f 	.word	0x0800273f
	case 0:
		spi_buffer |= 0x00b0;
 80026e4:	4b2d      	ldr	r3, [pc, #180]	; (800279c <led7_Scan+0x104>)
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	4b2b      	ldr	r3, [pc, #172]	; (800279c <led7_Scan+0x104>)
 80026f0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 80026f2:	4b2a      	ldr	r3, [pc, #168]	; (800279c <led7_Scan+0x104>)
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	4b27      	ldr	r3, [pc, #156]	; (800279c <led7_Scan+0x104>)
 80026fe:	801a      	strh	r2, [r3, #0]
		break;
 8002700:	e02d      	b.n	800275e <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8002702:	4b26      	ldr	r3, [pc, #152]	; (800279c <led7_Scan+0x104>)
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800270a:	b29a      	uxth	r2, r3
 800270c:	4b23      	ldr	r3, [pc, #140]	; (800279c <led7_Scan+0x104>)
 800270e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8002710:	4b22      	ldr	r3, [pc, #136]	; (800279c <led7_Scan+0x104>)
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	f023 0320 	bic.w	r3, r3, #32
 8002718:	b29a      	uxth	r2, r3
 800271a:	4b20      	ldr	r3, [pc, #128]	; (800279c <led7_Scan+0x104>)
 800271c:	801a      	strh	r2, [r3, #0]
		break;
 800271e:	e01e      	b.n	800275e <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002720:	4b1e      	ldr	r3, [pc, #120]	; (800279c <led7_Scan+0x104>)
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002728:	b29a      	uxth	r2, r3
 800272a:	4b1c      	ldr	r3, [pc, #112]	; (800279c <led7_Scan+0x104>)
 800272c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 800272e:	4b1b      	ldr	r3, [pc, #108]	; (800279c <led7_Scan+0x104>)
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	f023 0310 	bic.w	r3, r3, #16
 8002736:	b29a      	uxth	r2, r3
 8002738:	4b18      	ldr	r3, [pc, #96]	; (800279c <led7_Scan+0x104>)
 800273a:	801a      	strh	r2, [r3, #0]
		break;
 800273c:	e00f      	b.n	800275e <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800273e:	4b17      	ldr	r3, [pc, #92]	; (800279c <led7_Scan+0x104>)
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002746:	b29a      	uxth	r2, r3
 8002748:	4b14      	ldr	r3, [pc, #80]	; (800279c <led7_Scan+0x104>)
 800274a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 800274c:	4b13      	ldr	r3, [pc, #76]	; (800279c <led7_Scan+0x104>)
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002754:	b29a      	uxth	r2, r3
 8002756:	4b11      	ldr	r3, [pc, #68]	; (800279c <led7_Scan+0x104>)
 8002758:	801a      	strh	r2, [r3, #0]
		break;
 800275a:	e000      	b.n	800275e <led7_Scan+0xc6>
	default:
		break;
 800275c:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800275e:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <led7_Scan+0x108>)
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	3301      	adds	r3, #1
 8002764:	425a      	negs	r2, r3
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	f002 0203 	and.w	r2, r2, #3
 800276e:	bf58      	it	pl
 8002770:	4253      	negpl	r3, r2
 8002772:	b29a      	uxth	r2, r3
 8002774:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <led7_Scan+0x108>)
 8002776:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8002778:	2200      	movs	r2, #0
 800277a:	2140      	movs	r1, #64	; 0x40
 800277c:	480a      	ldr	r0, [pc, #40]	; (80027a8 <led7_Scan+0x110>)
 800277e:	f005 fdb9 	bl	80082f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002782:	2301      	movs	r3, #1
 8002784:	2202      	movs	r2, #2
 8002786:	4905      	ldr	r1, [pc, #20]	; (800279c <led7_Scan+0x104>)
 8002788:	4808      	ldr	r0, [pc, #32]	; (80027ac <led7_Scan+0x114>)
 800278a:	f006 faee 	bl	8008d6a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800278e:	2201      	movs	r2, #1
 8002790:	2140      	movs	r1, #64	; 0x40
 8002792:	4805      	ldr	r0, [pc, #20]	; (80027a8 <led7_Scan+0x110>)
 8002794:	f005 fdae 	bl	80082f4 <HAL_GPIO_WritePin>
}
 8002798:	bf00      	nop
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20000092 	.word	0x20000092
 80027a0:	2000029a 	.word	0x2000029a
 80027a4:	20000084 	.word	0x20000084
 80027a8:	40021800 	.word	0x40021800
 80027ac:	20002a28 	.word	0x20002a28

080027b0 <led7_SetDigit>:
  * @param  num	Number displayed
  * @param  pos	The position displayed (index from 0)
  * @param  show_dot Show dot in the led or not
  * @retval None
  */
void led7_SetDigit(int num, int position, uint8_t show_dot){
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	4613      	mov	r3, r2
 80027bc:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	db0e      	blt.n	80027e2 <led7_SetDigit+0x32>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b09      	cmp	r3, #9
 80027c8:	dc0b      	bgt.n	80027e2 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 80027ca:	4a09      	ldr	r2, [pc, #36]	; (80027f0 <led7_SetDigit+0x40>)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4413      	add	r3, r2
 80027d0:	781a      	ldrb	r2, [r3, #0]
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	b2d9      	uxtb	r1, r3
 80027d8:	4a06      	ldr	r2, [pc, #24]	; (80027f4 <led7_SetDigit+0x44>)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	4413      	add	r3, r2
 80027de:	460a      	mov	r2, r1
 80027e0:	701a      	strb	r2, [r3, #0]
	}
}
 80027e2:	bf00      	nop
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	20000088 	.word	0x20000088
 80027f4:	20000084 	.word	0x20000084

080027f8 <led7_SetColon>:
  *          This parameter can be one of the following values:
  *            @arg 0: Turn off
  *            @arg 1: Turn on
  * @retval None
  */
void led7_SetColon(uint8_t status){
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d107      	bne.n	8002818 <led7_SetColon+0x20>
 8002808:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <led7_SetColon+0x3c>)
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	f023 0308 	bic.w	r3, r3, #8
 8002810:	b29a      	uxth	r2, r3
 8002812:	4b08      	ldr	r3, [pc, #32]	; (8002834 <led7_SetColon+0x3c>)
 8002814:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 8002816:	e006      	b.n	8002826 <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 8002818:	4b06      	ldr	r3, [pc, #24]	; (8002834 <led7_SetColon+0x3c>)
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	f043 0308 	orr.w	r3, r3, #8
 8002820:	b29a      	uxth	r2, r3
 8002822:	4b04      	ldr	r3, [pc, #16]	; (8002834 <led7_SetColon+0x3c>)
 8002824:	801a      	strh	r2, [r3, #0]
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20000092 	.word	0x20000092

08002838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800283c:	f004 fa02 	bl	8006c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002840:	f000 f8b6 	bl	80029b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002844:	f7ff f906 	bl	8001a54 <MX_GPIO_Init>
  MX_DMA_Init();
 8002848:	f7fe fa5e 	bl	8000d08 <MX_DMA_Init>
  MX_TIM2_Init();
 800284c:	f003 fcf6 	bl	800623c <MX_TIM2_Init>
  MX_SPI1_Init();
 8002850:	f002 fa50 	bl	8004cf4 <MX_SPI1_Init>
  MX_FSMC_Init();
 8002854:	f7fe fc98 	bl	8001188 <MX_FSMC_Init>
  MX_USART2_UART_Init();
 8002858:	f004 f950 	bl	8006afc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800285c:	f7fd fe92 	bl	8000584 <MX_ADC1_Init>
  MX_TIM13_Init();
 8002860:	f003 fd38 	bl	80062d4 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002864:	f000 f90e 	bl	8002a84 <system_init>
  lcd_Clear(WHITE);
 8002868:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800286c:	f7ff fa8e 	bl	8001d8c <lcd_Clear>
  test_lcd();
 8002870:	f000 f938 	bl	8002ae4 <test_lcd>
//  lcd_Fill(235, 0, 240, 320, RED);
  while (1)
  {

    // lcd_Clear(WHITE);
	   if (flagForButton)
 8002874:	4b42      	ldr	r3, [pc, #264]	; (8002980 <main+0x148>)
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d006      	beq.n	800288a <main+0x52>
	   {
		   flagForButton= 0;
 800287c:	4b40      	ldr	r3, [pc, #256]	; (8002980 <main+0x148>)
 800287e:	2200      	movs	r2, #0
 8002880:	801a      	strh	r2, [r3, #0]
		   button_Scan();
 8002882:	f7fe f98f 	bl	8000ba4 <button_Scan>
//		   test_Esp();
//		  lightProcess();
		   beginStartGame();
 8002886:	f002 fdfd 	bl	8005484 <beginStartGame>
	   }
	   if(statusGame == NORMALMODE || statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 800288a:	4b3e      	ldr	r3, [pc, #248]	; (8002984 <main+0x14c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b03      	cmp	r3, #3
 8002890:	d007      	beq.n	80028a2 <main+0x6a>
 8002892:	4b3c      	ldr	r3, [pc, #240]	; (8002984 <main+0x14c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b04      	cmp	r3, #4
 8002898:	d003      	beq.n	80028a2 <main+0x6a>
 800289a:	4b3a      	ldr	r3, [pc, #232]	; (8002984 <main+0x14c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b05      	cmp	r3, #5
 80028a0:	d126      	bne.n	80028f0 <main+0xb8>
	   {
		   generateFruit();
 80028a2:	f001 fc7b 	bl	800419c <generateFruit>
		   if(statusGame == ADVANCEMODE && flagForGenerateWall)
 80028a6:	4b37      	ldr	r3, [pc, #220]	; (8002984 <main+0x14c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b05      	cmp	r3, #5
 80028ac:	d108      	bne.n	80028c0 <main+0x88>
 80028ae:	4b36      	ldr	r3, [pc, #216]	; (8002988 <main+0x150>)
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d004      	beq.n	80028c0 <main+0x88>
		   {
			   generateWall();
 80028b6:	f001 fd95 	bl	80043e4 <generateWall>
			   flagForGenerateWall = 0;
 80028ba:	4b33      	ldr	r3, [pc, #204]	; (8002988 <main+0x150>)
 80028bc:	2200      	movs	r2, #0
 80028be:	801a      	strh	r2, [r3, #0]
		   }
		   if (flagForSnakeRun)
 80028c0:	4b32      	ldr	r3, [pc, #200]	; (800298c <main+0x154>)
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d004      	beq.n	80028d2 <main+0x9a>
		   {
			   flagForSnakeRun= 0;
 80028c8:	4b30      	ldr	r3, [pc, #192]	; (800298c <main+0x154>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	801a      	strh	r2, [r3, #0]
			   snakeRun();
 80028ce:	f001 fb39 	bl	8003f44 <snakeRun>
		   }
		   if(flagForUart == 1)
 80028d2:	4b2f      	ldr	r3, [pc, #188]	; (8002990 <main+0x158>)
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d110      	bne.n	80028fc <main+0xc4>
		   {
//			   uartSendPlay();
			   TOTALTIME = TOTALTIME + 1;
 80028da:	4b2e      	ldr	r3, [pc, #184]	; (8002994 <main+0x15c>)
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	3301      	adds	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	4b2c      	ldr	r3, [pc, #176]	; (8002994 <main+0x15c>)
 80028e4:	801a      	strh	r2, [r3, #0]
			   setTimerUart(1000);
 80028e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028ea:	f002 f8ef 	bl	8004acc <setTimerUart>
		   if(flagForUart == 1)
 80028ee:	e005      	b.n	80028fc <main+0xc4>
		   }
	  }else{
		  setTimerUart(0);
 80028f0:	2000      	movs	r0, #0
 80028f2:	f002 f8eb 	bl	8004acc <setTimerUart>
		  flagForSnakeRun = 0;
 80028f6:	4b25      	ldr	r3, [pc, #148]	; (800298c <main+0x154>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	801a      	strh	r2, [r3, #0]
	  }
	  if(statusGame == OVERMODE)
 80028fc:	4b21      	ldr	r3, [pc, #132]	; (8002984 <main+0x14c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b07      	cmp	r3, #7
 8002902:	d104      	bne.n	800290e <main+0xd6>
	  {
		  pickOver(OVERMESSAGE);
 8002904:	4b24      	ldr	r3, [pc, #144]	; (8002998 <main+0x160>)
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe ff6b 	bl	80017e4 <pickOver>
	  }
	  if(statusGame == STOPMODE)
 800290e:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <main+0x14c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b06      	cmp	r3, #6
 8002914:	d101      	bne.n	800291a <main+0xe2>
	  {
		  pickStop();
 8002916:	f003 fb0d 	bl	8005f34 <pickStop>
	  }
	  if(statusGame == EXITMODE)
 800291a:	4b1a      	ldr	r3, [pc, #104]	; (8002984 <main+0x14c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b0a      	cmp	r3, #10
 8002920:	d101      	bne.n	8002926 <main+0xee>
	  {
		  askToExit();
 8002922:	f7fe fbe9 	bl	80010f8 <askToExit>
	  }
	  if(flagForTiming == 1)
 8002926:	4b1d      	ldr	r3, [pc, #116]	; (800299c <main+0x164>)
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d10b      	bne.n	8002946 <main+0x10e>
	  {
		  flagForTiming = 0;
 800292e:	4b1b      	ldr	r3, [pc, #108]	; (800299c <main+0x164>)
 8002930:	2200      	movs	r2, #0
 8002932:	801a      	strh	r2, [r3, #0]
		  statusGame = OVERMODE;
 8002934:	4b13      	ldr	r3, [pc, #76]	; (8002984 <main+0x14c>)
 8002936:	2207      	movs	r2, #7
 8002938:	601a      	str	r2, [r3, #0]
		  initOverMode(1);
 800293a:	2001      	movs	r0, #1
 800293c:	f7fe ff94 	bl	8001868 <initOverMode>
		  arrowMode = NORMALMODE;
 8002940:	4b17      	ldr	r3, [pc, #92]	; (80029a0 <main+0x168>)
 8002942:	2203      	movs	r2, #3
 8002944:	601a      	str	r2, [r3, #0]
	  }
	  if(flagForDeTime == 1)
 8002946:	4b17      	ldr	r3, [pc, #92]	; (80029a4 <main+0x16c>)
 8002948:	881b      	ldrh	r3, [r3, #0]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d10b      	bne.n	8002966 <main+0x12e>
	  {
		  TIMING--;
 800294e:	4b16      	ldr	r3, [pc, #88]	; (80029a8 <main+0x170>)
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <main+0x170>)
 8002958:	801a      	strh	r2, [r3, #0]
		  showTiming();
 800295a:	f003 fe95 	bl	8006688 <showTiming>
		  setTimerDeTime(1000);
 800295e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002962:	f002 f87b 	bl	8004a5c <setTimerDeTime>
	  }
	  if(flagForSendSensor == 1)
 8002966:	4b11      	ldr	r3, [pc, #68]	; (80029ac <main+0x174>)
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d182      	bne.n	8002874 <main+0x3c>
	  {
		  sensor_Read();
 800296e:	f000 f8eb 	bl	8002b48 <sensor_Read>
		  uartSendSensor();
 8002972:	f004 f817 	bl	80069a4 <uartSendSensor>
		  setTimerSendSensor(10000);
 8002976:	f242 7010 	movw	r0, #10000	; 0x2710
 800297a:	f002 f8df 	bl	8004b3c <setTimerSendSensor>
	   if (flagForButton)
 800297e:	e779      	b.n	8002874 <main+0x3c>
 8002980:	200029f8 	.word	0x200029f8
 8002984:	2000026c 	.word	0x2000026c
 8002988:	20002a16 	.word	0x20002a16
 800298c:	200029fe 	.word	0x200029fe
 8002990:	20002a1c 	.word	0x20002a1c
 8002994:	20000284 	.word	0x20000284
 8002998:	20000282 	.word	0x20000282
 800299c:	20002a04 	.word	0x20002a04
 80029a0:	20000014 	.word	0x20000014
 80029a4:	20002a10 	.word	0x20002a10
 80029a8:	20000000 	.word	0x20000000
 80029ac:	20002a22 	.word	0x20002a22

080029b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b094      	sub	sp, #80	; 0x50
 80029b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029b6:	f107 0320 	add.w	r3, r7, #32
 80029ba:	2230      	movs	r2, #48	; 0x30
 80029bc:	2100      	movs	r1, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	f009 f802 	bl	800b9c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029c4:	f107 030c 	add.w	r3, r7, #12
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029d4:	2300      	movs	r3, #0
 80029d6:	60bb      	str	r3, [r7, #8]
 80029d8:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <SystemClock_Config+0xcc>)
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	4a27      	ldr	r2, [pc, #156]	; (8002a7c <SystemClock_Config+0xcc>)
 80029de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e2:	6413      	str	r3, [r2, #64]	; 0x40
 80029e4:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <SystemClock_Config+0xcc>)
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029f0:	2300      	movs	r3, #0
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <SystemClock_Config+0xd0>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a21      	ldr	r2, [pc, #132]	; (8002a80 <SystemClock_Config+0xd0>)
 80029fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4b1f      	ldr	r3, [pc, #124]	; (8002a80 <SystemClock_Config+0xd0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a08:	607b      	str	r3, [r7, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a10:	2301      	movs	r3, #1
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a14:	2310      	movs	r3, #16
 8002a16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a20:	2308      	movs	r3, #8
 8002a22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002a24:	23a8      	movs	r3, #168	; 0xa8
 8002a26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a30:	f107 0320 	add.w	r3, r7, #32
 8002a34:	4618      	mov	r0, r3
 8002a36:	f005 fc77 	bl	8008328 <HAL_RCC_OscConfig>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002a40:	f000 f86e 	bl	8002b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a44:	230f      	movs	r3, #15
 8002a46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002a56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a5c:	f107 030c 	add.w	r3, r7, #12
 8002a60:	2105      	movs	r1, #5
 8002a62:	4618      	mov	r0, r3
 8002a64:	f005 fed8 	bl	8008818 <HAL_RCC_ClockConfig>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002a6e:	f000 f857 	bl	8002b20 <Error_Handler>
  }
}
 8002a72:	bf00      	nop
 8002a74:	3750      	adds	r7, #80	; 0x50
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40007000 	.word	0x40007000

08002a84 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2120      	movs	r1, #32
 8002a8c:	4814      	ldr	r0, [pc, #80]	; (8002ae0 <system_init+0x5c>)
 8002a8e:	f005 fc31 	bl	80082f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8002a92:	2200      	movs	r2, #0
 8002a94:	2140      	movs	r1, #64	; 0x40
 8002a96:	4812      	ldr	r0, [pc, #72]	; (8002ae0 <system_init+0x5c>)
 8002a98:	f005 fc2c 	bl	80082f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2110      	movs	r1, #16
 8002aa0:	480f      	ldr	r0, [pc, #60]	; (8002ae0 <system_init+0x5c>)
 8002aa2:	f005 fc27 	bl	80082f4 <HAL_GPIO_WritePin>
	  timer_init();
 8002aa6:	f001 ff93 	bl	80049d0 <timer_init>
	  led7_init();
 8002aaa:	f7ff fde9 	bl	8002680 <led7_init>
	  button_init();
 8002aae:	f7fe f859 	bl	8000b64 <button_init>
	  lcd_init();
 8002ab2:	f7ff fbef 	bl	8002294 <lcd_init>
	  uart_init_esp();
 8002ab6:	f003 fe53 	bl	8006760 <uart_init_esp>
	  sensor_init();
 8002aba:	f000 f837 	bl	8002b2c <sensor_init>
	  setTimerButton(10);
 8002abe:	200a      	movs	r0, #10
 8002ac0:	f002 f820 	bl	8004b04 <setTimerButton>
	  setTimerSnakeRun(300);
 8002ac4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002ac8:	f001 ff8c 	bl	80049e4 <setTimerSnakeRun>
	  setTimerGenerateWall(2000);
 8002acc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002ad0:	f001 ffe0 	bl	8004a94 <setTimerGenerateWall>
	  setTimerSendSensor(10000);
 8002ad4:	f242 7010 	movw	r0, #10000	; 0x2710
 8002ad8:	f002 f830 	bl	8004b3c <setTimerSendSensor>
}
 8002adc:	bf00      	nop
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40021000 	.word	0x40021000

08002ae4 <test_lcd>:
		if(button_count[i] == 1){
			lcd_ShowIntNum(140, 105, i, 2, BRED, WHITE, 32);
		}
	}
}
void test_lcd(){
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af04      	add	r7, sp, #16
	lcd_Fill(19, 19, 29, 29, BLUE);
 8002aea:	231f      	movs	r3, #31
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	231d      	movs	r3, #29
 8002af0:	221d      	movs	r2, #29
 8002af2:	2113      	movs	r1, #19
 8002af4:	2013      	movs	r0, #19
 8002af6:	f7ff f97b 	bl	8001df0 <lcd_Fill>
	lcd_StrCenter(0, 100, "Hello World !!!", RED, BLUE, 16, 1);
 8002afa:	2301      	movs	r3, #1
 8002afc:	9302      	str	r3, [sp, #8]
 8002afe:	2310      	movs	r3, #16
 8002b00:	9301      	str	r3, [sp, #4]
 8002b02:	231f      	movs	r3, #31
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b0a:	4a04      	ldr	r2, [pc, #16]	; (8002b1c <test_lcd+0x38>)
 8002b0c:	2164      	movs	r1, #100	; 0x64
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f7ff fd84 	bl	800261c <lcd_StrCenter>
//	lcd_ShowStr(20, 30, "Test lcd screen", WHITE, RED, 24, 0);
//	lcd_DrawCircle(60, 120, GREEN, 40, 1);
//	lcd_DrawCircle(160, 120, BRED, 40, 0);
//	lcd_ShowPicture(80, 200, 90, 90, gImage_logo);
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	0800d044 	.word	0x0800d044

08002b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b24:	b672      	cpsid	i
}
 8002b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b28:	e7fe      	b.n	8002b28 <Error_Handler+0x8>
	...

08002b2c <sensor_init>:
 */
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 8002b30:	2205      	movs	r2, #5
 8002b32:	4903      	ldr	r1, [pc, #12]	; (8002b40 <sensor_init+0x14>)
 8002b34:	4803      	ldr	r0, [pc, #12]	; (8002b44 <sensor_init+0x18>)
 8002b36:	f004 f95f 	bl	8006df8 <HAL_ADC_Start_DMA>
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	200002a0 	.word	0x200002a0
 8002b44:	2000012c 	.word	0x2000012c

08002b48 <sensor_Read>:

void sensor_Read(){
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8002b4c:	2205      	movs	r2, #5
 8002b4e:	4903      	ldr	r1, [pc, #12]	; (8002b5c <sensor_Read+0x14>)
 8002b50:	4803      	ldr	r0, [pc, #12]	; (8002b60 <sensor_Read+0x18>)
 8002b52:	f004 f951 	bl	8006df8 <HAL_ADC_Start_DMA>
}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	200002a0 	.word	0x200002a0
 8002b60:	2000012c 	.word	0x2000012c

08002b64 <sensor_GetLight>:

uint16_t sensor_GetLight(){
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8002b68:	4b03      	ldr	r3, [pc, #12]	; (8002b78 <sensor_GetLight+0x14>)
 8002b6a:	889b      	ldrh	r3, [r3, #4]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	200002a0 	.word	0x200002a0

08002b7c <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8002b80:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <sensor_GetPotentiometer+0x14>)
 8002b82:	88db      	ldrh	r3, [r3, #6]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	200002a0 	.word	0x200002a0

08002b94 <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8002b98:	4b0a      	ldr	r3, [pc, #40]	; (8002bc4 <sensor_GetTemperature+0x30>)
 8002b9a:	891b      	ldrh	r3, [r3, #8]
 8002b9c:	ee07 3a90 	vmov	s15, r3
 8002ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ba4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002bc8 <sensor_GetTemperature+0x34>
 8002ba8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bac:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002bcc <sensor_GetTemperature+0x38>
 8002bb0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002bb4:	eef0 7a66 	vmov.f32	s15, s13
}
 8002bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	200002a0 	.word	0x200002a0
 8002bc8:	43a50000 	.word	0x43a50000
 8002bcc:	457ff000 	.word	0x457ff000

08002bd0 <convert2str>:
#include "set_up_mode.h"
#include "global.h"
#include "picture.h"

char *convert2str(uint16_t val)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b090      	sub	sp, #64	; 0x40
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	80fb      	strh	r3, [r7, #6]
    char str2[50];
    snprintf(str2, sizeof(str2), "%d", val);
 8002bda:	88fb      	ldrh	r3, [r7, #6]
 8002bdc:	f107 000c 	add.w	r0, r7, #12
 8002be0:	4a06      	ldr	r2, [pc, #24]	; (8002bfc <convert2str+0x2c>)
 8002be2:	2132      	movs	r1, #50	; 0x32
 8002be4:	f008 ff64 	bl	800bab0 <sniprintf>

    return strdup(str2); // Đảm bảo chuỗi được trả về được giữ nguyên giá trị sau khi thoát khỏi hàm.
 8002be8:	f107 030c 	add.w	r3, r7, #12
 8002bec:	4618      	mov	r0, r3
 8002bee:	f008 ffa3 	bl	800bb38 <strdup>
 8002bf2:	4603      	mov	r3, r0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3740      	adds	r7, #64	; 0x40
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	0800d054 	.word	0x0800d054

08002c00 <lcdDrawWall>:

void lcdDrawWall()
{
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af02      	add	r7, sp, #8
	// TOP
//	lcd_DrawRectangle(0, 70, 240 - wall_size, 70 + wall_size, BLACK);
	lcd_Fill(wallX[0], wallY[0], wallX[1], wallY[1] + wallSize, BLACK);
 8002c06:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <lcdDrawWall+0x3c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	b298      	uxth	r0, r3
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <lcdDrawWall+0x40>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	b299      	uxth	r1, r3
 8002c12:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <lcdDrawWall+0x3c>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	b29c      	uxth	r4, r3
 8002c18:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <lcdDrawWall+0x40>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <lcdDrawWall+0x44>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	2200      	movs	r2, #0
 8002c2a:	9200      	str	r2, [sp, #0]
 8002c2c:	4622      	mov	r2, r4
 8002c2e:	f7ff f8df 	bl	8001df0 <lcd_Fill>
//	lcd_DrawRectangle(240 - wall_size, 70, 240, 320 - wall_size, BLACK);
//	lcd_Fill(wallX[1] - wallSize, wallY[1], wallX[3], wallY[3], BLACK);
	// BOTTOM
//	lcd_DrawRectangle(240 - wall_size, 320 - wall_size, 240, 320, BLACK);
//	lcd_Fill(wallX[2], wallY[2] - wallSize, wallX[3], wallY[3], BLACK);
}
 8002c32:	bf00      	nop
 8002c34:	3704      	adds	r7, #4
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd90      	pop	{r4, r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000018 	.word	0x20000018
 8002c40:	20000028 	.word	0x20000028
 8002c44:	20000038 	.word	0x20000038

08002c48 <setUpLcdNormalPlay>:

void setUpLcdNormalPlay(uint16_t id, uint16_t score)
{
 8002c48:	b590      	push	{r4, r7, lr}
 8002c4a:	b0a3      	sub	sp, #140	; 0x8c
 8002c4c:	af04      	add	r7, sp, #16
 8002c4e:	4603      	mov	r3, r0
 8002c50:	460a      	mov	r2, r1
 8002c52:	80fb      	strh	r3, [r7, #6]
 8002c54:	4613      	mov	r3, r2
 8002c56:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 8002c58:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002c5c:	f7ff f896 	bl	8001d8c <lcd_Clear>
	lcd_Fill(0, 0, wallX[1], wallY[0], BLUE);
 8002c60:	4b45      	ldr	r3, [pc, #276]	; (8002d78 <setUpLcdNormalPlay+0x130>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	4b45      	ldr	r3, [pc, #276]	; (8002d7c <setUpLcdNormalPlay+0x134>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	211f      	movs	r1, #31
 8002c6e:	9100      	str	r1, [sp, #0]
 8002c70:	2100      	movs	r1, #0
 8002c72:	2000      	movs	r0, #0
 8002c74:	f7ff f8bc 	bl	8001df0 <lcd_Fill>
	lcd_ShowStr(0, 5, " MODE: NORMAL", RED, BLUE, 16, 1);
 8002c78:	2301      	movs	r3, #1
 8002c7a:	9302      	str	r3, [sp, #8]
 8002c7c:	2310      	movs	r3, #16
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	231f      	movs	r3, #31
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c88:	4a3d      	ldr	r2, [pc, #244]	; (8002d80 <setUpLcdNormalPlay+0x138>)
 8002c8a:	2105      	movs	r1, #5
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	f7ff fc61 	bl	8002554 <lcd_ShowStr>

	char str1[50] = "ID: ";
 8002c92:	4a3c      	ldr	r2, [pc, #240]	; (8002d84 <setUpLcdNormalPlay+0x13c>)
 8002c94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c9c:	6018      	str	r0, [r3, #0]
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	7019      	strb	r1, [r3, #0]
 8002ca2:	f107 0341 	add.w	r3, r7, #65	; 0x41
 8002ca6:	222d      	movs	r2, #45	; 0x2d
 8002ca8:	2100      	movs	r1, #0
 8002caa:	4618      	mov	r0, r3
 8002cac:	f008 fe8c 	bl	800b9c8 <memset>
	char *str2 = convert2str(ID);
 8002cb0:	4b35      	ldr	r3, [pc, #212]	; (8002d88 <setUpLcdNormalPlay+0x140>)
 8002cb2:	881b      	ldrh	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff8b 	bl	8002bd0 <convert2str>
 8002cba:	6778      	str	r0, [r7, #116]	; 0x74

	strcat(str1, str2);
 8002cbc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cc0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f008 ff28 	bl	800bb18 <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 16, 1);
 8002cc8:	4b30      	ldr	r3, [pc, #192]	; (8002d8c <setUpLcdNormalPlay+0x144>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	b298      	uxth	r0, r3
 8002cce:	4b30      	ldr	r3, [pc, #192]	; (8002d90 <setUpLcdNormalPlay+0x148>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	b299      	uxth	r1, r3
 8002cd4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002cd8:	2301      	movs	r3, #1
 8002cda:	9302      	str	r3, [sp, #8]
 8002cdc:	2310      	movs	r3, #16
 8002cde:	9301      	str	r3, [sp, #4]
 8002ce0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002cea:	f7ff fc33 	bl	8002554 <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 8002cee:	4a29      	ldr	r2, [pc, #164]	; (8002d94 <setUpLcdNormalPlay+0x14c>)
 8002cf0:	f107 0308 	add.w	r3, r7, #8
 8002cf4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cf8:	e883 0003 	stmia.w	r3, {r0, r1}
 8002cfc:	f107 0310 	add.w	r3, r7, #16
 8002d00:	222a      	movs	r2, #42	; 0x2a
 8002d02:	2100      	movs	r1, #0
 8002d04:	4618      	mov	r0, r3
 8002d06:	f008 fe5f 	bl	800b9c8 <memset>
	char *str4 = convert2str(SCORE);
 8002d0a:	4b23      	ldr	r3, [pc, #140]	; (8002d98 <setUpLcdNormalPlay+0x150>)
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff ff5e 	bl	8002bd0 <convert2str>
 8002d14:	6738      	str	r0, [r7, #112]	; 0x70
	strcat(str3, str4);
 8002d16:	f107 0308 	add.w	r3, r7, #8
 8002d1a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f008 fefb 	bl	800bb18 <strcat>
	lcd_ShowStr(scoreX, scoreY+5, str3, RED, BLUE, 16, 0);
 8002d22:	4b1e      	ldr	r3, [pc, #120]	; (8002d9c <setUpLcdNormalPlay+0x154>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	b298      	uxth	r0, r3
 8002d28:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <setUpLcdNormalPlay+0x158>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3305      	adds	r3, #5
 8002d30:	b299      	uxth	r1, r3
 8002d32:	f107 0208 	add.w	r2, r7, #8
 8002d36:	2300      	movs	r3, #0
 8002d38:	9302      	str	r3, [sp, #8]
 8002d3a:	2310      	movs	r3, #16
 8002d3c:	9301      	str	r3, [sp, #4]
 8002d3e:	231f      	movs	r3, #31
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002d46:	f7ff fc05 	bl	8002554 <lcd_ShowStr>
	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8002d4a:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <setUpLcdNormalPlay+0x15c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	b298      	uxth	r0, r3
 8002d50:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <setUpLcdNormalPlay+0x160>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	b299      	uxth	r1, r3
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <setUpLcdNormalPlay+0x164>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <setUpLcdNormalPlay+0x168>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	4c14      	ldr	r4, [pc, #80]	; (8002db4 <setUpLcdNormalPlay+0x16c>)
 8002d64:	9400      	str	r4, [sp, #0]
 8002d66:	f7ff fa1b 	bl	80021a0 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 8002d6a:	f7ff ff49 	bl	8002c00 <lcdDrawWall>
}
 8002d6e:	bf00      	nop
 8002d70:	377c      	adds	r7, #124	; 0x7c
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd90      	pop	{r4, r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000018 	.word	0x20000018
 8002d7c:	20000028 	.word	0x20000028
 8002d80:	0800d058 	.word	0x0800d058
 8002d84:	0800d068 	.word	0x0800d068
 8002d88:	20000258 	.word	0x20000258
 8002d8c:	20000064 	.word	0x20000064
 8002d90:	20000068 	.word	0x20000068
 8002d94:	0800d09c 	.word	0x0800d09c
 8002d98:	2000025a 	.word	0x2000025a
 8002d9c:	2000006c 	.word	0x2000006c
 8002da0:	20000070 	.word	0x20000070
 8002da4:	20000074 	.word	0x20000074
 8002da8:	20000078 	.word	0x20000078
 8002dac:	2000007c 	.word	0x2000007c
 8002db0:	20000080 	.word	0x20000080
 8002db4:	080103f4 	.word	0x080103f4

08002db8 <setUpLcdTimingPlay>:

void setUpLcdTimingPlay(uint16_t id, uint16_t timing)
{
 8002db8:	b590      	push	{r4, r7, lr}
 8002dba:	b0a3      	sub	sp, #140	; 0x8c
 8002dbc:	af04      	add	r7, sp, #16
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	460a      	mov	r2, r1
 8002dc2:	80fb      	strh	r3, [r7, #6]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 8002dc8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002dcc:	f7fe ffde 	bl	8001d8c <lcd_Clear>
	lcd_Fill(0, 0, wallX[1], wallY[0], BLUE);
 8002dd0:	4b45      	ldr	r3, [pc, #276]	; (8002ee8 <setUpLcdTimingPlay+0x130>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	4b45      	ldr	r3, [pc, #276]	; (8002eec <setUpLcdTimingPlay+0x134>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	211f      	movs	r1, #31
 8002dde:	9100      	str	r1, [sp, #0]
 8002de0:	2100      	movs	r1, #0
 8002de2:	2000      	movs	r0, #0
 8002de4:	f7ff f804 	bl	8001df0 <lcd_Fill>
	lcd_ShowStr(0, 5, " MODE: TIMING", RED, BLUE, 16, 1);
 8002de8:	2301      	movs	r3, #1
 8002dea:	9302      	str	r3, [sp, #8]
 8002dec:	2310      	movs	r3, #16
 8002dee:	9301      	str	r3, [sp, #4]
 8002df0:	231f      	movs	r3, #31
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002df8:	4a3d      	ldr	r2, [pc, #244]	; (8002ef0 <setUpLcdTimingPlay+0x138>)
 8002dfa:	2105      	movs	r1, #5
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f7ff fba9 	bl	8002554 <lcd_ShowStr>

	char str1[50] = "ID: ";
 8002e02:	4a3c      	ldr	r2, [pc, #240]	; (8002ef4 <setUpLcdTimingPlay+0x13c>)
 8002e04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e0c:	6018      	str	r0, [r3, #0]
 8002e0e:	3304      	adds	r3, #4
 8002e10:	7019      	strb	r1, [r3, #0]
 8002e12:	f107 0341 	add.w	r3, r7, #65	; 0x41
 8002e16:	222d      	movs	r2, #45	; 0x2d
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f008 fdd4 	bl	800b9c8 <memset>
	char *str2 = convert2str(ID);
 8002e20:	4b35      	ldr	r3, [pc, #212]	; (8002ef8 <setUpLcdTimingPlay+0x140>)
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fed3 	bl	8002bd0 <convert2str>
 8002e2a:	6778      	str	r0, [r7, #116]	; 0x74
	strcat(str1, str2);
 8002e2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e30:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002e32:	4618      	mov	r0, r3
 8002e34:	f008 fe70 	bl	800bb18 <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 16, 1);
 8002e38:	4b30      	ldr	r3, [pc, #192]	; (8002efc <setUpLcdTimingPlay+0x144>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	b298      	uxth	r0, r3
 8002e3e:	4b30      	ldr	r3, [pc, #192]	; (8002f00 <setUpLcdTimingPlay+0x148>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	b299      	uxth	r1, r3
 8002e44:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002e48:	2301      	movs	r3, #1
 8002e4a:	9302      	str	r3, [sp, #8]
 8002e4c:	2310      	movs	r3, #16
 8002e4e:	9301      	str	r3, [sp, #4]
 8002e50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002e5a:	f7ff fb7b 	bl	8002554 <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 8002e5e:	4a29      	ldr	r2, [pc, #164]	; (8002f04 <setUpLcdTimingPlay+0x14c>)
 8002e60:	f107 0308 	add.w	r3, r7, #8
 8002e64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e68:	e883 0003 	stmia.w	r3, {r0, r1}
 8002e6c:	f107 0310 	add.w	r3, r7, #16
 8002e70:	222a      	movs	r2, #42	; 0x2a
 8002e72:	2100      	movs	r1, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	f008 fda7 	bl	800b9c8 <memset>
	char *str4 = convert2str(0);
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f7ff fea8 	bl	8002bd0 <convert2str>
 8002e80:	6738      	str	r0, [r7, #112]	; 0x70
	strcat(str3, str4);
 8002e82:	f107 0308 	add.w	r3, r7, #8
 8002e86:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f008 fe45 	bl	800bb18 <strcat>
	lcd_ShowStr(scoreX, scoreY+5, str3, RED, WHITE, 16, 1);
 8002e8e:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <setUpLcdTimingPlay+0x150>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	b298      	uxth	r0, r3
 8002e94:	4b1d      	ldr	r3, [pc, #116]	; (8002f0c <setUpLcdTimingPlay+0x154>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3305      	adds	r3, #5
 8002e9c:	b299      	uxth	r1, r3
 8002e9e:	f107 0208 	add.w	r2, r7, #8
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	9302      	str	r3, [sp, #8]
 8002ea6:	2310      	movs	r3, #16
 8002ea8:	9301      	str	r3, [sp, #4]
 8002eaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002eb4:	f7ff fb4e 	bl	8002554 <lcd_ShowStr>

	showTiming();
 8002eb8:	f003 fbe6 	bl	8006688 <showTiming>

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8002ebc:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <setUpLcdTimingPlay+0x158>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	b298      	uxth	r0, r3
 8002ec2:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <setUpLcdTimingPlay+0x15c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	b299      	uxth	r1, r3
 8002ec8:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <setUpLcdTimingPlay+0x160>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <setUpLcdTimingPlay+0x164>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	4c12      	ldr	r4, [pc, #72]	; (8002f20 <setUpLcdTimingPlay+0x168>)
 8002ed6:	9400      	str	r4, [sp, #0]
 8002ed8:	f7ff f962 	bl	80021a0 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 8002edc:	f7ff fe90 	bl	8002c00 <lcdDrawWall>
}
 8002ee0:	bf00      	nop
 8002ee2:	377c      	adds	r7, #124	; 0x7c
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd90      	pop	{r4, r7, pc}
 8002ee8:	20000018 	.word	0x20000018
 8002eec:	20000028 	.word	0x20000028
 8002ef0:	0800d0d0 	.word	0x0800d0d0
 8002ef4:	0800d068 	.word	0x0800d068
 8002ef8:	20000258 	.word	0x20000258
 8002efc:	20000064 	.word	0x20000064
 8002f00:	20000068 	.word	0x20000068
 8002f04:	0800d09c 	.word	0x0800d09c
 8002f08:	2000006c 	.word	0x2000006c
 8002f0c:	20000070 	.word	0x20000070
 8002f10:	20000074 	.word	0x20000074
 8002f14:	20000078 	.word	0x20000078
 8002f18:	2000007c 	.word	0x2000007c
 8002f1c:	20000080 	.word	0x20000080
 8002f20:	080103f4 	.word	0x080103f4

08002f24 <setUpLcdAdvancePlay>:

void setUpLcdAdvancePlay(uint16_t id, uint16_t timing)
{
 8002f24:	b590      	push	{r4, r7, lr}
 8002f26:	b0a3      	sub	sp, #140	; 0x8c
 8002f28:	af04      	add	r7, sp, #16
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	460a      	mov	r2, r1
 8002f2e:	80fb      	strh	r3, [r7, #6]
 8002f30:	4613      	mov	r3, r2
 8002f32:	80bb      	strh	r3, [r7, #4]
	lcd_Clear(WHITE);
 8002f34:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002f38:	f7fe ff28 	bl	8001d8c <lcd_Clear>
	lcd_Fill(0, 0, wallX[1], wallY[0], BLUE);
 8002f3c:	4b45      	ldr	r3, [pc, #276]	; (8003054 <setUpLcdAdvancePlay+0x130>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	4b45      	ldr	r3, [pc, #276]	; (8003058 <setUpLcdAdvancePlay+0x134>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	211f      	movs	r1, #31
 8002f4a:	9100      	str	r1, [sp, #0]
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	2000      	movs	r0, #0
 8002f50:	f7fe ff4e 	bl	8001df0 <lcd_Fill>
	lcd_ShowStr(0, 5, " MODE: ADVANCE", RED, BLUE, 16, 1);
 8002f54:	2301      	movs	r3, #1
 8002f56:	9302      	str	r3, [sp, #8]
 8002f58:	2310      	movs	r3, #16
 8002f5a:	9301      	str	r3, [sp, #4]
 8002f5c:	231f      	movs	r3, #31
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f64:	4a3d      	ldr	r2, [pc, #244]	; (800305c <setUpLcdAdvancePlay+0x138>)
 8002f66:	2105      	movs	r1, #5
 8002f68:	2000      	movs	r0, #0
 8002f6a:	f7ff faf3 	bl	8002554 <lcd_ShowStr>

	char str1[50] = "ID: ";
 8002f6e:	4a3c      	ldr	r2, [pc, #240]	; (8003060 <setUpLcdAdvancePlay+0x13c>)
 8002f70:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f78:	6018      	str	r0, [r3, #0]
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	7019      	strb	r1, [r3, #0]
 8002f7e:	f107 0341 	add.w	r3, r7, #65	; 0x41
 8002f82:	222d      	movs	r2, #45	; 0x2d
 8002f84:	2100      	movs	r1, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f008 fd1e 	bl	800b9c8 <memset>
	char *str2 = convert2str(ID);
 8002f8c:	4b35      	ldr	r3, [pc, #212]	; (8003064 <setUpLcdAdvancePlay+0x140>)
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff fe1d 	bl	8002bd0 <convert2str>
 8002f96:	6778      	str	r0, [r7, #116]	; 0x74
	strcat(str1, str2);
 8002f98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f9c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f008 fdba 	bl	800bb18 <strcat>
	lcd_ShowStr(idX, idY, str1, RED, WHITE, 16, 1);
 8002fa4:	4b30      	ldr	r3, [pc, #192]	; (8003068 <setUpLcdAdvancePlay+0x144>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	b298      	uxth	r0, r3
 8002faa:	4b30      	ldr	r3, [pc, #192]	; (800306c <setUpLcdAdvancePlay+0x148>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	b299      	uxth	r1, r3
 8002fb0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	9302      	str	r3, [sp, #8]
 8002fb8:	2310      	movs	r3, #16
 8002fba:	9301      	str	r3, [sp, #4]
 8002fbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002fc6:	f7ff fac5 	bl	8002554 <lcd_ShowStr>

	char str3[50] = "SCORE: ";
 8002fca:	4a29      	ldr	r2, [pc, #164]	; (8003070 <setUpLcdAdvancePlay+0x14c>)
 8002fcc:	f107 0308 	add.w	r3, r7, #8
 8002fd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002fd4:	e883 0003 	stmia.w	r3, {r0, r1}
 8002fd8:	f107 0310 	add.w	r3, r7, #16
 8002fdc:	222a      	movs	r2, #42	; 0x2a
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f008 fcf1 	bl	800b9c8 <memset>
	char *str4 = convert2str(0);
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	f7ff fdf2 	bl	8002bd0 <convert2str>
 8002fec:	6738      	str	r0, [r7, #112]	; 0x70
	strcat(str3, str4);
 8002fee:	f107 0308 	add.w	r3, r7, #8
 8002ff2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f008 fd8f 	bl	800bb18 <strcat>
	lcd_ShowStr(scoreX, scoreY+5, str3, RED, WHITE, 16, 1);
 8002ffa:	4b1e      	ldr	r3, [pc, #120]	; (8003074 <setUpLcdAdvancePlay+0x150>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	b298      	uxth	r0, r3
 8003000:	4b1d      	ldr	r3, [pc, #116]	; (8003078 <setUpLcdAdvancePlay+0x154>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	b29b      	uxth	r3, r3
 8003006:	3305      	adds	r3, #5
 8003008:	b299      	uxth	r1, r3
 800300a:	f107 0208 	add.w	r2, r7, #8
 800300e:	2301      	movs	r3, #1
 8003010:	9302      	str	r3, [sp, #8]
 8003012:	2310      	movs	r3, #16
 8003014:	9301      	str	r3, [sp, #4]
 8003016:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003020:	f7ff fa98 	bl	8002554 <lcd_ShowStr>

	showTiming();
 8003024:	f003 fb30 	bl	8006688 <showTiming>

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8003028:	4b14      	ldr	r3, [pc, #80]	; (800307c <setUpLcdAdvancePlay+0x158>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	b298      	uxth	r0, r3
 800302e:	4b14      	ldr	r3, [pc, #80]	; (8003080 <setUpLcdAdvancePlay+0x15c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	b299      	uxth	r1, r3
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <setUpLcdAdvancePlay+0x160>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	b29a      	uxth	r2, r3
 800303a:	4b13      	ldr	r3, [pc, #76]	; (8003088 <setUpLcdAdvancePlay+0x164>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	b29b      	uxth	r3, r3
 8003040:	4c12      	ldr	r4, [pc, #72]	; (800308c <setUpLcdAdvancePlay+0x168>)
 8003042:	9400      	str	r4, [sp, #0]
 8003044:	f7ff f8ac 	bl	80021a0 <lcd_ShowPicture>
//	lcd_DrawLine(0, 50, 240, 55, WHITE);

	lcdDrawWall();
 8003048:	f7ff fdda 	bl	8002c00 <lcdDrawWall>
}
 800304c:	bf00      	nop
 800304e:	377c      	adds	r7, #124	; 0x7c
 8003050:	46bd      	mov	sp, r7
 8003052:	bd90      	pop	{r4, r7, pc}
 8003054:	20000018 	.word	0x20000018
 8003058:	20000028 	.word	0x20000028
 800305c:	0800d0e0 	.word	0x0800d0e0
 8003060:	0800d068 	.word	0x0800d068
 8003064:	20000258 	.word	0x20000258
 8003068:	20000064 	.word	0x20000064
 800306c:	20000068 	.word	0x20000068
 8003070:	0800d09c 	.word	0x0800d09c
 8003074:	2000006c 	.word	0x2000006c
 8003078:	20000070 	.word	0x20000070
 800307c:	20000074 	.word	0x20000074
 8003080:	20000078 	.word	0x20000078
 8003084:	2000007c 	.word	0x2000007c
 8003088:	20000080 	.word	0x20000080
 800308c:	080103f4 	.word	0x080103f4

08003090 <printScore>:

void printScore()
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b094      	sub	sp, #80	; 0x50
 8003094:	af04      	add	r7, sp, #16
	if(statusGame == NORMALMODE)
 8003096:	4b34      	ldr	r3, [pc, #208]	; (8003168 <printScore+0xd8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b03      	cmp	r3, #3
 800309c:	d12a      	bne.n	80030f4 <printScore+0x64>
	{
		char str3[50] = "SCORE: ";
 800309e:	4a33      	ldr	r2, [pc, #204]	; (800316c <printScore+0xdc>)
 80030a0:	1d3b      	adds	r3, r7, #4
 80030a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030a6:	e883 0003 	stmia.w	r3, {r0, r1}
 80030aa:	f107 030c 	add.w	r3, r7, #12
 80030ae:	222a      	movs	r2, #42	; 0x2a
 80030b0:	2100      	movs	r1, #0
 80030b2:	4618      	mov	r0, r3
 80030b4:	f008 fc88 	bl	800b9c8 <memset>
		char *str4 = convert2str(SCORE);
 80030b8:	4b2d      	ldr	r3, [pc, #180]	; (8003170 <printScore+0xe0>)
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fd87 	bl	8002bd0 <convert2str>
 80030c2:	63f8      	str	r0, [r7, #60]	; 0x3c
		strcat(str3, str4);
 80030c4:	1d3b      	adds	r3, r7, #4
 80030c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030c8:	4618      	mov	r0, r3
 80030ca:	f008 fd25 	bl	800bb18 <strcat>
		lcd_ShowStr(scoreX, scoreY+5, str3, RED, BLUE, 16, 0);
 80030ce:	4b29      	ldr	r3, [pc, #164]	; (8003174 <printScore+0xe4>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	b298      	uxth	r0, r3
 80030d4:	4b28      	ldr	r3, [pc, #160]	; (8003178 <printScore+0xe8>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3305      	adds	r3, #5
 80030dc:	b299      	uxth	r1, r3
 80030de:	1d3a      	adds	r2, r7, #4
 80030e0:	2300      	movs	r3, #0
 80030e2:	9302      	str	r3, [sp, #8]
 80030e4:	2310      	movs	r3, #16
 80030e6:	9301      	str	r3, [sp, #4]
 80030e8:	231f      	movs	r3, #31
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80030f0:	f7ff fa30 	bl	8002554 <lcd_ShowStr>
	}
	if(statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 80030f4:	4b1c      	ldr	r3, [pc, #112]	; (8003168 <printScore+0xd8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d003      	beq.n	8003104 <printScore+0x74>
 80030fc:	4b1a      	ldr	r3, [pc, #104]	; (8003168 <printScore+0xd8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b05      	cmp	r3, #5
 8003102:	d12c      	bne.n	800315e <printScore+0xce>
	{
		char str3[50] = "SCORE: ";
 8003104:	4a19      	ldr	r2, [pc, #100]	; (800316c <printScore+0xdc>)
 8003106:	1d3b      	adds	r3, r7, #4
 8003108:	e892 0003 	ldmia.w	r2, {r0, r1}
 800310c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003110:	f107 030c 	add.w	r3, r7, #12
 8003114:	222a      	movs	r2, #42	; 0x2a
 8003116:	2100      	movs	r1, #0
 8003118:	4618      	mov	r0, r3
 800311a:	f008 fc55 	bl	800b9c8 <memset>
		char *str4 = convert2str(SCORE);
 800311e:	4b14      	ldr	r3, [pc, #80]	; (8003170 <printScore+0xe0>)
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff fd54 	bl	8002bd0 <convert2str>
 8003128:	63b8      	str	r0, [r7, #56]	; 0x38
		strcat(str3, str4);
 800312a:	1d3b      	adds	r3, r7, #4
 800312c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800312e:	4618      	mov	r0, r3
 8003130:	f008 fcf2 	bl	800bb18 <strcat>
		lcd_ShowStr(scoreX, scoreY+5, str3, RED, BLUE, 16, 0);
 8003134:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <printScore+0xe4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	b298      	uxth	r0, r3
 800313a:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <printScore+0xe8>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	b29b      	uxth	r3, r3
 8003140:	3305      	adds	r3, #5
 8003142:	b299      	uxth	r1, r3
 8003144:	1d3a      	adds	r2, r7, #4
 8003146:	2300      	movs	r3, #0
 8003148:	9302      	str	r3, [sp, #8]
 800314a:	2310      	movs	r3, #16
 800314c:	9301      	str	r3, [sp, #4]
 800314e:	231f      	movs	r3, #31
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003156:	f7ff f9fd 	bl	8002554 <lcd_ShowStr>

		showTiming();
 800315a:	f003 fa95 	bl	8006688 <showTiming>
	}
}
 800315e:	bf00      	nop
 8003160:	3740      	adds	r7, #64	; 0x40
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	2000026c 	.word	0x2000026c
 800316c:	0800d09c 	.word	0x0800d09c
 8003170:	2000025a 	.word	0x2000025a
 8003174:	2000006c 	.word	0x2000006c
 8003178:	20000070 	.word	0x20000070

0800317c <drawHeadSnake>:
} WALLs;

WALLs wallObject;

void drawHeadSnake()
{
 800317c:	b590      	push	{r4, r7, lr}
 800317e:	b083      	sub	sp, #12
 8003180:	af02      	add	r7, sp, #8
	switch (snakeObject.snakeDirectionHead)
 8003182:	4b8f      	ldr	r3, [pc, #572]	; (80033c0 <drawHeadSnake+0x244>)
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	2b03      	cmp	r3, #3
 8003188:	f200 8114 	bhi.w	80033b4 <drawHeadSnake+0x238>
 800318c:	a201      	add	r2, pc, #4	; (adr r2, 8003194 <drawHeadSnake+0x18>)
 800318e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003192:	bf00      	nop
 8003194:	0800332d 	.word	0x0800332d
 8003198:	080032ad 	.word	0x080032ad
 800319c:	08003225 	.word	0x08003225
 80031a0:	080031a5 	.word	0x080031a5
	{
	case UP:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80031a4:	4b86      	ldr	r3, [pc, #536]	; (80033c0 <drawHeadSnake+0x244>)
 80031a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a8:	b298      	uxth	r0, r3
 80031aa:	4b85      	ldr	r3, [pc, #532]	; (80033c0 <drawHeadSnake+0x244>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 80031b0:	4b83      	ldr	r3, [pc, #524]	; (80033c0 <drawHeadSnake+0x244>)
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	3309      	adds	r3, #9
 80031b8:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 80031ba:	4b81      	ldr	r3, [pc, #516]	; (80033c0 <drawHeadSnake+0x244>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80031be:	b29b      	uxth	r3, r3
 80031c0:	3309      	adds	r3, #9
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80031c8:	9400      	str	r4, [sp, #0]
 80031ca:	f7fe fe11 	bl	8001df0 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80031ce:	4b7c      	ldr	r3, [pc, #496]	; (80033c0 <drawHeadSnake+0x244>)
 80031d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d2:	b298      	uxth	r0, r3
 80031d4:	4b7a      	ldr	r3, [pc, #488]	; (80033c0 <drawHeadSnake+0x244>)
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 80031da:	4b79      	ldr	r3, [pc, #484]	; (80033c0 <drawHeadSnake+0x244>)
 80031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3304      	adds	r3, #4
 80031e2:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 80031e4:	4b76      	ldr	r3, [pc, #472]	; (80033c0 <drawHeadSnake+0x244>)
 80031e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3304      	adds	r3, #4
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2400      	movs	r4, #0
 80031f0:	9400      	str	r4, [sp, #0]
 80031f2:	f7fe fdfd 	bl	8001df0 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 80031f6:	4b72      	ldr	r3, [pc, #456]	; (80033c0 <drawHeadSnake+0x244>)
 80031f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3305      	adds	r3, #5
 80031fe:	b298      	uxth	r0, r3
 8003200:	4b6f      	ldr	r3, [pc, #444]	; (80033c0 <drawHeadSnake+0x244>)
 8003202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003204:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 8003206:	4b6e      	ldr	r3, [pc, #440]	; (80033c0 <drawHeadSnake+0x244>)
 8003208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 800320a:	b29b      	uxth	r3, r3
 800320c:	3309      	adds	r3, #9
 800320e:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 8003210:	4b6b      	ldr	r3, [pc, #428]	; (80033c0 <drawHeadSnake+0x244>)
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8003214:	b29b      	uxth	r3, r3
 8003216:	3304      	adds	r3, #4
 8003218:	b29b      	uxth	r3, r3
 800321a:	2400      	movs	r4, #0
 800321c:	9400      	str	r4, [sp, #0]
 800321e:	f7fe fde7 	bl	8001df0 <lcd_Fill>
		break;
 8003222:	e0c8      	b.n	80033b6 <drawHeadSnake+0x23a>
	case DOWN:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8003224:	4b66      	ldr	r3, [pc, #408]	; (80033c0 <drawHeadSnake+0x244>)
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	b298      	uxth	r0, r3
 800322a:	4b65      	ldr	r3, [pc, #404]	; (80033c0 <drawHeadSnake+0x244>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8003230:	4b63      	ldr	r3, [pc, #396]	; (80033c0 <drawHeadSnake+0x244>)
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8003234:	b29b      	uxth	r3, r3
 8003236:	3309      	adds	r3, #9
 8003238:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 800323a:	4b61      	ldr	r3, [pc, #388]	; (80033c0 <drawHeadSnake+0x244>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 800323e:	b29b      	uxth	r3, r3
 8003240:	3309      	adds	r3, #9
 8003242:	b29b      	uxth	r3, r3
 8003244:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8003248:	9400      	str	r4, [sp, #0]
 800324a:	f7fe fdd1 	bl	8001df0 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 800324e:	4b5c      	ldr	r3, [pc, #368]	; (80033c0 <drawHeadSnake+0x244>)
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	b298      	uxth	r0, r3
 8003254:	4b5a      	ldr	r3, [pc, #360]	; (80033c0 <drawHeadSnake+0x244>)
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003258:	b29b      	uxth	r3, r3
 800325a:	3305      	adds	r3, #5
 800325c:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 800325e:	4b58      	ldr	r3, [pc, #352]	; (80033c0 <drawHeadSnake+0x244>)
 8003260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8003262:	b29b      	uxth	r3, r3
 8003264:	3304      	adds	r3, #4
 8003266:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 8003268:	4b55      	ldr	r3, [pc, #340]	; (80033c0 <drawHeadSnake+0x244>)
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 800326c:	b29b      	uxth	r3, r3
 800326e:	3309      	adds	r3, #9
 8003270:	b29b      	uxth	r3, r3
 8003272:	2400      	movs	r4, #0
 8003274:	9400      	str	r4, [sp, #0]
 8003276:	f7fe fdbb 	bl	8001df0 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 800327a:	4b51      	ldr	r3, [pc, #324]	; (80033c0 <drawHeadSnake+0x244>)
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	b29b      	uxth	r3, r3
 8003280:	3305      	adds	r3, #5
 8003282:	b298      	uxth	r0, r3
 8003284:	4b4e      	ldr	r3, [pc, #312]	; (80033c0 <drawHeadSnake+0x244>)
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	b29b      	uxth	r3, r3
 800328a:	3305      	adds	r3, #5
 800328c:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 800328e:	4b4c      	ldr	r3, [pc, #304]	; (80033c0 <drawHeadSnake+0x244>)
 8003290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8003292:	b29b      	uxth	r3, r3
 8003294:	3309      	adds	r3, #9
 8003296:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 8003298:	4b49      	ldr	r3, [pc, #292]	; (80033c0 <drawHeadSnake+0x244>)
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 800329c:	b29b      	uxth	r3, r3
 800329e:	3309      	adds	r3, #9
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2400      	movs	r4, #0
 80032a4:	9400      	str	r4, [sp, #0]
 80032a6:	f7fe fda3 	bl	8001df0 <lcd_Fill>
		break;
 80032aa:	e084      	b.n	80033b6 <drawHeadSnake+0x23a>
	case LEFT:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80032ac:	4b44      	ldr	r3, [pc, #272]	; (80033c0 <drawHeadSnake+0x244>)
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	b298      	uxth	r0, r3
 80032b2:	4b43      	ldr	r3, [pc, #268]	; (80033c0 <drawHeadSnake+0x244>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 80032b8:	4b41      	ldr	r3, [pc, #260]	; (80033c0 <drawHeadSnake+0x244>)
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3309      	adds	r3, #9
 80032c0:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 80032c2:	4b3f      	ldr	r3, [pc, #252]	; (80033c0 <drawHeadSnake+0x244>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3309      	adds	r3, #9
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80032d0:	9400      	str	r4, [sp, #0]
 80032d2:	f7fe fd8d 	bl	8001df0 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80032d6:	4b3a      	ldr	r3, [pc, #232]	; (80033c0 <drawHeadSnake+0x244>)
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	b298      	uxth	r0, r3
 80032dc:	4b38      	ldr	r3, [pc, #224]	; (80033c0 <drawHeadSnake+0x244>)
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 80032e2:	4b37      	ldr	r3, [pc, #220]	; (80033c0 <drawHeadSnake+0x244>)
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3304      	adds	r3, #4
 80032ea:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 4, BLACK);
 80032ec:	4b34      	ldr	r3, [pc, #208]	; (80033c0 <drawHeadSnake+0x244>)
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	3304      	adds	r3, #4
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2400      	movs	r4, #0
 80032f8:	9400      	str	r4, [sp, #0]
 80032fa:	f7fe fd79 	bl	8001df0 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 80032fe:	4b30      	ldr	r3, [pc, #192]	; (80033c0 <drawHeadSnake+0x244>)
 8003300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003302:	b298      	uxth	r0, r3
 8003304:	4b2e      	ldr	r3, [pc, #184]	; (80033c0 <drawHeadSnake+0x244>)
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	b29b      	uxth	r3, r3
 800330a:	3305      	adds	r3, #5
 800330c:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 800330e:	4b2c      	ldr	r3, [pc, #176]	; (80033c0 <drawHeadSnake+0x244>)
 8003310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 8003312:	b29b      	uxth	r3, r3
 8003314:	3304      	adds	r3, #4
 8003316:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 4, snakeObject.infoSnake[0].y + 9, BLACK);
 8003318:	4b29      	ldr	r3, [pc, #164]	; (80033c0 <drawHeadSnake+0x244>)
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y + 5,
 800331c:	b29b      	uxth	r3, r3
 800331e:	3309      	adds	r3, #9
 8003320:	b29b      	uxth	r3, r3
 8003322:	2400      	movs	r4, #0
 8003324:	9400      	str	r4, [sp, #0]
 8003326:	f7fe fd63 	bl	8001df0 <lcd_Fill>
		break;
 800332a:	e044      	b.n	80033b6 <drawHeadSnake+0x23a>
	case RIGHT:
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 800332c:	4b24      	ldr	r3, [pc, #144]	; (80033c0 <drawHeadSnake+0x244>)
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	b298      	uxth	r0, r3
 8003332:	4b23      	ldr	r3, [pc, #140]	; (80033c0 <drawHeadSnake+0x244>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8003338:	4b21      	ldr	r3, [pc, #132]	; (80033c0 <drawHeadSnake+0x244>)
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 800333c:	b29b      	uxth	r3, r3
 800333e:	3309      	adds	r3, #9
 8003340:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + snakeWidth, snakeObject.infoSnake[0].y + snakeWidth, RED);
 8003342:	4b1f      	ldr	r3, [pc, #124]	; (80033c0 <drawHeadSnake+0x244>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x, snakeObject.infoSnake[0].y,
 8003346:	b29b      	uxth	r3, r3
 8003348:	3309      	adds	r3, #9
 800334a:	b29b      	uxth	r3, r3
 800334c:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8003350:	9400      	str	r4, [sp, #0]
 8003352:	f7fe fd4d 	bl	8001df0 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8003356:	4b1a      	ldr	r3, [pc, #104]	; (80033c0 <drawHeadSnake+0x244>)
 8003358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335a:	b29b      	uxth	r3, r3
 800335c:	3305      	adds	r3, #5
 800335e:	b298      	uxth	r0, r3
 8003360:	4b17      	ldr	r3, [pc, #92]	; (80033c0 <drawHeadSnake+0x244>)
 8003362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003364:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 8003366:	4b16      	ldr	r3, [pc, #88]	; (80033c0 <drawHeadSnake+0x244>)
 8003368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 800336a:	b29b      	uxth	r3, r3
 800336c:	3309      	adds	r3, #9
 800336e:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 4, BLACK);
 8003370:	4b13      	ldr	r3, [pc, #76]	; (80033c0 <drawHeadSnake+0x244>)
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y,
 8003374:	b29b      	uxth	r3, r3
 8003376:	3304      	adds	r3, #4
 8003378:	b29b      	uxth	r3, r3
 800337a:	2400      	movs	r4, #0
 800337c:	9400      	str	r4, [sp, #0]
 800337e:	f7fe fd37 	bl	8001df0 <lcd_Fill>
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 8003382:	4b0f      	ldr	r3, [pc, #60]	; (80033c0 <drawHeadSnake+0x244>)
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	b29b      	uxth	r3, r3
 8003388:	3305      	adds	r3, #5
 800338a:	b298      	uxth	r0, r3
 800338c:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <drawHeadSnake+0x244>)
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	b29b      	uxth	r3, r3
 8003392:	3305      	adds	r3, #5
 8003394:	b299      	uxth	r1, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 8003396:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <drawHeadSnake+0x244>)
 8003398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 800339a:	b29b      	uxth	r3, r3
 800339c:	3309      	adds	r3, #9
 800339e:	b29a      	uxth	r2, r3
				 snakeObject.infoSnake[0].x + 9, snakeObject.infoSnake[0].y + 9, BLACK);
 80033a0:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <drawHeadSnake+0x244>)
 80033a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		lcd_Fill(snakeObject.infoSnake[0].x + 5, snakeObject.infoSnake[0].y + 5,
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3309      	adds	r3, #9
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2400      	movs	r4, #0
 80033ac:	9400      	str	r4, [sp, #0]
 80033ae:	f7fe fd1f 	bl	8001df0 <lcd_Fill>
		break;
 80033b2:	e000      	b.n	80033b6 <drawHeadSnake+0x23a>
	default:
		break;
 80033b4:	bf00      	nop
	}
}
 80033b6:	bf00      	nop
 80033b8:	3704      	adds	r7, #4
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd90      	pop	{r4, r7, pc}
 80033be:	bf00      	nop
 80033c0:	200002b0 	.word	0x200002b0

080033c4 <goLeft>:

void goLeft()
{
 80033c4:	b590      	push	{r4, r7, lr}
 80033c6:	b089      	sub	sp, #36	; 0x24
 80033c8:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 80033ca:	4b58      	ldr	r3, [pc, #352]	; (800352c <goLeft+0x168>)
 80033cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f040 80a7 	bne.w	8003522 <goLeft+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 80033d4:	4b55      	ldr	r3, [pc, #340]	; (800352c <goLeft+0x168>)
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d103      	bne.n	80033e4 <goLeft+0x20>
		{
		case RIGHT:
			(*snakeObject.GORIGHT)();
 80033dc:	4b53      	ldr	r3, [pc, #332]	; (800352c <goLeft+0x168>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	4798      	blx	r3
			break;
 80033e2:	e09f      	b.n	8003524 <goLeft+0x160>
		default:
			snakeObject.snakeDirectionHead = LEFT;
 80033e4:	4b51      	ldr	r3, [pc, #324]	; (800352c <goLeft+0x168>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
 80033ee:	e091      	b.n	8003514 <goLeft+0x150>
			{
				if (i == 0)
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d128      	bne.n	8003448 <goLeft+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 80033f6:	4a4d      	ldr	r2, [pc, #308]	; (800352c <goLeft+0x168>)
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	3305      	adds	r3, #5
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	4413      	add	r3, r2
 8003400:	f107 020c 	add.w	r2, r7, #12
 8003404:	3304      	adds	r3, #4
 8003406:	e893 0003 	ldmia.w	r3, {r0, r1}
 800340a:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x -= snakeStep;
 800340e:	4a47      	ldr	r2, [pc, #284]	; (800352c <goLeft+0x168>)
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	3305      	adds	r3, #5
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	4413      	add	r3, r2
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f1a3 020a 	sub.w	r2, r3, #10
 800341e:	4943      	ldr	r1, [pc, #268]	; (800352c <goLeft+0x168>)
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	3305      	adds	r3, #5
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	440b      	add	r3, r1
 8003428:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y = snakeObject.infoSnake[i].y;
 800342a:	4a40      	ldr	r2, [pc, #256]	; (800352c <goLeft+0x168>)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	3305      	adds	r3, #5
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	4413      	add	r3, r2
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	493d      	ldr	r1, [pc, #244]	; (800352c <goLeft+0x168>)
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	3305      	adds	r3, #5
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	440b      	add	r3, r1
 8003440:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 8003442:	f7ff fe9b 	bl	800317c <drawHeadSnake>
 8003446:	e062      	b.n	800350e <goLeft+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 8003448:	4a38      	ldr	r2, [pc, #224]	; (800352c <goLeft+0x168>)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	3305      	adds	r3, #5
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4413      	add	r3, r2
 8003452:	1d3a      	adds	r2, r7, #4
 8003454:	3304      	adds	r3, #4
 8003456:	e893 0003 	ldmia.w	r3, {r0, r1}
 800345a:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 800345e:	4a33      	ldr	r2, [pc, #204]	; (800352c <goLeft+0x168>)
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	3305      	adds	r3, #5
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	4413      	add	r3, r2
 8003468:	3304      	adds	r3, #4
 800346a:	f107 020c 	add.w	r2, r7, #12
 800346e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003472:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 8003476:	f107 030c 	add.w	r3, r7, #12
 800347a:	1d3a      	adds	r2, r7, #4
 800347c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003480:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d123      	bne.n	80034d2 <goLeft+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800348a:	4a28      	ldr	r2, [pc, #160]	; (800352c <goLeft+0x168>)
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	3305      	adds	r3, #5
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4413      	add	r3, r2
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	b298      	uxth	r0, r3
 8003498:	4a24      	ldr	r2, [pc, #144]	; (800352c <goLeft+0x168>)
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	3305      	adds	r3, #5
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4413      	add	r3, r2
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 80034a6:	4a21      	ldr	r2, [pc, #132]	; (800352c <goLeft+0x168>)
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	3305      	adds	r3, #5
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4413      	add	r3, r2
 80034b0:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	3309      	adds	r3, #9
 80034b6:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 80034b8:	4c1c      	ldr	r4, [pc, #112]	; (800352c <goLeft+0x168>)
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	3305      	adds	r3, #5
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	4423      	add	r3, r4
 80034c2:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3309      	adds	r3, #9
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	2400      	movs	r4, #0
 80034cc:	9400      	str	r4, [sp, #0]
 80034ce:	f7fe fc8f 	bl	8001df0 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 80034d2:	4b16      	ldr	r3, [pc, #88]	; (800352c <goLeft+0x168>)
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	3b01      	subs	r3, #1
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d117      	bne.n	800350e <goLeft+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 80034de:	4b13      	ldr	r3, [pc, #76]	; (800352c <goLeft+0x168>)
 80034e0:	331c      	adds	r3, #28
 80034e2:	1d3a      	adds	r2, r7, #4
 80034e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034e8:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	b298      	uxth	r0, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	b299      	uxth	r1, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3309      	adds	r3, #9
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3309      	adds	r3, #9
 8003502:	b29b      	uxth	r3, r3
 8003504:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003508:	9400      	str	r4, [sp, #0]
 800350a:	f7fe fc71 	bl	8001df0 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	3301      	adds	r3, #1
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	4b05      	ldr	r3, [pc, #20]	; (800352c <goLeft+0x168>)
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	429a      	cmp	r2, r3
 800351c:	f6ff af68 	blt.w	80033f0 <goLeft+0x2c>
					}
				}
			}
			break;
 8003520:	e000      	b.n	8003524 <goLeft+0x160>
		}
	}
 8003522:	bf00      	nop
}
 8003524:	bf00      	nop
 8003526:	371c      	adds	r7, #28
 8003528:	46bd      	mov	sp, r7
 800352a:	bd90      	pop	{r4, r7, pc}
 800352c:	200002b0 	.word	0x200002b0

08003530 <goRight>:

void goRight()
{
 8003530:	b590      	push	{r4, r7, lr}
 8003532:	b089      	sub	sp, #36	; 0x24
 8003534:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 8003536:	4b58      	ldr	r3, [pc, #352]	; (8003698 <goRight+0x168>)
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353a:	2b00      	cmp	r3, #0
 800353c:	f040 80a7 	bne.w	800368e <goRight+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 8003540:	4b55      	ldr	r3, [pc, #340]	; (8003698 <goRight+0x168>)
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d103      	bne.n	8003550 <goRight+0x20>
		{
		case LEFT:
			(*snakeObject.GOLEFT)();
 8003548:	4b53      	ldr	r3, [pc, #332]	; (8003698 <goRight+0x168>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4798      	blx	r3
			break;
 800354e:	e09f      	b.n	8003690 <goRight+0x160>
		default:
			snakeObject.snakeDirectionHead = RIGHT;
 8003550:	4b51      	ldr	r3, [pc, #324]	; (8003698 <goRight+0x168>)
 8003552:	2200      	movs	r2, #0
 8003554:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	e091      	b.n	8003680 <goRight+0x150>
			{
				if (i == 0)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d128      	bne.n	80035b4 <goRight+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 8003562:	4a4d      	ldr	r2, [pc, #308]	; (8003698 <goRight+0x168>)
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	3305      	adds	r3, #5
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4413      	add	r3, r2
 800356c:	f107 020c 	add.w	r2, r7, #12
 8003570:	3304      	adds	r3, #4
 8003572:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003576:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x += snakeStep;
 800357a:	4a47      	ldr	r2, [pc, #284]	; (8003698 <goRight+0x168>)
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	3305      	adds	r3, #5
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4413      	add	r3, r2
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f103 020a 	add.w	r2, r3, #10
 800358a:	4943      	ldr	r1, [pc, #268]	; (8003698 <goRight+0x168>)
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	3305      	adds	r3, #5
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	440b      	add	r3, r1
 8003594:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y = snakeObject.infoSnake[i].y;
 8003596:	4a40      	ldr	r2, [pc, #256]	; (8003698 <goRight+0x168>)
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	3305      	adds	r3, #5
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4413      	add	r3, r2
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	493d      	ldr	r1, [pc, #244]	; (8003698 <goRight+0x168>)
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	3305      	adds	r3, #5
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	440b      	add	r3, r1
 80035ac:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 80035ae:	f7ff fde5 	bl	800317c <drawHeadSnake>
 80035b2:	e062      	b.n	800367a <goRight+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 80035b4:	4a38      	ldr	r2, [pc, #224]	; (8003698 <goRight+0x168>)
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	3305      	adds	r3, #5
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	4413      	add	r3, r2
 80035be:	1d3a      	adds	r2, r7, #4
 80035c0:	3304      	adds	r3, #4
 80035c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80035c6:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 80035ca:	4a33      	ldr	r2, [pc, #204]	; (8003698 <goRight+0x168>)
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	3305      	adds	r3, #5
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4413      	add	r3, r2
 80035d4:	3304      	adds	r3, #4
 80035d6:	f107 020c 	add.w	r2, r7, #12
 80035da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035de:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 80035e2:	f107 030c 	add.w	r3, r7, #12
 80035e6:	1d3a      	adds	r2, r7, #4
 80035e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035ec:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d123      	bne.n	800363e <goRight+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80035f6:	4a28      	ldr	r2, [pc, #160]	; (8003698 <goRight+0x168>)
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	3305      	adds	r3, #5
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	4413      	add	r3, r2
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	b298      	uxth	r0, r3
 8003604:	4a24      	ldr	r2, [pc, #144]	; (8003698 <goRight+0x168>)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	3305      	adds	r3, #5
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	4413      	add	r3, r2
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003612:	4a21      	ldr	r2, [pc, #132]	; (8003698 <goRight+0x168>)
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	3305      	adds	r3, #5
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	4413      	add	r3, r2
 800361c:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800361e:	b29b      	uxth	r3, r3
 8003620:	3309      	adds	r3, #9
 8003622:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003624:	4c1c      	ldr	r4, [pc, #112]	; (8003698 <goRight+0x168>)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	3305      	adds	r3, #5
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4423      	add	r3, r4
 800362e:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003630:	b29b      	uxth	r3, r3
 8003632:	3309      	adds	r3, #9
 8003634:	b29b      	uxth	r3, r3
 8003636:	2400      	movs	r4, #0
 8003638:	9400      	str	r4, [sp, #0]
 800363a:	f7fe fbd9 	bl	8001df0 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 800363e:	4b16      	ldr	r3, [pc, #88]	; (8003698 <goRight+0x168>)
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	3b01      	subs	r3, #1
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	429a      	cmp	r2, r3
 8003648:	d117      	bne.n	800367a <goRight+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 800364a:	4b13      	ldr	r3, [pc, #76]	; (8003698 <goRight+0x168>)
 800364c:	331c      	adds	r3, #28
 800364e:	1d3a      	adds	r2, r7, #4
 8003650:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003654:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	b298      	uxth	r0, r3
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	b299      	uxth	r1, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	b29b      	uxth	r3, r3
 8003664:	3309      	adds	r3, #9
 8003666:	b29a      	uxth	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	b29b      	uxth	r3, r3
 800366c:	3309      	adds	r3, #9
 800366e:	b29b      	uxth	r3, r3
 8003670:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003674:	9400      	str	r4, [sp, #0]
 8003676:	f7fe fbbb 	bl	8001df0 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	3301      	adds	r3, #1
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <goRight+0x168>)
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	429a      	cmp	r2, r3
 8003688:	f6ff af68 	blt.w	800355c <goRight+0x2c>
					}
				}
			}
			break;
 800368c:	e000      	b.n	8003690 <goRight+0x160>
		}
	}
 800368e:	bf00      	nop
}
 8003690:	bf00      	nop
 8003692:	371c      	adds	r7, #28
 8003694:	46bd      	mov	sp, r7
 8003696:	bd90      	pop	{r4, r7, pc}
 8003698:	200002b0 	.word	0x200002b0

0800369c <goUp>:

void goUp()
{
 800369c:	b590      	push	{r4, r7, lr}
 800369e:	b089      	sub	sp, #36	; 0x24
 80036a0:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 80036a2:	4b58      	ldr	r3, [pc, #352]	; (8003804 <goUp+0x168>)
 80036a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f040 80a7 	bne.w	80037fa <goUp+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 80036ac:	4b55      	ldr	r3, [pc, #340]	; (8003804 <goUp+0x168>)
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d103      	bne.n	80036bc <goUp+0x20>
		{
		case DOWN:
			(*snakeObject.GODOWN)();
 80036b4:	4b53      	ldr	r3, [pc, #332]	; (8003804 <goUp+0x168>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	4798      	blx	r3
			break;
 80036ba:	e09f      	b.n	80037fc <goUp+0x160>
		default:
			snakeObject.snakeDirectionHead = UP;
 80036bc:	4b51      	ldr	r3, [pc, #324]	; (8003804 <goUp+0x168>)
 80036be:	2203      	movs	r2, #3
 80036c0:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	e091      	b.n	80037ec <goUp+0x150>
			{
				if (i == 0)
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d128      	bne.n	8003720 <goUp+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 80036ce:	4a4d      	ldr	r2, [pc, #308]	; (8003804 <goUp+0x168>)
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	3305      	adds	r3, #5
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	4413      	add	r3, r2
 80036d8:	f107 020c 	add.w	r2, r7, #12
 80036dc:	3304      	adds	r3, #4
 80036de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80036e2:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x = snakeObject.infoSnake[i].x;
 80036e6:	4a47      	ldr	r2, [pc, #284]	; (8003804 <goUp+0x168>)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	3305      	adds	r3, #5
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4413      	add	r3, r2
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	4944      	ldr	r1, [pc, #272]	; (8003804 <goUp+0x168>)
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	3305      	adds	r3, #5
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	440b      	add	r3, r1
 80036fc:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y -= snakeStep;
 80036fe:	4a41      	ldr	r2, [pc, #260]	; (8003804 <goUp+0x168>)
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	3305      	adds	r3, #5
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4413      	add	r3, r2
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f1a3 020a 	sub.w	r2, r3, #10
 800370e:	493d      	ldr	r1, [pc, #244]	; (8003804 <goUp+0x168>)
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	3305      	adds	r3, #5
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	440b      	add	r3, r1
 8003718:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 800371a:	f7ff fd2f 	bl	800317c <drawHeadSnake>
 800371e:	e062      	b.n	80037e6 <goUp+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 8003720:	4a38      	ldr	r2, [pc, #224]	; (8003804 <goUp+0x168>)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	3305      	adds	r3, #5
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4413      	add	r3, r2
 800372a:	1d3a      	adds	r2, r7, #4
 800372c:	3304      	adds	r3, #4
 800372e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003732:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 8003736:	4a33      	ldr	r2, [pc, #204]	; (8003804 <goUp+0x168>)
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	3305      	adds	r3, #5
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	4413      	add	r3, r2
 8003740:	3304      	adds	r3, #4
 8003742:	f107 020c 	add.w	r2, r7, #12
 8003746:	e892 0003 	ldmia.w	r2, {r0, r1}
 800374a:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 800374e:	f107 030c 	add.w	r3, r7, #12
 8003752:	1d3a      	adds	r2, r7, #4
 8003754:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003758:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d123      	bne.n	80037aa <goUp+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003762:	4a28      	ldr	r2, [pc, #160]	; (8003804 <goUp+0x168>)
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	3305      	adds	r3, #5
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	4413      	add	r3, r2
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	b298      	uxth	r0, r3
 8003770:	4a24      	ldr	r2, [pc, #144]	; (8003804 <goUp+0x168>)
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	3305      	adds	r3, #5
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	4413      	add	r3, r2
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 800377e:	4a21      	ldr	r2, [pc, #132]	; (8003804 <goUp+0x168>)
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	3305      	adds	r3, #5
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	4413      	add	r3, r2
 8003788:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800378a:	b29b      	uxth	r3, r3
 800378c:	3309      	adds	r3, #9
 800378e:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8003790:	4c1c      	ldr	r4, [pc, #112]	; (8003804 <goUp+0x168>)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	3305      	adds	r3, #5
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4423      	add	r3, r4
 800379a:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 800379c:	b29b      	uxth	r3, r3
 800379e:	3309      	adds	r3, #9
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2400      	movs	r4, #0
 80037a4:	9400      	str	r4, [sp, #0]
 80037a6:	f7fe fb23 	bl	8001df0 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 80037aa:	4b16      	ldr	r3, [pc, #88]	; (8003804 <goUp+0x168>)
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	3b01      	subs	r3, #1
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d117      	bne.n	80037e6 <goUp+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 80037b6:	4b13      	ldr	r3, [pc, #76]	; (8003804 <goUp+0x168>)
 80037b8:	331c      	adds	r3, #28
 80037ba:	1d3a      	adds	r2, r7, #4
 80037bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037c0:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	b298      	uxth	r0, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	b299      	uxth	r1, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	3309      	adds	r3, #9
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3309      	adds	r3, #9
 80037da:	b29b      	uxth	r3, r3
 80037dc:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80037e0:	9400      	str	r4, [sp, #0]
 80037e2:	f7fe fb05 	bl	8001df0 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	3301      	adds	r3, #1
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <goUp+0x168>)
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	f6ff af68 	blt.w	80036c8 <goUp+0x2c>
					}
				}
			}
			break;
 80037f8:	e000      	b.n	80037fc <goUp+0x160>
		}
	}
 80037fa:	bf00      	nop
}
 80037fc:	bf00      	nop
 80037fe:	371c      	adds	r7, #28
 8003800:	46bd      	mov	sp, r7
 8003802:	bd90      	pop	{r4, r7, pc}
 8003804:	200002b0 	.word	0x200002b0

08003808 <goDown>:

void goDown()
{
 8003808:	b590      	push	{r4, r7, lr}
 800380a:	b089      	sub	sp, #36	; 0x24
 800380c:	af02      	add	r7, sp, #8
	if (snakeObject.stopSnakeFlag == 0)
 800380e:	4b58      	ldr	r3, [pc, #352]	; (8003970 <goDown+0x168>)
 8003810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003812:	2b00      	cmp	r3, #0
 8003814:	f040 80a7 	bne.w	8003966 <goDown+0x15e>
	{
		switch (snakeObject.snakeDirectionHead)
 8003818:	4b55      	ldr	r3, [pc, #340]	; (8003970 <goDown+0x168>)
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	2b03      	cmp	r3, #3
 800381e:	d103      	bne.n	8003828 <goDown+0x20>
		{
		case UP:
			(*snakeObject.GOUP)();
 8003820:	4b53      	ldr	r3, [pc, #332]	; (8003970 <goDown+0x168>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	4798      	blx	r3
			break;
 8003826:	e09f      	b.n	8003968 <goDown+0x160>
		default:
			snakeObject.snakeDirectionHead = DOWN;
 8003828:	4b51      	ldr	r3, [pc, #324]	; (8003970 <goDown+0x168>)
 800382a:	2202      	movs	r2, #2
 800382c:	619a      	str	r2, [r3, #24]
			infoXYSnake tempSnake1;
			infoXYSnake tempSnake2;
			for (int i = 0; i < snakeObject.snakeLength; i++)
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	e091      	b.n	8003958 <goDown+0x150>
			{
				if (i == 0)
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d128      	bne.n	800388c <goDown+0x84>
				{
					tempSnake1 = snakeObject.infoSnake[i];
 800383a:	4a4d      	ldr	r2, [pc, #308]	; (8003970 <goDown+0x168>)
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	3305      	adds	r3, #5
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	4413      	add	r3, r2
 8003844:	f107 020c 	add.w	r2, r7, #12
 8003848:	3304      	adds	r3, #4
 800384a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800384e:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i].x = snakeObject.infoSnake[i].x;
 8003852:	4a47      	ldr	r2, [pc, #284]	; (8003970 <goDown+0x168>)
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	3305      	adds	r3, #5
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	4413      	add	r3, r2
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	4944      	ldr	r1, [pc, #272]	; (8003970 <goDown+0x168>)
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	3305      	adds	r3, #5
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	440b      	add	r3, r1
 8003868:	605a      	str	r2, [r3, #4]
					snakeObject.infoSnake[i].y += snakeStep;
 800386a:	4a41      	ldr	r2, [pc, #260]	; (8003970 <goDown+0x168>)
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	3305      	adds	r3, #5
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	4413      	add	r3, r2
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f103 020a 	add.w	r2, r3, #10
 800387a:	493d      	ldr	r1, [pc, #244]	; (8003970 <goDown+0x168>)
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	3305      	adds	r3, #5
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	440b      	add	r3, r1
 8003884:	609a      	str	r2, [r3, #8]
					drawHeadSnake();
 8003886:	f7ff fc79 	bl	800317c <drawHeadSnake>
 800388a:	e062      	b.n	8003952 <goDown+0x14a>
				}
				else
				{
					tempSnake2 = snakeObject.infoSnake[i];
 800388c:	4a38      	ldr	r2, [pc, #224]	; (8003970 <goDown+0x168>)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	3305      	adds	r3, #5
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	4413      	add	r3, r2
 8003896:	1d3a      	adds	r2, r7, #4
 8003898:	3304      	adds	r3, #4
 800389a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800389e:	e882 0003 	stmia.w	r2, {r0, r1}
					snakeObject.infoSnake[i] = tempSnake1;
 80038a2:	4a33      	ldr	r2, [pc, #204]	; (8003970 <goDown+0x168>)
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	3305      	adds	r3, #5
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	4413      	add	r3, r2
 80038ac:	3304      	adds	r3, #4
 80038ae:	f107 020c 	add.w	r2, r7, #12
 80038b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038b6:	e883 0003 	stmia.w	r3, {r0, r1}
					tempSnake1 = tempSnake2;
 80038ba:	f107 030c 	add.w	r3, r7, #12
 80038be:	1d3a      	adds	r2, r7, #4
 80038c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038c4:	e883 0003 	stmia.w	r3, {r0, r1}
					if (i == 1)
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d123      	bne.n	8003916 <goDown+0x10e>
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80038ce:	4a28      	ldr	r2, [pc, #160]	; (8003970 <goDown+0x168>)
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	3305      	adds	r3, #5
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	4413      	add	r3, r2
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	b298      	uxth	r0, r3
 80038dc:	4a24      	ldr	r2, [pc, #144]	; (8003970 <goDown+0x168>)
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	3305      	adds	r3, #5
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	4413      	add	r3, r2
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	b299      	uxth	r1, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 80038ea:	4a21      	ldr	r2, [pc, #132]	; (8003970 <goDown+0x168>)
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	3305      	adds	r3, #5
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	4413      	add	r3, r2
 80038f4:	685b      	ldr	r3, [r3, #4]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3309      	adds	r3, #9
 80038fa:	b29a      	uxth	r2, r3
								 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 80038fc:	4c1c      	ldr	r4, [pc, #112]	; (8003970 <goDown+0x168>)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	3305      	adds	r3, #5
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	4423      	add	r3, r4
 8003906:	689b      	ldr	r3, [r3, #8]
						lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8003908:	b29b      	uxth	r3, r3
 800390a:	3309      	adds	r3, #9
 800390c:	b29b      	uxth	r3, r3
 800390e:	2400      	movs	r4, #0
 8003910:	9400      	str	r4, [sp, #0]
 8003912:	f7fe fa6d 	bl	8001df0 <lcd_Fill>
					if (i == snakeObject.snakeLength - 1)
 8003916:	4b16      	ldr	r3, [pc, #88]	; (8003970 <goDown+0x168>)
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	3b01      	subs	r3, #1
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	429a      	cmp	r2, r3
 8003920:	d117      	bne.n	8003952 <goDown+0x14a>
					{
						snakeObject.infoTempSnakeTail = tempSnake2;
 8003922:	4b13      	ldr	r3, [pc, #76]	; (8003970 <goDown+0x168>)
 8003924:	331c      	adds	r3, #28
 8003926:	1d3a      	adds	r2, r7, #4
 8003928:	e892 0003 	ldmia.w	r2, {r0, r1}
 800392c:	e883 0003 	stmia.w	r3, {r0, r1}
						lcd_Fill(tempSnake2.x, tempSnake2.y, tempSnake2.x + snakeWidth, tempSnake2.y + snakeWidth, WHITE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	b298      	uxth	r0, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	b299      	uxth	r1, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	b29b      	uxth	r3, r3
 800393c:	3309      	adds	r3, #9
 800393e:	b29a      	uxth	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	b29b      	uxth	r3, r3
 8003944:	3309      	adds	r3, #9
 8003946:	b29b      	uxth	r3, r3
 8003948:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800394c:	9400      	str	r4, [sp, #0]
 800394e:	f7fe fa4f 	bl	8001df0 <lcd_Fill>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	3301      	adds	r3, #1
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	4b05      	ldr	r3, [pc, #20]	; (8003970 <goDown+0x168>)
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	429a      	cmp	r2, r3
 8003960:	f6ff af68 	blt.w	8003834 <goDown+0x2c>
					}
				}
			}
			break;
 8003964:	e000      	b.n	8003968 <goDown+0x160>
		}
	}
 8003966:	bf00      	nop
}
 8003968:	bf00      	nop
 800396a:	371c      	adds	r7, #28
 800396c:	46bd      	mov	sp, r7
 800396e:	bd90      	pop	{r4, r7, pc}
 8003970:	200002b0 	.word	0x200002b0

08003974 <resumeGame>:

void resumeGame()
{
 8003974:	b590      	push	{r4, r7, lr}
 8003976:	b087      	sub	sp, #28
 8003978:	af02      	add	r7, sp, #8
	uartSendContinuePlay();
 800397a:	f002 ff4d 	bl	8006818 <uartSendContinuePlay>
	lcd_Fill(0, wallY[0] + wallSize, 240, 320, WHITE);
 800397e:	4b75      	ldr	r3, [pc, #468]	; (8003b54 <resumeGame+0x1e0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	b29a      	uxth	r2, r3
 8003984:	4b74      	ldr	r3, [pc, #464]	; (8003b58 <resumeGame+0x1e4>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	b29b      	uxth	r3, r3
 800398a:	4413      	add	r3, r2
 800398c:	b299      	uxth	r1, r3
 800398e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003998:	22f0      	movs	r2, #240	; 0xf0
 800399a:	2000      	movs	r0, #0
 800399c:	f7fe fa28 	bl	8001df0 <lcd_Fill>
	for (int i = 0; i < snakeObject.snakeLength; i++)
 80039a0:	2300      	movs	r3, #0
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	e02c      	b.n	8003a00 <resumeGame+0x8c>
	{
		if (i == 0)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d102      	bne.n	80039b2 <resumeGame+0x3e>
			drawHeadSnake();
 80039ac:	f7ff fbe6 	bl	800317c <drawHeadSnake>
 80039b0:	e023      	b.n	80039fa <resumeGame+0x86>
		else
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80039b2:	4a6a      	ldr	r2, [pc, #424]	; (8003b5c <resumeGame+0x1e8>)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	3305      	adds	r3, #5
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4413      	add	r3, r2
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	b298      	uxth	r0, r3
 80039c0:	4a66      	ldr	r2, [pc, #408]	; (8003b5c <resumeGame+0x1e8>)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	3305      	adds	r3, #5
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4413      	add	r3, r2
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	b299      	uxth	r1, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 80039ce:	4a63      	ldr	r2, [pc, #396]	; (8003b5c <resumeGame+0x1e8>)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	3305      	adds	r3, #5
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	4413      	add	r3, r2
 80039d8:	685b      	ldr	r3, [r3, #4]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3309      	adds	r3, #9
 80039de:	b29a      	uxth	r2, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 80039e0:	4c5e      	ldr	r4, [pc, #376]	; (8003b5c <resumeGame+0x1e8>)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	3305      	adds	r3, #5
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	4423      	add	r3, r4
 80039ea:	689b      	ldr	r3, [r3, #8]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3309      	adds	r3, #9
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2400      	movs	r4, #0
 80039f4:	9400      	str	r4, [sp, #0]
 80039f6:	f7fe f9fb 	bl	8001df0 <lcd_Fill>
	for (int i = 0; i < snakeObject.snakeLength; i++)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	3301      	adds	r3, #1
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	4b56      	ldr	r3, [pc, #344]	; (8003b5c <resumeGame+0x1e8>)
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	dbcd      	blt.n	80039a6 <resumeGame+0x32>
	}
	// print wall again
	for (int i = 0; i < wallObject.amountWallElement; i++)
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	e07e      	b.n	8003b0e <resumeGame+0x19a>
	{
		int X = wallObject.infoWall[i].x;
 8003a10:	4953      	ldr	r1, [pc, #332]	; (8003b60 <resumeGame+0x1ec>)
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	4613      	mov	r3, r2
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	607b      	str	r3, [r7, #4]
		int Y = wallObject.infoWall[i].y;
 8003a22:	494f      	ldr	r1, [pc, #316]	; (8003b60 <resumeGame+0x1ec>)
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	4613      	mov	r3, r2
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	440b      	add	r3, r1
 8003a30:	3304      	adds	r3, #4
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	603b      	str	r3, [r7, #0]
		lcd_Fill(X, Y, X + snakeWidth, Y + snakeWidth, BROWN);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	b298      	uxth	r0, r3
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	b299      	uxth	r1, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	3309      	adds	r3, #9
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3309      	adds	r3, #9
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003a52:	9400      	str	r4, [sp, #0]
 8003a54:	f7fe f9cc 	bl	8001df0 <lcd_Fill>
		if (wallObject.infoWall[i].vertical == 1)
 8003a58:	4941      	ldr	r1, [pc, #260]	; (8003b60 <resumeGame+0x1ec>)
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	3308      	adds	r3, #8
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d126      	bne.n	8003abc <resumeGame+0x148>
		{
			lcd_Fill(X, Y + snakeStep, X + snakeWidth, Y + snakeStep + snakeWidth, BROWN);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	b298      	uxth	r0, r3
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	330a      	adds	r3, #10
 8003a78:	b299      	uxth	r1, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3309      	adds	r3, #9
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3313      	adds	r3, #19
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003a8e:	9400      	str	r4, [sp, #0]
 8003a90:	f7fe f9ae 	bl	8001df0 <lcd_Fill>
			lcd_Fill(X, Y - snakeStep, X + snakeWidth, Y - snakeStep + snakeWidth, BROWN);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	b298      	uxth	r0, r3
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b0a      	subs	r3, #10
 8003a9e:	b299      	uxth	r1, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3309      	adds	r3, #9
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003ab4:	9400      	str	r4, [sp, #0]
 8003ab6:	f7fe f99b 	bl	8001df0 <lcd_Fill>
 8003aba:	e025      	b.n	8003b08 <resumeGame+0x194>
		}
		else
		{
			lcd_Fill(X + snakeStep, Y, X + snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	330a      	adds	r3, #10
 8003ac2:	b298      	uxth	r0, r3
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	b299      	uxth	r1, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3313      	adds	r3, #19
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3309      	adds	r3, #9
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003adc:	9400      	str	r4, [sp, #0]
 8003ade:	f7fe f987 	bl	8001df0 <lcd_Fill>
			lcd_Fill(X - snakeStep, Y, X - snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	3b0a      	subs	r3, #10
 8003ae8:	b298      	uxth	r0, r3
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	b299      	uxth	r1, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3309      	adds	r3, #9
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8003b02:	9400      	str	r4, [sp, #0]
 8003b04:	f7fe f974 	bl	8001df0 <lcd_Fill>
	for (int i = 0; i < wallObject.amountWallElement; i++)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	4b14      	ldr	r3, [pc, #80]	; (8003b60 <resumeGame+0x1ec>)
 8003b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b14:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	f6ff af78 	blt.w	8003a10 <resumeGame+0x9c>
		}
	}
	lcd_Fill(xFruit, yFruit, xFruit + snakeWidth, yFruit + snakeWidth, DARKBLUE);
 8003b20:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <resumeGame+0x1f0>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	b298      	uxth	r0, r3
 8003b26:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <resumeGame+0x1f4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	b299      	uxth	r1, r3
 8003b2c:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <resumeGame+0x1f0>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3309      	adds	r3, #9
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <resumeGame+0x1f4>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3309      	adds	r3, #9
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	f240 14cf 	movw	r4, #463	; 0x1cf
 8003b44:	9400      	str	r4, [sp, #0]
 8003b46:	f7fe f953 	bl	8001df0 <lcd_Fill>
}
 8003b4a:	bf00      	nop
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd90      	pop	{r4, r7, pc}
 8003b52:	bf00      	nop
 8003b54:	20000028 	.word	0x20000028
 8003b58:	20000038 	.word	0x20000038
 8003b5c:	200002b0 	.word	0x200002b0
 8003b60:	2000127c 	.word	0x2000127c
 8003b64:	20000094 	.word	0x20000094
 8003b68:	20000098 	.word	0x20000098

08003b6c <checkOutOfValidRange>:

int checkOutOfValidRange()
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
	if ((snakeObject.infoSnake[0].x < 0) || (snakeObject.infoSnake[0].x > 230) || (snakeObject.infoSnake[0].y < 70) || (snakeObject.infoSnake[0].y > 312))
 8003b70:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <checkOutOfValidRange+0x38>)
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	db0c      	blt.n	8003b92 <checkOutOfValidRange+0x26>
 8003b78:	4b0a      	ldr	r3, [pc, #40]	; (8003ba4 <checkOutOfValidRange+0x38>)
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	2be6      	cmp	r3, #230	; 0xe6
 8003b7e:	dc08      	bgt.n	8003b92 <checkOutOfValidRange+0x26>
 8003b80:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <checkOutOfValidRange+0x38>)
 8003b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b84:	2b45      	cmp	r3, #69	; 0x45
 8003b86:	dd04      	ble.n	8003b92 <checkOutOfValidRange+0x26>
 8003b88:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <checkOutOfValidRange+0x38>)
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8003b90:	dd01      	ble.n	8003b96 <checkOutOfValidRange+0x2a>
		return 1;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <checkOutOfValidRange+0x2c>
	return 0;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	200002b0 	.word	0x200002b0

08003ba8 <checkEatBody>:

int checkEatBody()
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
	for (int i = 1; i < snakeObject.snakeLength; i++)
 8003bae:	2301      	movs	r3, #1
 8003bb0:	607b      	str	r3, [r7, #4]
 8003bb2:	e018      	b.n	8003be6 <checkEatBody+0x3e>
		if (snakeObject.infoSnake[0].x == snakeObject.infoSnake[i].x && snakeObject.infoSnake[0].y == snakeObject.infoSnake[i].y)
 8003bb4:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <checkEatBody+0x58>)
 8003bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb8:	4911      	ldr	r1, [pc, #68]	; (8003c00 <checkEatBody+0x58>)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	3305      	adds	r3, #5
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	440b      	add	r3, r1
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d10b      	bne.n	8003be0 <checkEatBody+0x38>
 8003bc8:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <checkEatBody+0x58>)
 8003bca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bcc:	490c      	ldr	r1, [pc, #48]	; (8003c00 <checkEatBody+0x58>)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3305      	adds	r3, #5
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	440b      	add	r3, r1
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d101      	bne.n	8003be0 <checkEatBody+0x38>
			return 1;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e008      	b.n	8003bf2 <checkEatBody+0x4a>
	for (int i = 1; i < snakeObject.snakeLength; i++)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3301      	adds	r3, #1
 8003be4:	607b      	str	r3, [r7, #4]
 8003be6:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <checkEatBody+0x58>)
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	dbe1      	blt.n	8003bb4 <checkEatBody+0xc>
	return 0;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	200002b0 	.word	0x200002b0

08003c04 <checkEatFruit>:

int checkEatFruit()
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
	if (snakeObject.infoSnake[0].x == xFruit && snakeObject.infoSnake[0].y == yFruit)
 8003c08:	4b09      	ldr	r3, [pc, #36]	; (8003c30 <checkEatFruit+0x2c>)
 8003c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0c:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <checkEatFruit+0x30>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d107      	bne.n	8003c24 <checkEatFruit+0x20>
 8003c14:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <checkEatFruit+0x2c>)
 8003c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c18:	4b07      	ldr	r3, [pc, #28]	; (8003c38 <checkEatFruit+0x34>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d101      	bne.n	8003c24 <checkEatFruit+0x20>
		return 1;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e000      	b.n	8003c26 <checkEatFruit+0x22>
	return 0;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	200002b0 	.word	0x200002b0
 8003c34:	20000094 	.word	0x20000094
 8003c38:	20000098 	.word	0x20000098

08003c3c <checkHitWall>:

int checkHitWall()
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
	for (int i = 0; i < wallObject.amountWallElement; i++)
 8003c42:	2300      	movs	r3, #0
 8003c44:	607b      	str	r3, [r7, #4]
 8003c46:	e079      	b.n	8003d3c <checkHitWall+0x100>
	{
		if (wallObject.infoWall[i].vertical == 1)
 8003c48:	4944      	ldr	r1, [pc, #272]	; (8003d5c <checkHitWall+0x120>)
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	3308      	adds	r3, #8
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d136      	bne.n	8003ccc <checkHitWall+0x90>
		{
			if ((snakeObject.infoSnake[0].y == wallObject.infoWall[i].y - snakeStep ||
 8003c5e:	4b40      	ldr	r3, [pc, #256]	; (8003d60 <checkHitWall+0x124>)
 8003c60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c62:	483e      	ldr	r0, [pc, #248]	; (8003d5c <checkHitWall+0x120>)
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4403      	add	r3, r0
 8003c70:	3304      	adds	r3, #4
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3b0a      	subs	r3, #10
 8003c76:	4299      	cmp	r1, r3
 8003c78:	d01a      	beq.n	8003cb0 <checkHitWall+0x74>
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y + snakeStep ||
 8003c7a:	4b39      	ldr	r3, [pc, #228]	; (8003d60 <checkHitWall+0x124>)
 8003c7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c7e:	4837      	ldr	r0, [pc, #220]	; (8003d5c <checkHitWall+0x120>)
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	4413      	add	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4403      	add	r3, r0
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	330a      	adds	r3, #10
			if ((snakeObject.infoSnake[0].y == wallObject.infoWall[i].y - snakeStep ||
 8003c92:	4299      	cmp	r1, r3
 8003c94:	d00c      	beq.n	8003cb0 <checkHitWall+0x74>
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y) &&
 8003c96:	4b32      	ldr	r3, [pc, #200]	; (8003d60 <checkHitWall+0x124>)
 8003c98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c9a:	4830      	ldr	r0, [pc, #192]	; (8003d5c <checkHitWall+0x120>)
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4403      	add	r3, r0
 8003ca8:	3304      	adds	r3, #4
 8003caa:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y + snakeStep ||
 8003cac:	4299      	cmp	r1, r3
 8003cae:	d142      	bne.n	8003d36 <checkHitWall+0xfa>
				(snakeObject.infoSnake[0].x == wallObject.infoWall[i].x))
 8003cb0:	4b2b      	ldr	r3, [pc, #172]	; (8003d60 <checkHitWall+0x124>)
 8003cb2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cb4:	4829      	ldr	r0, [pc, #164]	; (8003d5c <checkHitWall+0x120>)
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4403      	add	r3, r0
 8003cc2:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].y == wallObject.infoWall[i].y) &&
 8003cc4:	4299      	cmp	r1, r3
 8003cc6:	d136      	bne.n	8003d36 <checkHitWall+0xfa>
			{
				return 1;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e041      	b.n	8003d50 <checkHitWall+0x114>
			}
		}
		else
		{
			if ((snakeObject.infoSnake[0].x == wallObject.infoWall[i].x + snakeStep ||
 8003ccc:	4b24      	ldr	r3, [pc, #144]	; (8003d60 <checkHitWall+0x124>)
 8003cce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cd0:	4822      	ldr	r0, [pc, #136]	; (8003d5c <checkHitWall+0x120>)
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4403      	add	r3, r0
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	330a      	adds	r3, #10
 8003ce2:	4299      	cmp	r1, r3
 8003ce4:	d018      	beq.n	8003d18 <checkHitWall+0xdc>
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x - snakeStep ||
 8003ce6:	4b1e      	ldr	r3, [pc, #120]	; (8003d60 <checkHitWall+0x124>)
 8003ce8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cea:	481c      	ldr	r0, [pc, #112]	; (8003d5c <checkHitWall+0x120>)
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4403      	add	r3, r0
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3b0a      	subs	r3, #10
			if ((snakeObject.infoSnake[0].x == wallObject.infoWall[i].x + snakeStep ||
 8003cfc:	4299      	cmp	r1, r3
 8003cfe:	d00b      	beq.n	8003d18 <checkHitWall+0xdc>
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x) &&
 8003d00:	4b17      	ldr	r3, [pc, #92]	; (8003d60 <checkHitWall+0x124>)
 8003d02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d04:	4815      	ldr	r0, [pc, #84]	; (8003d5c <checkHitWall+0x120>)
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	4413      	add	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4403      	add	r3, r0
 8003d12:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x - snakeStep ||
 8003d14:	4299      	cmp	r1, r3
 8003d16:	d10e      	bne.n	8003d36 <checkHitWall+0xfa>
				(snakeObject.infoSnake[0].y == wallObject.infoWall[i].y))
 8003d18:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <checkHitWall+0x124>)
 8003d1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d1c:	480f      	ldr	r0, [pc, #60]	; (8003d5c <checkHitWall+0x120>)
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4403      	add	r3, r0
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	681b      	ldr	r3, [r3, #0]
				 snakeObject.infoSnake[0].x == wallObject.infoWall[i].x) &&
 8003d2e:	4299      	cmp	r1, r3
 8003d30:	d101      	bne.n	8003d36 <checkHitWall+0xfa>
			{
				return 1;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e00c      	b.n	8003d50 <checkHitWall+0x114>
	for (int i = 0; i < wallObject.amountWallElement; i++)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	607b      	str	r3, [r7, #4]
 8003d3c:	4b07      	ldr	r3, [pc, #28]	; (8003d5c <checkHitWall+0x120>)
 8003d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d42:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	f6ff af7d 	blt.w	8003c48 <checkHitWall+0xc>
			}
		}
	}
	return 0;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	2000127c 	.word	0x2000127c
 8003d60:	200002b0 	.word	0x200002b0

08003d64 <checkHead>:
void checkHead()
{
 8003d64:	b590      	push	{r4, r7, lr}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af02      	add	r7, sp, #8
	if (checkOutOfValidRange())
 8003d6a:	f7ff feff 	bl	8003b6c <checkOutOfValidRange>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <checkHead+0x18>
	{
		// showGameOver;
		initOverMode(3);
 8003d74:	2003      	movs	r0, #3
 8003d76:	f7fd fd77 	bl	8001868 <initOverMode>
		//		lcd_ShowStr(10, 20, "NGU", WHITE, RED, 40, 0);
		//		lcd_ShowStr (20 , 30 , " Test lcd screen ", WHITE , RED , 24 ,
		//		0) ;
		return;
 8003d7a:	e065      	b.n	8003e48 <checkHead+0xe4>
	}
	if (checkEatBody())
 8003d7c:	f7ff ff14 	bl	8003ba8 <checkEatBody>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <checkHead+0x2a>
	{
		// ShowGameover
		initOverMode(2);
 8003d86:	2002      	movs	r0, #2
 8003d88:	f7fd fd6e 	bl	8001868 <initOverMode>
		//		lcd_ShowStr(10, 20, "NGU", WHITE, RED, 40, 0);
		//		lcd_ShowStr (20 , 30 , " Test lcd screen ", WHITE , RED , 24 ,
		//		0) ;
		return;
 8003d8c:	e05c      	b.n	8003e48 <checkHead+0xe4>
	}
	if (checkHitWall())
 8003d8e:	f7ff ff55 	bl	8003c3c <checkHitWall>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <checkHead+0x3c>
	{
		// showGameover
		initOverMode(0);
 8003d98:	2000      	movs	r0, #0
 8003d9a:	f7fd fd65 	bl	8001868 <initOverMode>
		//		lcd_ShowStr(10, 20, "NGU", WHITE, RED, 40, 0);
		//		lcd_ShowStr (20 , 30 , " Test lcd screen ", WHITE , RED , 24 ,
		//		0) ;
		return;
 8003d9e:	e053      	b.n	8003e48 <checkHead+0xe4>
	}
	if (checkEatFruit())
 8003da0:	f7ff ff30 	bl	8003c04 <checkEatFruit>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d04e      	beq.n	8003e48 <checkHead+0xe4>
	{
		xFruit = INT_MIN;
 8003daa:	4b29      	ldr	r3, [pc, #164]	; (8003e50 <checkHead+0xec>)
 8003dac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003db0:	601a      	str	r2, [r3, #0]
		yFruit = INT_MIN;
 8003db2:	4b28      	ldr	r3, [pc, #160]	; (8003e54 <checkHead+0xf0>)
 8003db4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003db8:	601a      	str	r2, [r3, #0]
		snakeObject.snakeLength += 1;
 8003dba:	4b27      	ldr	r3, [pc, #156]	; (8003e58 <checkHead+0xf4>)
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	4a25      	ldr	r2, [pc, #148]	; (8003e58 <checkHead+0xf4>)
 8003dc2:	6253      	str	r3, [r2, #36]	; 0x24
		snakeObject.infoSnake[snakeObject.snakeLength - 1].x = snakeObject.infoTempSnakeTail.x;
 8003dc4:	4b24      	ldr	r3, [pc, #144]	; (8003e58 <checkHead+0xf4>)
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	4a23      	ldr	r2, [pc, #140]	; (8003e58 <checkHead+0xf4>)
 8003dcc:	69d2      	ldr	r2, [r2, #28]
 8003dce:	4922      	ldr	r1, [pc, #136]	; (8003e58 <checkHead+0xf4>)
 8003dd0:	3305      	adds	r3, #5
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	440b      	add	r3, r1
 8003dd6:	605a      	str	r2, [r3, #4]
		snakeObject.infoSnake[snakeObject.snakeLength - 1].y = snakeObject.infoTempSnakeTail.y;
 8003dd8:	4b1f      	ldr	r3, [pc, #124]	; (8003e58 <checkHead+0xf4>)
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	4a1e      	ldr	r2, [pc, #120]	; (8003e58 <checkHead+0xf4>)
 8003de0:	6a12      	ldr	r2, [r2, #32]
 8003de2:	491d      	ldr	r1, [pc, #116]	; (8003e58 <checkHead+0xf4>)
 8003de4:	3305      	adds	r3, #5
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	440b      	add	r3, r1
 8003dea:	609a      	str	r2, [r3, #8]
		int x = snakeObject.infoSnake[snakeObject.snakeLength - 1].x;
 8003dec:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <checkHead+0xf4>)
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	3b01      	subs	r3, #1
 8003df2:	4a19      	ldr	r2, [pc, #100]	; (8003e58 <checkHead+0xf4>)
 8003df4:	3305      	adds	r3, #5
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	4413      	add	r3, r2
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	607b      	str	r3, [r7, #4]
		int y = snakeObject.infoSnake[snakeObject.snakeLength - 1].y;
 8003dfe:	4b16      	ldr	r3, [pc, #88]	; (8003e58 <checkHead+0xf4>)
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	3b01      	subs	r3, #1
 8003e04:	4a14      	ldr	r2, [pc, #80]	; (8003e58 <checkHead+0xf4>)
 8003e06:	3305      	adds	r3, #5
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	4413      	add	r3, r2
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	603b      	str	r3, [r7, #0]
		lcd_Fill(x, y, x + snakeWidth, y + snakeWidth, BLACK);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	b298      	uxth	r0, r3
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	b299      	uxth	r1, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3309      	adds	r3, #9
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3309      	adds	r3, #9
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	2400      	movs	r4, #0
 8003e2a:	9400      	str	r4, [sp, #0]
 8003e2c:	f7fd ffe0 	bl	8001df0 <lcd_Fill>
		flagEat = 1;
 8003e30:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <checkHead+0xf8>)
 8003e32:	2201      	movs	r2, #1
 8003e34:	601a      	str	r2, [r3, #0]

		SCORE++;
 8003e36:	4b0a      	ldr	r3, [pc, #40]	; (8003e60 <checkHead+0xfc>)
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <checkHead+0xfc>)
 8003e40:	801a      	strh	r2, [r3, #0]
		printScore();
 8003e42:	f7ff f925 	bl	8003090 <printScore>
		return;
 8003e46:	bf00      	nop
	}
}
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd90      	pop	{r4, r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000094 	.word	0x20000094
 8003e54:	20000098 	.word	0x20000098
 8003e58:	200002b0 	.word	0x200002b0
 8003e5c:	2000009c 	.word	0x2000009c
 8003e60:	2000025a 	.word	0x2000025a

08003e64 <move>:

void move()
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
	switch (snakeObject.snakeDirectionHead)
 8003e68:	4b11      	ldr	r3, [pc, #68]	; (8003eb0 <move+0x4c>)
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d81b      	bhi.n	8003ea8 <move+0x44>
 8003e70:	a201      	add	r2, pc, #4	; (adr r2, 8003e78 <move+0x14>)
 8003e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e76:	bf00      	nop
 8003e78:	08003e99 	.word	0x08003e99
 8003e7c:	08003ea1 	.word	0x08003ea1
 8003e80:	08003e89 	.word	0x08003e89
 8003e84:	08003e91 	.word	0x08003e91
	{
	case DOWN:
		(*snakeObject.GODOWN)();
 8003e88:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <move+0x4c>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4798      	blx	r3
		break;
 8003e8e:	e00c      	b.n	8003eaa <move+0x46>
	case UP:
		(*snakeObject.GOUP)();
 8003e90:	4b07      	ldr	r3, [pc, #28]	; (8003eb0 <move+0x4c>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	4798      	blx	r3
		break;
 8003e96:	e008      	b.n	8003eaa <move+0x46>
	case RIGHT:
		(*snakeObject.GORIGHT)();
 8003e98:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <move+0x4c>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	4798      	blx	r3
		break;
 8003e9e:	e004      	b.n	8003eaa <move+0x46>
	case LEFT:
		(*snakeObject.GOLEFT)();
 8003ea0:	4b03      	ldr	r3, [pc, #12]	; (8003eb0 <move+0x4c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4798      	blx	r3
		break;
 8003ea6:	e000      	b.n	8003eaa <move+0x46>
	default:
		break;
 8003ea8:	bf00      	nop
	}
}
 8003eaa:	bf00      	nop
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	200002b0 	.word	0x200002b0

08003eb4 <wallInit>:

void wallInit()
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_LENGTH; i++)
 8003eba:	2300      	movs	r3, #0
 8003ebc:	607b      	str	r3, [r7, #4]
 8003ebe:	e01f      	b.n	8003f00 <wallInit+0x4c>
	{
		wallObject.infoWall[i].x = 0;
 8003ec0:	491f      	ldr	r1, [pc, #124]	; (8003f40 <wallInit+0x8c>)
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	4413      	add	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
		wallObject.infoWall[i].y = 0;
 8003ed2:	491b      	ldr	r1, [pc, #108]	; (8003f40 <wallInit+0x8c>)
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	4413      	add	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
		wallObject.infoWall[i].vertical = 0;
 8003ee6:	4916      	ldr	r1, [pc, #88]	; (8003f40 <wallInit+0x8c>)
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	4613      	mov	r3, r2
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MAX_LENGTH; i++)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3301      	adds	r3, #1
 8003efe:	607b      	str	r3, [r7, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003f06:	dbdb      	blt.n	8003ec0 <wallInit+0xc>
	}
	wallObject.amountWallElement = 0;
 8003f08:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <wallInit+0x8c>)
 8003f0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f0e:	461a      	mov	r2, r3
 8003f10:	2300      	movs	r3, #0
 8003f12:	f8c2 3770 	str.w	r3, [r2, #1904]	; 0x770
	wallObject.vertical = 1;
 8003f16:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <wallInit+0x8c>)
 8003f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	2301      	movs	r3, #1
 8003f20:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	wallObject.stopGenerateWallFlag = 0;
 8003f24:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <wallInit+0x8c>)
 8003f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f8c2 3778 	str.w	r3, [r2, #1912]	; 0x778
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	2000127c 	.word	0x2000127c

08003f44 <snakeRun>:

void snakeRun()
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af02      	add	r7, sp, #8
	if (button_count[5])
 8003f4a:	4b3e      	ldr	r3, [pc, #248]	; (8004044 <snakeRun+0x100>)
 8003f4c:	895b      	ldrh	r3, [r3, #10]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d006      	beq.n	8003f60 <snakeRun+0x1c>
	{
		(*snakeObject.GOUP)();
 8003f52:	4b3d      	ldr	r3, [pc, #244]	; (8004048 <snakeRun+0x104>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	4798      	blx	r3
		(*snakeObject.CHECKHEAD)();
 8003f58:	4b3b      	ldr	r3, [pc, #236]	; (8004048 <snakeRun+0x104>)
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	4798      	blx	r3
					}
				}
			}
		}
	}
}
 8003f5e:	e06e      	b.n	800403e <snakeRun+0xfa>
		if (button_count[13])
 8003f60:	4b38      	ldr	r3, [pc, #224]	; (8004044 <snakeRun+0x100>)
 8003f62:	8b5b      	ldrh	r3, [r3, #26]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d006      	beq.n	8003f76 <snakeRun+0x32>
			(*snakeObject.GODOWN)();
 8003f68:	4b37      	ldr	r3, [pc, #220]	; (8004048 <snakeRun+0x104>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4798      	blx	r3
			(*snakeObject.CHECKHEAD)();
 8003f6e:	4b36      	ldr	r3, [pc, #216]	; (8004048 <snakeRun+0x104>)
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	4798      	blx	r3
}
 8003f74:	e063      	b.n	800403e <snakeRun+0xfa>
			if (button_count[10])
 8003f76:	4b33      	ldr	r3, [pc, #204]	; (8004044 <snakeRun+0x100>)
 8003f78:	8a9b      	ldrh	r3, [r3, #20]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d006      	beq.n	8003f8c <snakeRun+0x48>
				(*snakeObject.GORIGHT)();
 8003f7e:	4b32      	ldr	r3, [pc, #200]	; (8004048 <snakeRun+0x104>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	4798      	blx	r3
				(*snakeObject.CHECKHEAD)();
 8003f84:	4b30      	ldr	r3, [pc, #192]	; (8004048 <snakeRun+0x104>)
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	4798      	blx	r3
}
 8003f8a:	e058      	b.n	800403e <snakeRun+0xfa>
				if (button_count[8])
 8003f8c:	4b2d      	ldr	r3, [pc, #180]	; (8004044 <snakeRun+0x100>)
 8003f8e:	8a1b      	ldrh	r3, [r3, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d006      	beq.n	8003fa2 <snakeRun+0x5e>
					(*snakeObject.GOLEFT)();
 8003f94:	4b2c      	ldr	r3, [pc, #176]	; (8004048 <snakeRun+0x104>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4798      	blx	r3
					(*snakeObject.CHECKHEAD)();
 8003f9a:	4b2b      	ldr	r3, [pc, #172]	; (8004048 <snakeRun+0x104>)
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	4798      	blx	r3
}
 8003fa0:	e04d      	b.n	800403e <snakeRun+0xfa>
					if (button_count[9])
 8003fa2:	4b28      	ldr	r3, [pc, #160]	; (8004044 <snakeRun+0x100>)
 8003fa4:	8a5b      	ldrh	r3, [r3, #18]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d022      	beq.n	8003ff0 <snakeRun+0xac>
						snakeObject.stopSnakeFlag = !snakeObject.stopSnakeFlag;
 8003faa:	4b27      	ldr	r3, [pc, #156]	; (8004048 <snakeRun+0x104>)
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	bf0c      	ite	eq
 8003fb2:	2301      	moveq	r3, #1
 8003fb4:	2300      	movne	r3, #0
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4b23      	ldr	r3, [pc, #140]	; (8004048 <snakeRun+0x104>)
 8003fbc:	629a      	str	r2, [r3, #40]	; 0x28
						wallObject.stopGenerateWallFlag = !wallObject.stopGenerateWallFlag;
 8003fbe:	4b23      	ldr	r3, [pc, #140]	; (800404c <snakeRun+0x108>)
 8003fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc4:	f8d3 3778 	ldr.w	r3, [r3, #1912]	; 0x778
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	bf0c      	ite	eq
 8003fcc:	2301      	moveq	r3, #1
 8003fce:	2300      	movne	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	4b1d      	ldr	r3, [pc, #116]	; (800404c <snakeRun+0x108>)
 8003fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fda:	f8c3 2778 	str.w	r2, [r3, #1912]	; 0x778
						snakeObject.stopSnakeFlag = initStopGame(snakeObject.stopSnakeFlag);
 8003fde:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <snakeRun+0x104>)
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f001 ffea 	bl	8005fbc <initStopGame>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	4a17      	ldr	r2, [pc, #92]	; (8004048 <snakeRun+0x104>)
 8003fec:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003fee:	e026      	b.n	800403e <snakeRun+0xfa>
						if (button_count[12])
 8003ff0:	4b14      	ldr	r3, [pc, #80]	; (8004044 <snakeRun+0x100>)
 8003ff2:	8b1b      	ldrh	r3, [r3, #24]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01c      	beq.n	8004032 <snakeRun+0xee>
							lcd_Clear(WHITE);
 8003ff8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003ffc:	f7fd fec6 	bl	8001d8c <lcd_Clear>
							xFruit = INT_MIN;
 8004000:	4b13      	ldr	r3, [pc, #76]	; (8004050 <snakeRun+0x10c>)
 8004002:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004006:	601a      	str	r2, [r3, #0]
							yFruit = INT_MIN;
 8004008:	4b12      	ldr	r3, [pc, #72]	; (8004054 <snakeRun+0x110>)
 800400a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800400e:	601a      	str	r2, [r3, #0]
							snakeInit();
 8004010:	f000 f824 	bl	800405c <snakeInit>
							wallInit();
 8004014:	f7ff ff4e 	bl	8003eb4 <wallInit>
							lcd_Fill(0, 0, 240, 70, RED);
 8004018:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	2346      	movs	r3, #70	; 0x46
 8004020:	22f0      	movs	r2, #240	; 0xf0
 8004022:	2100      	movs	r1, #0
 8004024:	2000      	movs	r0, #0
 8004026:	f7fd fee3 	bl	8001df0 <lcd_Fill>
							flagEat = 1;
 800402a:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <snakeRun+0x114>)
 800402c:	2201      	movs	r2, #1
 800402e:	601a      	str	r2, [r3, #0]
}
 8004030:	e005      	b.n	800403e <snakeRun+0xfa>
							(*snakeObject.MOVE)();
 8004032:	4b05      	ldr	r3, [pc, #20]	; (8004048 <snakeRun+0x104>)
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	4798      	blx	r3
							(*snakeObject.CHECKHEAD)();
 8004038:	4b03      	ldr	r3, [pc, #12]	; (8004048 <snakeRun+0x104>)
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	4798      	blx	r3
}
 800403e:	bf00      	nop
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	200001d4 	.word	0x200001d4
 8004048:	200002b0 	.word	0x200002b0
 800404c:	2000127c 	.word	0x2000127c
 8004050:	20000094 	.word	0x20000094
 8004054:	20000098 	.word	0x20000098
 8004058:	2000009c 	.word	0x2000009c

0800405c <snakeInit>:

void snakeInit()
{
 800405c:	b590      	push	{r4, r7, lr}
 800405e:	b085      	sub	sp, #20
 8004060:	af02      	add	r7, sp, #8
	srand(rst);
 8004062:	4b45      	ldr	r3, [pc, #276]	; (8004178 <snakeInit+0x11c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f007 fcb6 	bl	800b9d8 <srand>
	rst++;
 800406c:	4b42      	ldr	r3, [pc, #264]	; (8004178 <snakeInit+0x11c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3301      	adds	r3, #1
 8004072:	4a41      	ldr	r2, [pc, #260]	; (8004178 <snakeInit+0x11c>)
 8004074:	6013      	str	r3, [r2, #0]
	flagEat = 1;
 8004076:	4b41      	ldr	r3, [pc, #260]	; (800417c <snakeInit+0x120>)
 8004078:	2201      	movs	r2, #1
 800407a:	601a      	str	r2, [r3, #0]
	snakeObject.stopSnakeFlag = 0;
 800407c:	4b40      	ldr	r3, [pc, #256]	; (8004180 <snakeInit+0x124>)
 800407e:	2200      	movs	r2, #0
 8004080:	629a      	str	r2, [r3, #40]	; 0x28
	snakeObject.infoSnake[0].x = 20;
 8004082:	4b3f      	ldr	r3, [pc, #252]	; (8004180 <snakeInit+0x124>)
 8004084:	2214      	movs	r2, #20
 8004086:	62da      	str	r2, [r3, #44]	; 0x2c
	snakeObject.infoSnake[0].y = rangeValidYLower;
 8004088:	4b3d      	ldr	r3, [pc, #244]	; (8004180 <snakeInit+0x124>)
 800408a:	2246      	movs	r2, #70	; 0x46
 800408c:	631a      	str	r2, [r3, #48]	; 0x30
	snakeObject.infoSnake[1].x = 10;
 800408e:	4b3c      	ldr	r3, [pc, #240]	; (8004180 <snakeInit+0x124>)
 8004090:	220a      	movs	r2, #10
 8004092:	635a      	str	r2, [r3, #52]	; 0x34
	snakeObject.infoSnake[1].y = rangeValidYLower;
 8004094:	4b3a      	ldr	r3, [pc, #232]	; (8004180 <snakeInit+0x124>)
 8004096:	2246      	movs	r2, #70	; 0x46
 8004098:	639a      	str	r2, [r3, #56]	; 0x38
	snakeObject.infoSnake[2].x = 0;
 800409a:	4b39      	ldr	r3, [pc, #228]	; (8004180 <snakeInit+0x124>)
 800409c:	2200      	movs	r2, #0
 800409e:	63da      	str	r2, [r3, #60]	; 0x3c
	snakeObject.infoSnake[2].y = rangeValidYLower;
 80040a0:	4b37      	ldr	r3, [pc, #220]	; (8004180 <snakeInit+0x124>)
 80040a2:	2246      	movs	r2, #70	; 0x46
 80040a4:	641a      	str	r2, [r3, #64]	; 0x40
	for (int i = 3; i < MAX_LENGTH; i++)
 80040a6:	2303      	movs	r3, #3
 80040a8:	607b      	str	r3, [r7, #4]
 80040aa:	e010      	b.n	80040ce <snakeInit+0x72>
	{
		snakeObject.infoSnake[i].x = 0;
 80040ac:	4a34      	ldr	r2, [pc, #208]	; (8004180 <snakeInit+0x124>)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3305      	adds	r3, #5
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	4413      	add	r3, r2
 80040b6:	2200      	movs	r2, #0
 80040b8:	605a      	str	r2, [r3, #4]
		snakeObject.infoSnake[i].y = 0;
 80040ba:	4a31      	ldr	r2, [pc, #196]	; (8004180 <snakeInit+0x124>)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3305      	adds	r3, #5
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	4413      	add	r3, r2
 80040c4:	2200      	movs	r2, #0
 80040c6:	609a      	str	r2, [r3, #8]
	for (int i = 3; i < MAX_LENGTH; i++)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3301      	adds	r3, #1
 80040cc:	607b      	str	r3, [r7, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80040d4:	dbea      	blt.n	80040ac <snakeInit+0x50>
	}
	snakeObject.GODOWN = goDown;
 80040d6:	4b2a      	ldr	r3, [pc, #168]	; (8004180 <snakeInit+0x124>)
 80040d8:	4a2a      	ldr	r2, [pc, #168]	; (8004184 <snakeInit+0x128>)
 80040da:	60da      	str	r2, [r3, #12]
	snakeObject.GOLEFT = goLeft;
 80040dc:	4b28      	ldr	r3, [pc, #160]	; (8004180 <snakeInit+0x124>)
 80040de:	4a2a      	ldr	r2, [pc, #168]	; (8004188 <snakeInit+0x12c>)
 80040e0:	601a      	str	r2, [r3, #0]
	snakeObject.GOUP = goUp;
 80040e2:	4b27      	ldr	r3, [pc, #156]	; (8004180 <snakeInit+0x124>)
 80040e4:	4a29      	ldr	r2, [pc, #164]	; (800418c <snakeInit+0x130>)
 80040e6:	609a      	str	r2, [r3, #8]
	snakeObject.GORIGHT = goRight;
 80040e8:	4b25      	ldr	r3, [pc, #148]	; (8004180 <snakeInit+0x124>)
 80040ea:	4a29      	ldr	r2, [pc, #164]	; (8004190 <snakeInit+0x134>)
 80040ec:	605a      	str	r2, [r3, #4]
	snakeObject.MOVE = move;
 80040ee:	4b24      	ldr	r3, [pc, #144]	; (8004180 <snakeInit+0x124>)
 80040f0:	4a28      	ldr	r2, [pc, #160]	; (8004194 <snakeInit+0x138>)
 80040f2:	611a      	str	r2, [r3, #16]
	snakeObject.CHECKHEAD = checkHead;
 80040f4:	4b22      	ldr	r3, [pc, #136]	; (8004180 <snakeInit+0x124>)
 80040f6:	4a28      	ldr	r2, [pc, #160]	; (8004198 <snakeInit+0x13c>)
 80040f8:	615a      	str	r2, [r3, #20]
	snakeObject.snakeLength = 3;
 80040fa:	4b21      	ldr	r3, [pc, #132]	; (8004180 <snakeInit+0x124>)
 80040fc:	2203      	movs	r2, #3
 80040fe:	625a      	str	r2, [r3, #36]	; 0x24
	snakeObject.snakeDirectionHead = RIGHT;
 8004100:	4b1f      	ldr	r3, [pc, #124]	; (8004180 <snakeInit+0x124>)
 8004102:	2200      	movs	r2, #0
 8004104:	619a      	str	r2, [r3, #24]
	for (int i = 0; i < 3; i++)
 8004106:	2300      	movs	r3, #0
 8004108:	603b      	str	r3, [r7, #0]
 800410a:	e02c      	b.n	8004166 <snakeInit+0x10a>
	{
		if (i == 0)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d102      	bne.n	8004118 <snakeInit+0xbc>
			drawHeadSnake();
 8004112:	f7ff f833 	bl	800317c <drawHeadSnake>
 8004116:	e023      	b.n	8004160 <snakeInit+0x104>
		else
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8004118:	4a19      	ldr	r2, [pc, #100]	; (8004180 <snakeInit+0x124>)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	3305      	adds	r3, #5
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4413      	add	r3, r2
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	b298      	uxth	r0, r3
 8004126:	4a16      	ldr	r2, [pc, #88]	; (8004180 <snakeInit+0x124>)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	3305      	adds	r3, #5
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	4413      	add	r3, r2
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	b299      	uxth	r1, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8004134:	4a12      	ldr	r2, [pc, #72]	; (8004180 <snakeInit+0x124>)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	3305      	adds	r3, #5
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	4413      	add	r3, r2
 800413e:	685b      	ldr	r3, [r3, #4]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8004140:	b29b      	uxth	r3, r3
 8004142:	3309      	adds	r3, #9
 8004144:	b29a      	uxth	r2, r3
					 snakeObject.infoSnake[i].x + snakeWidth, snakeObject.infoSnake[i].y + snakeWidth, BLACK);
 8004146:	4c0e      	ldr	r4, [pc, #56]	; (8004180 <snakeInit+0x124>)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	3305      	adds	r3, #5
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	4423      	add	r3, r4
 8004150:	689b      	ldr	r3, [r3, #8]
			lcd_Fill(snakeObject.infoSnake[i].x, snakeObject.infoSnake[i].y,
 8004152:	b29b      	uxth	r3, r3
 8004154:	3309      	adds	r3, #9
 8004156:	b29b      	uxth	r3, r3
 8004158:	2400      	movs	r4, #0
 800415a:	9400      	str	r4, [sp, #0]
 800415c:	f7fd fe48 	bl	8001df0 <lcd_Fill>
	for (int i = 0; i < 3; i++)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	3301      	adds	r3, #1
 8004164:	603b      	str	r3, [r7, #0]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b02      	cmp	r3, #2
 800416a:	ddcf      	ble.n	800410c <snakeInit+0xb0>
	}
}
 800416c:	bf00      	nop
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	bd90      	pop	{r4, r7, pc}
 8004176:	bf00      	nop
 8004178:	200002ac 	.word	0x200002ac
 800417c:	2000009c 	.word	0x2000009c
 8004180:	200002b0 	.word	0x200002b0
 8004184:	08003809 	.word	0x08003809
 8004188:	080033c5 	.word	0x080033c5
 800418c:	0800369d 	.word	0x0800369d
 8004190:	08003531 	.word	0x08003531
 8004194:	08003e65 	.word	0x08003e65
 8004198:	08003d65 	.word	0x08003d65

0800419c <generateFruit>:

void generateFruit()
{
 800419c:	b590      	push	{r4, r7, lr}
 800419e:	b087      	sub	sp, #28
 80041a0:	af02      	add	r7, sp, #8
	if (flagEat == 1)
 80041a2:	4b89      	ldr	r3, [pc, #548]	; (80043c8 <generateFruit+0x22c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	f040 8109 	bne.w	80043be <generateFruit+0x222>
	{
		while (1)
		{
			int remind = 0;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60fb      	str	r3, [r7, #12]
			xFruit = (rand() % (rangeXGenerate + 1)) * snakeStep;
 80041b0:	f007 fc40 	bl	800ba34 <rand>
 80041b4:	4601      	mov	r1, r0
 80041b6:	4b85      	ldr	r3, [pc, #532]	; (80043cc <generateFruit+0x230>)
 80041b8:	fb83 2301 	smull	r2, r3, r3, r1
 80041bc:	109a      	asrs	r2, r3, #2
 80041be:	17cb      	asrs	r3, r1, #31
 80041c0:	1ad2      	subs	r2, r2, r3
 80041c2:	4613      	mov	r3, r2
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	4413      	add	r3, r2
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	1aca      	subs	r2, r1, r3
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	461a      	mov	r2, r3
 80041d6:	4b7e      	ldr	r3, [pc, #504]	; (80043d0 <generateFruit+0x234>)
 80041d8:	601a      	str	r2, [r3, #0]
			yFruit = (rand() % (rangeYGenerate + 1) + 7) * snakeStep;
 80041da:	f007 fc2b 	bl	800ba34 <rand>
 80041de:	4601      	mov	r1, r0
 80041e0:	4b7c      	ldr	r3, [pc, #496]	; (80043d4 <generateFruit+0x238>)
 80041e2:	fb83 2301 	smull	r2, r3, r3, r1
 80041e6:	10da      	asrs	r2, r3, #3
 80041e8:	17cb      	asrs	r3, r1, #31
 80041ea:	1ad2      	subs	r2, r2, r3
 80041ec:	4613      	mov	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	009a      	lsls	r2, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	1aca      	subs	r2, r1, r3
 80041f8:	3207      	adds	r2, #7
 80041fa:	4613      	mov	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	461a      	mov	r2, r3
 8004204:	4b74      	ldr	r3, [pc, #464]	; (80043d8 <generateFruit+0x23c>)
 8004206:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8004208:	2300      	movs	r3, #0
 800420a:	60bb      	str	r3, [r7, #8]
 800420c:	e021      	b.n	8004252 <generateFruit+0xb6>
			{
				if (xFruit == snakeObject.infoSnake[i].x && yFruit == snakeObject.infoSnake[i].y)
 800420e:	4a73      	ldr	r2, [pc, #460]	; (80043dc <generateFruit+0x240>)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	3305      	adds	r3, #5
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4413      	add	r3, r2
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	4b6d      	ldr	r3, [pc, #436]	; (80043d0 <generateFruit+0x234>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d114      	bne.n	800424c <generateFruit+0xb0>
 8004222:	4a6e      	ldr	r2, [pc, #440]	; (80043dc <generateFruit+0x240>)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	3305      	adds	r3, #5
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	4413      	add	r3, r2
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	4b6a      	ldr	r3, [pc, #424]	; (80043d8 <generateFruit+0x23c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d10a      	bne.n	800424c <generateFruit+0xb0>
				{
					xFruit = INT_MIN;
 8004236:	4b66      	ldr	r3, [pc, #408]	; (80043d0 <generateFruit+0x234>)
 8004238:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800423c:	601a      	str	r2, [r3, #0]
					yFruit = INT_MIN;
 800423e:	4b66      	ldr	r3, [pc, #408]	; (80043d8 <generateFruit+0x23c>)
 8004240:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004244:	601a      	str	r2, [r3, #0]
					remind = 1;
 8004246:	2301      	movs	r3, #1
 8004248:	60fb      	str	r3, [r7, #12]
					break;
 800424a:	e007      	b.n	800425c <generateFruit+0xc0>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	3301      	adds	r3, #1
 8004250:	60bb      	str	r3, [r7, #8]
 8004252:	4b62      	ldr	r3, [pc, #392]	; (80043dc <generateFruit+0x240>)
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	429a      	cmp	r2, r3
 800425a:	dbd8      	blt.n	800420e <generateFruit+0x72>
				}
			}
			if (remind)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	f040 80a9 	bne.w	80043b6 <generateFruit+0x21a>
				continue;
			for (int i = 0; i < wallObject.amountWallElement; i++)
 8004264:	2300      	movs	r3, #0
 8004266:	607b      	str	r3, [r7, #4]
 8004268:	e07f      	b.n	800436a <generateFruit+0x1ce>
			{
				if (wallObject.infoWall[i].vertical == 1)
 800426a:	495d      	ldr	r1, [pc, #372]	; (80043e0 <generateFruit+0x244>)
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	4413      	add	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	3308      	adds	r3, #8
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d139      	bne.n	80042f4 <generateFruit+0x158>
				{
					if ((wallObject.infoWall[i].y == yFruit ||
 8004280:	4957      	ldr	r1, [pc, #348]	; (80043e0 <generateFruit+0x244>)
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	4613      	mov	r3, r2
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	4413      	add	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	440b      	add	r3, r1
 800428e:	3304      	adds	r3, #4
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	4b51      	ldr	r3, [pc, #324]	; (80043d8 <generateFruit+0x23c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d01d      	beq.n	80042d6 <generateFruit+0x13a>
						 wallObject.infoWall[i].y + snakeStep == yFruit ||
 800429a:	4951      	ldr	r1, [pc, #324]	; (80043e0 <generateFruit+0x244>)
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	4613      	mov	r3, r2
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	4413      	add	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	440b      	add	r3, r1
 80042a8:	3304      	adds	r3, #4
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f103 020a 	add.w	r2, r3, #10
 80042b0:	4b49      	ldr	r3, [pc, #292]	; (80043d8 <generateFruit+0x23c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
					if ((wallObject.infoWall[i].y == yFruit ||
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d00e      	beq.n	80042d6 <generateFruit+0x13a>
						 wallObject.infoWall[i].y - snakeStep == yFruit) &&
 80042b8:	4949      	ldr	r1, [pc, #292]	; (80043e0 <generateFruit+0x244>)
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	4613      	mov	r3, r2
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	4413      	add	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	3304      	adds	r3, #4
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f1a3 020a 	sub.w	r2, r3, #10
 80042ce:	4b42      	ldr	r3, [pc, #264]	; (80043d8 <generateFruit+0x23c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
						 wallObject.infoWall[i].y + snakeStep == yFruit ||
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d146      	bne.n	8004364 <generateFruit+0x1c8>
						(wallObject.infoWall[i].x == xFruit))
 80042d6:	4942      	ldr	r1, [pc, #264]	; (80043e0 <generateFruit+0x244>)
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	4613      	mov	r3, r2
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	4413      	add	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	440b      	add	r3, r1
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	4b3a      	ldr	r3, [pc, #232]	; (80043d0 <generateFruit+0x234>)
 80042e8:	681b      	ldr	r3, [r3, #0]
						 wallObject.infoWall[i].y - snakeStep == yFruit) &&
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d13a      	bne.n	8004364 <generateFruit+0x1c8>
					{
						remind = 1;
 80042ee:	2301      	movs	r3, #1
 80042f0:	60fb      	str	r3, [r7, #12]
						break;
 80042f2:	e043      	b.n	800437c <generateFruit+0x1e0>
					}
				}
				else
				{
					if ((wallObject.infoWall[i].x == xFruit ||
 80042f4:	493a      	ldr	r1, [pc, #232]	; (80043e0 <generateFruit+0x244>)
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	4613      	mov	r3, r2
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	4413      	add	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	4b32      	ldr	r3, [pc, #200]	; (80043d0 <generateFruit+0x234>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	429a      	cmp	r2, r3
 800430a:	d01b      	beq.n	8004344 <generateFruit+0x1a8>
						wallObject.infoWall[i].x + snakeStep == xFruit ||
 800430c:	4934      	ldr	r1, [pc, #208]	; (80043e0 <generateFruit+0x244>)
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	4413      	add	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f103 020a 	add.w	r2, r3, #10
 8004320:	4b2b      	ldr	r3, [pc, #172]	; (80043d0 <generateFruit+0x234>)
 8004322:	681b      	ldr	r3, [r3, #0]
					if ((wallObject.infoWall[i].x == xFruit ||
 8004324:	429a      	cmp	r2, r3
 8004326:	d00d      	beq.n	8004344 <generateFruit+0x1a8>
						wallObject.infoWall[i].x - snakeStep == xFruit) &&
 8004328:	492d      	ldr	r1, [pc, #180]	; (80043e0 <generateFruit+0x244>)
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	4613      	mov	r3, r2
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	4413      	add	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f1a3 020a 	sub.w	r2, r3, #10
 800433c:	4b24      	ldr	r3, [pc, #144]	; (80043d0 <generateFruit+0x234>)
 800433e:	681b      	ldr	r3, [r3, #0]
						wallObject.infoWall[i].x + snakeStep == xFruit ||
 8004340:	429a      	cmp	r2, r3
 8004342:	d10f      	bne.n	8004364 <generateFruit+0x1c8>
						(wallObject.infoWall[i].y == yFruit))
 8004344:	4926      	ldr	r1, [pc, #152]	; (80043e0 <generateFruit+0x244>)
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	4613      	mov	r3, r2
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	4413      	add	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	3304      	adds	r3, #4
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	4b20      	ldr	r3, [pc, #128]	; (80043d8 <generateFruit+0x23c>)
 8004358:	681b      	ldr	r3, [r3, #0]
						wallObject.infoWall[i].x - snakeStep == xFruit) &&
 800435a:	429a      	cmp	r2, r3
 800435c:	d102      	bne.n	8004364 <generateFruit+0x1c8>
					{
						remind = 1;
 800435e:	2301      	movs	r3, #1
 8004360:	60fb      	str	r3, [r7, #12]
						break;
 8004362:	e00b      	b.n	800437c <generateFruit+0x1e0>
			for (int i = 0; i < wallObject.amountWallElement; i++)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3301      	adds	r3, #1
 8004368:	607b      	str	r3, [r7, #4]
 800436a:	4b1d      	ldr	r3, [pc, #116]	; (80043e0 <generateFruit+0x244>)
 800436c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004370:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	429a      	cmp	r2, r3
 8004378:	f6ff af77 	blt.w	800426a <generateFruit+0xce>
					}
				}
			}
			if (remind)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d11b      	bne.n	80043ba <generateFruit+0x21e>
				continue;
			lcd_Fill(xFruit, yFruit, xFruit + snakeWidth, yFruit + snakeWidth, DARKBLUE);
 8004382:	4b13      	ldr	r3, [pc, #76]	; (80043d0 <generateFruit+0x234>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	b298      	uxth	r0, r3
 8004388:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <generateFruit+0x23c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	b299      	uxth	r1, r3
 800438e:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <generateFruit+0x234>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	b29b      	uxth	r3, r3
 8004394:	3309      	adds	r3, #9
 8004396:	b29a      	uxth	r2, r3
 8004398:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <generateFruit+0x23c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	b29b      	uxth	r3, r3
 800439e:	3309      	adds	r3, #9
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	f240 14cf 	movw	r4, #463	; 0x1cf
 80043a6:	9400      	str	r4, [sp, #0]
 80043a8:	f7fd fd22 	bl	8001df0 <lcd_Fill>
			flagEat = 0;
 80043ac:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <generateFruit+0x22c>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
			break;
 80043b2:	bf00      	nop
		}
	}
}
 80043b4:	e003      	b.n	80043be <generateFruit+0x222>
				continue;
 80043b6:	bf00      	nop
 80043b8:	e6f8      	b.n	80041ac <generateFruit+0x10>
				continue;
 80043ba:	bf00      	nop
		{
 80043bc:	e6f6      	b.n	80041ac <generateFruit+0x10>
}
 80043be:	bf00      	nop
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd90      	pop	{r4, r7, pc}
 80043c6:	bf00      	nop
 80043c8:	2000009c 	.word	0x2000009c
 80043cc:	2aaaaaab 	.word	0x2aaaaaab
 80043d0:	20000094 	.word	0x20000094
 80043d4:	51eb851f 	.word	0x51eb851f
 80043d8:	20000098 	.word	0x20000098
 80043dc:	200002b0 	.word	0x200002b0
 80043e0:	2000127c 	.word	0x2000127c

080043e4 <generateWall>:

void generateWall()
{
 80043e4:	b590      	push	{r4, r7, lr}
 80043e6:	b08d      	sub	sp, #52	; 0x34
 80043e8:	af02      	add	r7, sp, #8
	if (wallObject.amountWallElement >= WALL)
 80043ea:	4b9c      	ldr	r3, [pc, #624]	; (800465c <generateWall+0x278>)
 80043ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f0:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 80043f4:	4a9a      	ldr	r2, [pc, #616]	; (8004660 <generateWall+0x27c>)
 80043f6:	8812      	ldrh	r2, [r2, #0]
 80043f8:	4293      	cmp	r3, r2
 80043fa:	f280 82de 	bge.w	80049ba <generateWall+0x5d6>
	{
		return;
	}
	if (wallObject.stopGenerateWallFlag == 0)
 80043fe:	4b97      	ldr	r3, [pc, #604]	; (800465c <generateWall+0x278>)
 8004400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004404:	f8d3 3778 	ldr.w	r3, [r3, #1912]	; 0x778
 8004408:	2b00      	cmp	r3, #0
 800440a:	f040 82d7 	bne.w	80049bc <generateWall+0x5d8>
	{
		while (1)
		{
			int remind = 0;
 800440e:	2300      	movs	r3, #0
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
			int X = (rand() % (rangeXGenerate - 1) + 1) * snakeStep;
 8004412:	f007 fb0f 	bl	800ba34 <rand>
 8004416:	4602      	mov	r2, r0
 8004418:	4b92      	ldr	r3, [pc, #584]	; (8004664 <generateWall+0x280>)
 800441a:	fb83 1302 	smull	r1, r3, r3, r2
 800441e:	1099      	asrs	r1, r3, #2
 8004420:	17d3      	asrs	r3, r2, #31
 8004422:	1acb      	subs	r3, r1, r3
 8004424:	2116      	movs	r1, #22
 8004426:	fb01 f303 	mul.w	r3, r1, r3
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	4613      	mov	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	61bb      	str	r3, [r7, #24]
			int Y = (rand() % (rangeYGenerate - 1) + 8) * snakeStep;
 8004438:	f007 fafc 	bl	800ba34 <rand>
 800443c:	4601      	mov	r1, r0
 800443e:	4b8a      	ldr	r3, [pc, #552]	; (8004668 <generateWall+0x284>)
 8004440:	fb83 2301 	smull	r2, r3, r3, r1
 8004444:	440b      	add	r3, r1
 8004446:	111a      	asrs	r2, r3, #4
 8004448:	17cb      	asrs	r3, r1, #31
 800444a:	1ad2      	subs	r2, r2, r3
 800444c:	4613      	mov	r3, r2
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	4413      	add	r3, r2
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	1a9b      	subs	r3, r3, r2
 8004456:	1aca      	subs	r2, r1, r3
 8004458:	3208      	adds	r2, #8
 800445a:	4613      	mov	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	617b      	str	r3, [r7, #20]
			// check conflict with exist wall
			for (int i = 0; i < wallObject.amountWallElement; i++)
 8004464:	2300      	movs	r3, #0
 8004466:	623b      	str	r3, [r7, #32]
 8004468:	e0e8      	b.n	800463c <generateWall+0x258>
			{
				int x = wallObject.infoWall[i].x;
 800446a:	497c      	ldr	r1, [pc, #496]	; (800465c <generateWall+0x278>)
 800446c:	6a3a      	ldr	r2, [r7, #32]
 800446e:	4613      	mov	r3, r2
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	4413      	add	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	440b      	add	r3, r1
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	613b      	str	r3, [r7, #16]
				int y = wallObject.infoWall[i].y;
 800447c:	4977      	ldr	r1, [pc, #476]	; (800465c <generateWall+0x278>)
 800447e:	6a3a      	ldr	r2, [r7, #32]
 8004480:	4613      	mov	r3, r2
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	4413      	add	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	3304      	adds	r3, #4
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60fb      	str	r3, [r7, #12]
				if (wallObject.vertical == 1)
 8004490:	4b72      	ldr	r3, [pc, #456]	; (800465c <generateWall+0x278>)
 8004492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004496:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 800449a:	2b01      	cmp	r3, #1
 800449c:	d166      	bne.n	800456c <generateWall+0x188>
				{
					if (wallObject.infoWall[i].vertical == 1)
 800449e:	496f      	ldr	r1, [pc, #444]	; (800465c <generateWall+0x278>)
 80044a0:	6a3a      	ldr	r2, [r7, #32]
 80044a2:	4613      	mov	r3, r2
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	440b      	add	r3, r1
 80044ac:	3308      	adds	r3, #8
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d120      	bne.n	80044f6 <generateWall+0x112>
					{
						if ((y - 2 * snakeStep == Y || y + 2 * snakeStep == Y || y - snakeStep == Y ||
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	3b14      	subs	r3, #20
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d013      	beq.n	80044e6 <generateWall+0x102>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3314      	adds	r3, #20
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d00e      	beq.n	80044e6 <generateWall+0x102>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	3b0a      	subs	r3, #10
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d009      	beq.n	80044e6 <generateWall+0x102>
							 y + snakeStep == Y || y == Y) &&
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	330a      	adds	r3, #10
						if ((y - 2 * snakeStep == Y || y + 2 * snakeStep == Y || y - snakeStep == Y ||
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d004      	beq.n	80044e6 <generateWall+0x102>
							 y + snakeStep == Y || y == Y) &&
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	f040 80a8 	bne.w	8004636 <generateWall+0x252>
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	f040 80a3 	bne.w	8004636 <generateWall+0x252>
							(x == X))
						{
							remind = 1;
 80044f0:	2301      	movs	r3, #1
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24
							break;
 80044f4:	e0ab      	b.n	800464e <generateWall+0x26a>
						}
					}
					else
					{
						if (((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x == X)) ||
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	3b0a      	subs	r3, #10
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d008      	beq.n	8004512 <generateWall+0x12e>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	330a      	adds	r3, #10
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	429a      	cmp	r2, r3
 8004508:	d003      	beq.n	8004512 <generateWall+0x12e>
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	429a      	cmp	r2, r3
 8004510:	d103      	bne.n	800451a <generateWall+0x136>
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	429a      	cmp	r2, r3
 8004518:	d025      	beq.n	8004566 <generateWall+0x182>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x - snakeStep == X)) ||
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	3b0a      	subs	r3, #10
						if (((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x == X)) ||
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	429a      	cmp	r2, r3
 8004522:	d008      	beq.n	8004536 <generateWall+0x152>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x - snakeStep == X)) ||
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	330a      	adds	r3, #10
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	429a      	cmp	r2, r3
 800452c:	d003      	beq.n	8004536 <generateWall+0x152>
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	429a      	cmp	r2, r3
 8004534:	d104      	bne.n	8004540 <generateWall+0x15c>
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	3b0a      	subs	r3, #10
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	429a      	cmp	r2, r3
 800453e:	d012      	beq.n	8004566 <generateWall+0x182>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x + snakeStep == X)))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	3b0a      	subs	r3, #10
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x - snakeStep == X)) ||
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	429a      	cmp	r2, r3
 8004548:	d008      	beq.n	800455c <generateWall+0x178>
							((y - snakeStep == Y || y + snakeStep == Y || y == Y) && (x + snakeStep == X)))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	330a      	adds	r3, #10
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	429a      	cmp	r2, r3
 8004552:	d003      	beq.n	800455c <generateWall+0x178>
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	429a      	cmp	r2, r3
 800455a:	d16c      	bne.n	8004636 <generateWall+0x252>
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	330a      	adds	r3, #10
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	429a      	cmp	r2, r3
 8004564:	d167      	bne.n	8004636 <generateWall+0x252>
						{
							remind = 1;
 8004566:	2301      	movs	r3, #1
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
 800456a:	e064      	b.n	8004636 <generateWall+0x252>
						}
					}
				}
				else
				{
					if (wallObject.infoWall[i].vertical == 1)
 800456c:	493b      	ldr	r1, [pc, #236]	; (800465c <generateWall+0x278>)
 800456e:	6a3a      	ldr	r2, [r7, #32]
 8004570:	4613      	mov	r3, r2
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	4413      	add	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	3308      	adds	r3, #8
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d13a      	bne.n	80045f8 <generateWall+0x214>
					{
						if (((x - snakeStep == X || x + snakeStep == X || x == X) && (y == Y)) ||
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	3b0a      	subs	r3, #10
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	429a      	cmp	r2, r3
 800458a:	d008      	beq.n	800459e <generateWall+0x1ba>
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	330a      	adds	r3, #10
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	429a      	cmp	r2, r3
 8004594:	d003      	beq.n	800459e <generateWall+0x1ba>
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	429a      	cmp	r2, r3
 800459c:	d103      	bne.n	80045a6 <generateWall+0x1c2>
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d025      	beq.n	80045f2 <generateWall+0x20e>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y - snakeStep == Y)) ||
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	3b0a      	subs	r3, #10
						if (((x - snakeStep == X || x + snakeStep == X || x == X) && (y == Y)) ||
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d008      	beq.n	80045c2 <generateWall+0x1de>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y - snakeStep == Y)) ||
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	330a      	adds	r3, #10
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d003      	beq.n	80045c2 <generateWall+0x1de>
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d104      	bne.n	80045cc <generateWall+0x1e8>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3b0a      	subs	r3, #10
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d012      	beq.n	80045f2 <generateWall+0x20e>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y + snakeStep == Y)))
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	3b0a      	subs	r3, #10
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y - snakeStep == Y)) ||
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d008      	beq.n	80045e8 <generateWall+0x204>
							((x - snakeStep == X || x + snakeStep == X || x == X) && (y + snakeStep == Y)))
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	330a      	adds	r3, #10
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d003      	beq.n	80045e8 <generateWall+0x204>
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d126      	bne.n	8004636 <generateWall+0x252>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	330a      	adds	r3, #10
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d121      	bne.n	8004636 <generateWall+0x252>
						{
							remind = 1;
 80045f2:	2301      	movs	r3, #1
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
							break;
 80045f6:	e02a      	b.n	800464e <generateWall+0x26a>
						}
					}
					else
					{
						if ((x - 2 * snakeStep == X || x + 2 * snakeStep == X || x + snakeStep == X ||
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	3b14      	subs	r3, #20
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d012      	beq.n	8004628 <generateWall+0x244>
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	3314      	adds	r3, #20
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	429a      	cmp	r2, r3
 800460a:	d00d      	beq.n	8004628 <generateWall+0x244>
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	330a      	adds	r3, #10
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	429a      	cmp	r2, r3
 8004614:	d008      	beq.n	8004628 <generateWall+0x244>
							 x - snakeStep == X || x == X) &&
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	3b0a      	subs	r3, #10
						if ((x - 2 * snakeStep == X || x + 2 * snakeStep == X || x + snakeStep == X ||
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	429a      	cmp	r2, r3
 800461e:	d003      	beq.n	8004628 <generateWall+0x244>
							 x - snakeStep == X || x == X) &&
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	429a      	cmp	r2, r3
 8004626:	d106      	bne.n	8004636 <generateWall+0x252>
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	429a      	cmp	r2, r3
 800462e:	d102      	bne.n	8004636 <generateWall+0x252>
							(y == Y))
						{
							remind = 1;
 8004630:	2301      	movs	r3, #1
 8004632:	627b      	str	r3, [r7, #36]	; 0x24
							break;
 8004634:	e00b      	b.n	800464e <generateWall+0x26a>
			for (int i = 0; i < wallObject.amountWallElement; i++)
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	3301      	adds	r3, #1
 800463a:	623b      	str	r3, [r7, #32]
 800463c:	4b07      	ldr	r3, [pc, #28]	; (800465c <generateWall+0x278>)
 800463e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004642:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 8004646:	6a3a      	ldr	r2, [r7, #32]
 8004648:	429a      	cmp	r2, r3
 800464a:	f6ff af0e 	blt.w	800446a <generateWall+0x86>
						}
					}
				}
			}
			if (remind)
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	2b00      	cmp	r3, #0
 8004652:	f040 81a8 	bne.w	80049a6 <generateWall+0x5c2>
				continue;
			// check conflict with snake
			for (int i = 0; i < snakeObject.snakeLength; i++)
 8004656:	2300      	movs	r3, #0
 8004658:	61fb      	str	r3, [r7, #28]
 800465a:	e049      	b.n	80046f0 <generateWall+0x30c>
 800465c:	2000127c 	.word	0x2000127c
 8004660:	2000025c 	.word	0x2000025c
 8004664:	2e8ba2e9 	.word	0x2e8ba2e9
 8004668:	b21642c9 	.word	0xb21642c9
			{
				int x = snakeObject.infoSnake[i].x;
 800466c:	4a60      	ldr	r2, [pc, #384]	; (80047f0 <generateWall+0x40c>)
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	3305      	adds	r3, #5
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4413      	add	r3, r2
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	60bb      	str	r3, [r7, #8]
				int y = snakeObject.infoSnake[i].y;
 800467a:	4a5d      	ldr	r2, [pc, #372]	; (80047f0 <generateWall+0x40c>)
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	3305      	adds	r3, #5
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	4413      	add	r3, r2
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	607b      	str	r3, [r7, #4]
				if (wallObject.vertical == 1)
 8004688:	4b5a      	ldr	r3, [pc, #360]	; (80047f4 <generateWall+0x410>)
 800468a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800468e:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8004692:	2b01      	cmp	r3, #1
 8004694:	d114      	bne.n	80046c0 <generateWall+0x2dc>
				{
					if ((X == x) && (Y == y || Y - snakeStep == y || Y + snakeStep == y))
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	429a      	cmp	r2, r3
 800469c:	d125      	bne.n	80046ea <generateWall+0x306>
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d009      	beq.n	80046ba <generateWall+0x2d6>
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	3b0a      	subs	r3, #10
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d004      	beq.n	80046ba <generateWall+0x2d6>
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	330a      	adds	r3, #10
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d117      	bne.n	80046ea <generateWall+0x306>
					{
						remind = 1;
 80046ba:	2301      	movs	r3, #1
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
						break;
 80046be:	e01c      	b.n	80046fa <generateWall+0x316>
					}
				}
				else
				{
					if ((Y == y) && (X == x || X - snakeStep == x || X + snakeStep == x))
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d110      	bne.n	80046ea <generateWall+0x306>
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d009      	beq.n	80046e4 <generateWall+0x300>
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	3b0a      	subs	r3, #10
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d004      	beq.n	80046e4 <generateWall+0x300>
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	330a      	adds	r3, #10
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d102      	bne.n	80046ea <generateWall+0x306>
					{
						remind = 1;
 80046e4:	2301      	movs	r3, #1
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
						break;
 80046e8:	e007      	b.n	80046fa <generateWall+0x316>
			for (int i = 0; i < snakeObject.snakeLength; i++)
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	3301      	adds	r3, #1
 80046ee:	61fb      	str	r3, [r7, #28]
 80046f0:	4b3f      	ldr	r3, [pc, #252]	; (80047f0 <generateWall+0x40c>)
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	69fa      	ldr	r2, [r7, #28]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	dbb8      	blt.n	800466c <generateWall+0x288>
					}
				}
			}
			if (remind)
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f040 8154 	bne.w	80049aa <generateWall+0x5c6>
				continue;
			// check conflict with head snake
			switch (snakeObject.snakeDirectionHead)
 8004702:	4b3b      	ldr	r3, [pc, #236]	; (80047f0 <generateWall+0x40c>)
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	2b03      	cmp	r3, #3
 8004708:	d842      	bhi.n	8004790 <generateWall+0x3ac>
 800470a:	a201      	add	r2, pc, #4	; (adr r2, 8004710 <generateWall+0x32c>)
 800470c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004710:	08004775 	.word	0x08004775
 8004714:	08004759 	.word	0x08004759
 8004718:	0800473d 	.word	0x0800473d
 800471c:	08004721 	.word	0x08004721
			{
			case UP:
				if ((snakeObject.infoSnake[0].x == X) && (snakeObject.infoSnake[0].y - snakeStep == Y))
 8004720:	4b33      	ldr	r3, [pc, #204]	; (80047f0 <generateWall+0x40c>)
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	429a      	cmp	r2, r3
 8004728:	d134      	bne.n	8004794 <generateWall+0x3b0>
 800472a:	4b31      	ldr	r3, [pc, #196]	; (80047f0 <generateWall+0x40c>)
 800472c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472e:	3b0a      	subs	r3, #10
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	429a      	cmp	r2, r3
 8004734:	d12e      	bne.n	8004794 <generateWall+0x3b0>
					remind = 1;
 8004736:	2301      	movs	r3, #1
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800473a:	e02b      	b.n	8004794 <generateWall+0x3b0>
			case DOWN:
				if ((snakeObject.infoSnake[0].x == X) && (snakeObject.infoSnake[0].y + snakeStep == Y))
 800473c:	4b2c      	ldr	r3, [pc, #176]	; (80047f0 <generateWall+0x40c>)
 800473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	429a      	cmp	r2, r3
 8004744:	d128      	bne.n	8004798 <generateWall+0x3b4>
 8004746:	4b2a      	ldr	r3, [pc, #168]	; (80047f0 <generateWall+0x40c>)
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	330a      	adds	r3, #10
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	429a      	cmp	r2, r3
 8004750:	d122      	bne.n	8004798 <generateWall+0x3b4>
					remind = 1;
 8004752:	2301      	movs	r3, #1
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8004756:	e01f      	b.n	8004798 <generateWall+0x3b4>
			case LEFT:
				if ((snakeObject.infoSnake[0].x - snakeStep == X) && (snakeObject.infoSnake[0].y == Y))
 8004758:	4b25      	ldr	r3, [pc, #148]	; (80047f0 <generateWall+0x40c>)
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	3b0a      	subs	r3, #10
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	429a      	cmp	r2, r3
 8004762:	d11b      	bne.n	800479c <generateWall+0x3b8>
 8004764:	4b22      	ldr	r3, [pc, #136]	; (80047f0 <generateWall+0x40c>)
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	429a      	cmp	r2, r3
 800476c:	d116      	bne.n	800479c <generateWall+0x3b8>
					remind = 1;
 800476e:	2301      	movs	r3, #1
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8004772:	e013      	b.n	800479c <generateWall+0x3b8>
			case RIGHT:
				if ((snakeObject.infoSnake[0].x + snakeStep == X) && (snakeObject.infoSnake[0].y== Y))
 8004774:	4b1e      	ldr	r3, [pc, #120]	; (80047f0 <generateWall+0x40c>)
 8004776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004778:	330a      	adds	r3, #10
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	429a      	cmp	r2, r3
 800477e:	d10f      	bne.n	80047a0 <generateWall+0x3bc>
 8004780:	4b1b      	ldr	r3, [pc, #108]	; (80047f0 <generateWall+0x40c>)
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	429a      	cmp	r2, r3
 8004788:	d10a      	bne.n	80047a0 <generateWall+0x3bc>
					remind= 1;
 800478a:	2301      	movs	r3, #1
 800478c:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800478e:	e007      	b.n	80047a0 <generateWall+0x3bc>
				default:
					break;
 8004790:	bf00      	nop
 8004792:	e006      	b.n	80047a2 <generateWall+0x3be>
				break;
 8004794:	bf00      	nop
 8004796:	e004      	b.n	80047a2 <generateWall+0x3be>
				break;
 8004798:	bf00      	nop
 800479a:	e002      	b.n	80047a2 <generateWall+0x3be>
				break;
 800479c:	bf00      	nop
 800479e:	e000      	b.n	80047a2 <generateWall+0x3be>
				break;
 80047a0:	bf00      	nop
			}
			if (remind)
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f040 8102 	bne.w	80049ae <generateWall+0x5ca>
				continue;
			// check conflict with fruit
			if (wallObject.vertical == 1)
 80047aa:	4b12      	ldr	r3, [pc, #72]	; (80047f4 <generateWall+0x410>)
 80047ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b0:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d123      	bne.n	8004800 <generateWall+0x41c>
			{
				if ((X == xFruit) && (Y == yFruit || Y - snakeStep == yFruit || Y + snakeStep == yFruit))
 80047b8:	4b0f      	ldr	r3, [pc, #60]	; (80047f8 <generateWall+0x414>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d139      	bne.n	8004836 <generateWall+0x452>
 80047c2:	4b0e      	ldr	r3, [pc, #56]	; (80047fc <generateWall+0x418>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	f000 80f2 	beq.w	80049b2 <generateWall+0x5ce>
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f1a3 020a 	sub.w	r2, r3, #10
 80047d4:	4b09      	ldr	r3, [pc, #36]	; (80047fc <generateWall+0x418>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	f000 80ea 	beq.w	80049b2 <generateWall+0x5ce>
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f103 020a 	add.w	r2, r3, #10
 80047e4:	4b05      	ldr	r3, [pc, #20]	; (80047fc <generateWall+0x418>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d124      	bne.n	8004836 <generateWall+0x452>
					continue;
 80047ec:	e0e1      	b.n	80049b2 <generateWall+0x5ce>
 80047ee:	bf00      	nop
 80047f0:	200002b0 	.word	0x200002b0
 80047f4:	2000127c 	.word	0x2000127c
 80047f8:	20000094 	.word	0x20000094
 80047fc:	20000098 	.word	0x20000098
			}
			else
			{
				if ((Y == yFruit) && (X == xFruit || X - snakeStep == xFruit || X + snakeStep == xFruit))
 8004800:	4b70      	ldr	r3, [pc, #448]	; (80049c4 <generateWall+0x5e0>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	429a      	cmp	r2, r3
 8004808:	d115      	bne.n	8004836 <generateWall+0x452>
 800480a:	4b6f      	ldr	r3, [pc, #444]	; (80049c8 <generateWall+0x5e4>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	429a      	cmp	r2, r3
 8004812:	f000 80d0 	beq.w	80049b6 <generateWall+0x5d2>
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	f1a3 020a 	sub.w	r2, r3, #10
 800481c:	4b6a      	ldr	r3, [pc, #424]	; (80049c8 <generateWall+0x5e4>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	429a      	cmp	r2, r3
 8004822:	f000 80c8 	beq.w	80049b6 <generateWall+0x5d2>
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	f103 020a 	add.w	r2, r3, #10
 800482c:	4b66      	ldr	r3, [pc, #408]	; (80049c8 <generateWall+0x5e4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	f000 80c0 	beq.w	80049b6 <generateWall+0x5d2>
					continue;
			}
			wallObject.infoWall[wallObject.amountWallElement].x = X;
 8004836:	4b65      	ldr	r3, [pc, #404]	; (80049cc <generateWall+0x5e8>)
 8004838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800483c:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 8004840:	4962      	ldr	r1, [pc, #392]	; (80049cc <generateWall+0x5e8>)
 8004842:	4613      	mov	r3, r2
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	4413      	add	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	440b      	add	r3, r1
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	601a      	str	r2, [r3, #0]
			wallObject.infoWall[wallObject.amountWallElement].y = Y;
 8004850:	4b5e      	ldr	r3, [pc, #376]	; (80049cc <generateWall+0x5e8>)
 8004852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004856:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 800485a:	495c      	ldr	r1, [pc, #368]	; (80049cc <generateWall+0x5e8>)
 800485c:	4613      	mov	r3, r2
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	3304      	adds	r3, #4
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	601a      	str	r2, [r3, #0]
			lcd_Fill(X, Y, X + snakeWidth, Y + snakeWidth, BROWN);
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	b298      	uxth	r0, r3
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	b299      	uxth	r1, r3
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	b29b      	uxth	r3, r3
 8004878:	3309      	adds	r3, #9
 800487a:	b29a      	uxth	r2, r3
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	b29b      	uxth	r3, r3
 8004880:	3309      	adds	r3, #9
 8004882:	b29b      	uxth	r3, r3
 8004884:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8004888:	9400      	str	r4, [sp, #0]
 800488a:	f7fd fab1 	bl	8001df0 <lcd_Fill>
			if (wallObject.vertical == 1)
 800488e:	4b4f      	ldr	r3, [pc, #316]	; (80049cc <generateWall+0x5e8>)
 8004890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004894:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 8004898:	2b01      	cmp	r3, #1
 800489a:	d134      	bne.n	8004906 <generateWall+0x522>
			{
				lcd_Fill(X, Y + snakeStep, X + snakeWidth, Y + snakeStep + snakeWidth, BROWN);
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	b298      	uxth	r0, r3
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	330a      	adds	r3, #10
 80048a6:	b299      	uxth	r1, r3
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3309      	adds	r3, #9
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	3313      	adds	r3, #19
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	f64b 4440 	movw	r4, #48192	; 0xbc40
 80048bc:	9400      	str	r4, [sp, #0]
 80048be:	f7fd fa97 	bl	8001df0 <lcd_Fill>
				lcd_Fill(X, Y - snakeStep, X + snakeWidth, Y - snakeStep + snakeWidth, BROWN);
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	b298      	uxth	r0, r3
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	3b0a      	subs	r3, #10
 80048cc:	b299      	uxth	r1, r3
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3309      	adds	r3, #9
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29b      	uxth	r3, r3
 80048de:	f64b 4440 	movw	r4, #48192	; 0xbc40
 80048e2:	9400      	str	r4, [sp, #0]
 80048e4:	f7fd fa84 	bl	8001df0 <lcd_Fill>
				wallObject.infoWall[wallObject.amountWallElement].vertical = 1;
 80048e8:	4b38      	ldr	r3, [pc, #224]	; (80049cc <generateWall+0x5e8>)
 80048ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ee:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 80048f2:	4936      	ldr	r1, [pc, #216]	; (80049cc <generateWall+0x5e8>)
 80048f4:	4613      	mov	r3, r2
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	4413      	add	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	3308      	adds	r3, #8
 8004900:	2201      	movs	r2, #1
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	e033      	b.n	800496e <generateWall+0x58a>
			}
			else
			{
				lcd_Fill(X + snakeStep, Y, X + snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	b29b      	uxth	r3, r3
 800490a:	330a      	adds	r3, #10
 800490c:	b298      	uxth	r0, r3
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	b299      	uxth	r1, r3
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	b29b      	uxth	r3, r3
 8004916:	3313      	adds	r3, #19
 8004918:	b29a      	uxth	r2, r3
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	b29b      	uxth	r3, r3
 800491e:	3309      	adds	r3, #9
 8004920:	b29b      	uxth	r3, r3
 8004922:	f64b 4440 	movw	r4, #48192	; 0xbc40
 8004926:	9400      	str	r4, [sp, #0]
 8004928:	f7fd fa62 	bl	8001df0 <lcd_Fill>
				lcd_Fill(X - snakeStep, Y, X - snakeStep + snakeWidth, Y + snakeWidth, BROWN);
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b0a      	subs	r3, #10
 8004932:	b298      	uxth	r0, r3
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	b299      	uxth	r1, r3
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	b29b      	uxth	r3, r3
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	b29b      	uxth	r3, r3
 8004944:	3309      	adds	r3, #9
 8004946:	b29b      	uxth	r3, r3
 8004948:	f64b 4440 	movw	r4, #48192	; 0xbc40
 800494c:	9400      	str	r4, [sp, #0]
 800494e:	f7fd fa4f 	bl	8001df0 <lcd_Fill>
				wallObject.infoWall[wallObject.amountWallElement].vertical = 0;
 8004952:	4b1e      	ldr	r3, [pc, #120]	; (80049cc <generateWall+0x5e8>)
 8004954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004958:	f8d3 2770 	ldr.w	r2, [r3, #1904]	; 0x770
 800495c:	491b      	ldr	r1, [pc, #108]	; (80049cc <generateWall+0x5e8>)
 800495e:	4613      	mov	r3, r2
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	4413      	add	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	440b      	add	r3, r1
 8004968:	3308      	adds	r3, #8
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]
			}
			wallObject.amountWallElement++;
 800496e:	4b17      	ldr	r3, [pc, #92]	; (80049cc <generateWall+0x5e8>)
 8004970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004974:	f8d3 3770 	ldr.w	r3, [r3, #1904]	; 0x770
 8004978:	3301      	adds	r3, #1
 800497a:	4a14      	ldr	r2, [pc, #80]	; (80049cc <generateWall+0x5e8>)
 800497c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004980:	f8c2 3770 	str.w	r3, [r2, #1904]	; 0x770
			wallObject.vertical = !wallObject.vertical;
 8004984:	4b11      	ldr	r3, [pc, #68]	; (80049cc <generateWall+0x5e8>)
 8004986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800498a:	f8d3 3774 	ldr.w	r3, [r3, #1908]	; 0x774
 800498e:	2b00      	cmp	r3, #0
 8004990:	bf0c      	ite	eq
 8004992:	2301      	moveq	r3, #1
 8004994:	2300      	movne	r3, #0
 8004996:	b2db      	uxtb	r3, r3
 8004998:	461a      	mov	r2, r3
 800499a:	4b0c      	ldr	r3, [pc, #48]	; (80049cc <generateWall+0x5e8>)
 800499c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a0:	f8c3 2774 	str.w	r2, [r3, #1908]	; 0x774
			break;
 80049a4:	e00a      	b.n	80049bc <generateWall+0x5d8>
				continue;
 80049a6:	bf00      	nop
 80049a8:	e531      	b.n	800440e <generateWall+0x2a>
				continue;
 80049aa:	bf00      	nop
 80049ac:	e52f      	b.n	800440e <generateWall+0x2a>
				continue;
 80049ae:	bf00      	nop
 80049b0:	e52d      	b.n	800440e <generateWall+0x2a>
					continue;
 80049b2:	bf00      	nop
 80049b4:	e52b      	b.n	800440e <generateWall+0x2a>
					continue;
 80049b6:	bf00      	nop
		{
 80049b8:	e529      	b.n	800440e <generateWall+0x2a>
		return;
 80049ba:	bf00      	nop
		}
	}
}
 80049bc:	372c      	adds	r7, #44	; 0x2c
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd90      	pop	{r4, r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20000098 	.word	0x20000098
 80049c8:	20000094 	.word	0x20000094
 80049cc:	2000127c 	.word	0x2000127c

080049d0 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80049d4:	4802      	ldr	r0, [pc, #8]	; (80049e0 <timer_init+0x10>)
 80049d6:	f004 ff7f 	bl	80098d8 <HAL_TIM_Base_Start_IT>
}
 80049da:	bf00      	nop
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20002a84 	.word	0x20002a84

080049e4 <setTimerSnakeRun>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimerSnakeRun(uint16_t duration){
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	4603      	mov	r3, r0
 80049ec:	80fb      	strh	r3, [r7, #6]
	timerForSnakeRun_MUL= duration/ TIMER_CYCLE_2;
 80049ee:	4a08      	ldr	r2, [pc, #32]	; (8004a10 <setTimerSnakeRun+0x2c>)
 80049f0:	88fb      	ldrh	r3, [r7, #6]
 80049f2:	8013      	strh	r3, [r2, #0]
	timerForSnakeRun= timerForSnakeRun_MUL;
 80049f4:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <setTimerSnakeRun+0x2c>)
 80049f6:	881a      	ldrh	r2, [r3, #0]
 80049f8:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <setTimerSnakeRun+0x30>)
 80049fa:	801a      	strh	r2, [r3, #0]
	flagForSnakeRun= 0;
 80049fc:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <setTimerSnakeRun+0x34>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	801a      	strh	r2, [r3, #0]
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	20002a02 	.word	0x20002a02
 8004a14:	20002a00 	.word	0x20002a00
 8004a18:	200029fe 	.word	0x200029fe

08004a1c <setTimerTiming>:

void setTimerTiming(uint16_t duration)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	80fb      	strh	r3, [r7, #6]
	timerForTiming_MUL =  (uint32_t)duration * 1000/ TIMER_CYCLE_2;
 8004a26:	88fb      	ldrh	r3, [r7, #6]
 8004a28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a2c:	fb02 f303 	mul.w	r3, r2, r3
 8004a30:	4a07      	ldr	r2, [pc, #28]	; (8004a50 <setTimerTiming+0x34>)
 8004a32:	6013      	str	r3, [r2, #0]
	timerForTiming = timerForTiming_MUL;
 8004a34:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <setTimerTiming+0x34>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a06      	ldr	r2, [pc, #24]	; (8004a54 <setTimerTiming+0x38>)
 8004a3a:	6013      	str	r3, [r2, #0]
	flagForTiming = 0;
 8004a3c:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <setTimerTiming+0x3c>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	801a      	strh	r2, [r3, #0]
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	20002a0c 	.word	0x20002a0c
 8004a54:	20002a08 	.word	0x20002a08
 8004a58:	20002a04 	.word	0x20002a04

08004a5c <setTimerDeTime>:

void setTimerDeTime(uint16_t duration)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	4603      	mov	r3, r0
 8004a64:	80fb      	strh	r3, [r7, #6]
	timerForDeTime_MUL = duration/ TIMER_CYCLE_2;
 8004a66:	4a08      	ldr	r2, [pc, #32]	; (8004a88 <setTimerDeTime+0x2c>)
 8004a68:	88fb      	ldrh	r3, [r7, #6]
 8004a6a:	8013      	strh	r3, [r2, #0]
	timerForDeTime = timerForDeTime_MUL;
 8004a6c:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <setTimerDeTime+0x2c>)
 8004a6e:	881a      	ldrh	r2, [r3, #0]
 8004a70:	4b06      	ldr	r3, [pc, #24]	; (8004a8c <setTimerDeTime+0x30>)
 8004a72:	801a      	strh	r2, [r3, #0]
	flagForDeTime = 0;
 8004a74:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <setTimerDeTime+0x34>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	801a      	strh	r2, [r3, #0]
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	20002a14 	.word	0x20002a14
 8004a8c:	20002a12 	.word	0x20002a12
 8004a90:	20002a10 	.word	0x20002a10

08004a94 <setTimerGenerateWall>:

void setTimerGenerateWall(uint16_t duration)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	80fb      	strh	r3, [r7, #6]
	timerForGenerateWall_MUL= duration/ TIMER_CYCLE_2;
 8004a9e:	4a08      	ldr	r2, [pc, #32]	; (8004ac0 <setTimerGenerateWall+0x2c>)
 8004aa0:	88fb      	ldrh	r3, [r7, #6]
 8004aa2:	8013      	strh	r3, [r2, #0]
	timerForGenerateWall= timerForGenerateWall_MUL;
 8004aa4:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <setTimerGenerateWall+0x2c>)
 8004aa6:	881a      	ldrh	r2, [r3, #0]
 8004aa8:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <setTimerGenerateWall+0x30>)
 8004aaa:	801a      	strh	r2, [r3, #0]
	flagForGenerateWall= 0;
 8004aac:	4b06      	ldr	r3, [pc, #24]	; (8004ac8 <setTimerGenerateWall+0x34>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	801a      	strh	r2, [r3, #0]
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	20002a1a 	.word	0x20002a1a
 8004ac4:	20002a18 	.word	0x20002a18
 8004ac8:	20002a16 	.word	0x20002a16

08004acc <setTimerUart>:

void setTimerUart(uint16_t duration)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	80fb      	strh	r3, [r7, #6]
	timerForUart_MUL= duration/ TIMER_CYCLE_2;
 8004ad6:	4a08      	ldr	r2, [pc, #32]	; (8004af8 <setTimerUart+0x2c>)
 8004ad8:	88fb      	ldrh	r3, [r7, #6]
 8004ada:	8013      	strh	r3, [r2, #0]
	timerForUart= timerForUart_MUL;
 8004adc:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <setTimerUart+0x2c>)
 8004ade:	881a      	ldrh	r2, [r3, #0]
 8004ae0:	4b06      	ldr	r3, [pc, #24]	; (8004afc <setTimerUart+0x30>)
 8004ae2:	801a      	strh	r2, [r3, #0]
	flagForUart= 0;
 8004ae4:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <setTimerUart+0x34>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	801a      	strh	r2, [r3, #0]
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	20002a20 	.word	0x20002a20
 8004afc:	20002a1e 	.word	0x20002a1e
 8004b00:	20002a1c 	.word	0x20002a1c

08004b04 <setTimerButton>:

void setTimerButton(uint16_t duration)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	80fb      	strh	r3, [r7, #6]
	timerForButton_MUL= duration/TIMER_CYCLE_2;
 8004b0e:	4a08      	ldr	r2, [pc, #32]	; (8004b30 <setTimerButton+0x2c>)
 8004b10:	88fb      	ldrh	r3, [r7, #6]
 8004b12:	8013      	strh	r3, [r2, #0]
	timerForButton= timerForButton_MUL;
 8004b14:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <setTimerButton+0x2c>)
 8004b16:	881a      	ldrh	r2, [r3, #0]
 8004b18:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <setTimerButton+0x30>)
 8004b1a:	801a      	strh	r2, [r3, #0]
	flagForButton= 0;
 8004b1c:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <setTimerButton+0x34>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	801a      	strh	r2, [r3, #0]
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	200029fc 	.word	0x200029fc
 8004b34:	200029fa 	.word	0x200029fa
 8004b38:	200029f8 	.word	0x200029f8

08004b3c <setTimerSendSensor>:

void setTimerSendSensor(uint16_t duration)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	4603      	mov	r3, r0
 8004b44:	80fb      	strh	r3, [r7, #6]
	timerForSendSensor_MUL= duration/TIMER_CYCLE_2;
 8004b46:	4a08      	ldr	r2, [pc, #32]	; (8004b68 <setTimerSendSensor+0x2c>)
 8004b48:	88fb      	ldrh	r3, [r7, #6]
 8004b4a:	8013      	strh	r3, [r2, #0]
	timerForSendSensor= timerForSendSensor_MUL;
 8004b4c:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <setTimerSendSensor+0x2c>)
 8004b4e:	881a      	ldrh	r2, [r3, #0]
 8004b50:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <setTimerSendSensor+0x30>)
 8004b52:	801a      	strh	r2, [r3, #0]
	flagForSendSensor= 0;
 8004b54:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <setTimerSendSensor+0x34>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	801a      	strh	r2, [r3, #0]
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	20002a26 	.word	0x20002a26
 8004b6c:	20002a24 	.word	0x20002a24
 8004b70:	20002a22 	.word	0x20002a22

08004b74 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b84:	f040 808c 	bne.w	8004ca0 <HAL_TIM_PeriodElapsedCallback+0x12c>
		if(timerForSnakeRun > 0)
 8004b88:	4b47      	ldr	r3, [pc, #284]	; (8004ca8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d010      	beq.n	8004bb2 <HAL_TIM_PeriodElapsedCallback+0x3e>
		{
			timerForSnakeRun--;
 8004b90:	4b45      	ldr	r3, [pc, #276]	; (8004ca8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	4b43      	ldr	r3, [pc, #268]	; (8004ca8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004b9a:	801a      	strh	r2, [r3, #0]
			if(timerForSnakeRun <= 0) {
 8004b9c:	4b42      	ldr	r3, [pc, #264]	; (8004ca8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d106      	bne.n	8004bb2 <HAL_TIM_PeriodElapsedCallback+0x3e>
				flagForSnakeRun = 1;
 8004ba4:	4b41      	ldr	r3, [pc, #260]	; (8004cac <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	801a      	strh	r2, [r3, #0]
				timerForSnakeRun = timerForSnakeRun_MUL;
 8004baa:	4b41      	ldr	r3, [pc, #260]	; (8004cb0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004bac:	881a      	ldrh	r2, [r3, #0]
 8004bae:	4b3e      	ldr	r3, [pc, #248]	; (8004ca8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004bb0:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timerForButton > 0)
 8004bb2:	4b40      	ldr	r3, [pc, #256]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d010      	beq.n	8004bdc <HAL_TIM_PeriodElapsedCallback+0x68>
		{
			timerForButton--;
 8004bba:	4b3e      	ldr	r3, [pc, #248]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	4b3c      	ldr	r3, [pc, #240]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004bc4:	801a      	strh	r2, [r3, #0]
			if (timerForButton <= 0)
 8004bc6:	4b3b      	ldr	r3, [pc, #236]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d106      	bne.n	8004bdc <HAL_TIM_PeriodElapsedCallback+0x68>
			{
				flagForButton= 1;
 8004bce:	4b3a      	ldr	r3, [pc, #232]	; (8004cb8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	801a      	strh	r2, [r3, #0]
				timerForButton= timerForButton_MUL;
 8004bd4:	4b39      	ldr	r3, [pc, #228]	; (8004cbc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8004bd6:	881a      	ldrh	r2, [r3, #0]
 8004bd8:	4b36      	ldr	r3, [pc, #216]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004bda:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timerForTiming > 0)
 8004bdc:	4b38      	ldr	r3, [pc, #224]	; (8004cc0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00b      	beq.n	8004bfc <HAL_TIM_PeriodElapsedCallback+0x88>
		{
			timerForTiming--;
 8004be4:	4b36      	ldr	r3, [pc, #216]	; (8004cc0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3b01      	subs	r3, #1
 8004bea:	4a35      	ldr	r2, [pc, #212]	; (8004cc0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004bec:	6013      	str	r3, [r2, #0]
			if(timerForTiming <= 0)
 8004bee:	4b34      	ldr	r3, [pc, #208]	; (8004cc0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d102      	bne.n	8004bfc <HAL_TIM_PeriodElapsedCallback+0x88>
			{
				flagForTiming = 1;
 8004bf6:	4b33      	ldr	r3, [pc, #204]	; (8004cc4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timerForDeTime > 0)
 8004bfc:	4b32      	ldr	r3, [pc, #200]	; (8004cc8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00c      	beq.n	8004c1e <HAL_TIM_PeriodElapsedCallback+0xaa>
		{
			timerForDeTime--;
 8004c04:	4b30      	ldr	r3, [pc, #192]	; (8004cc8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	4b2e      	ldr	r3, [pc, #184]	; (8004cc8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004c0e:	801a      	strh	r2, [r3, #0]
			if(timerForDeTime <= 0)
 8004c10:	4b2d      	ldr	r3, [pc, #180]	; (8004cc8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d102      	bne.n	8004c1e <HAL_TIM_PeriodElapsedCallback+0xaa>
			{
				flagForDeTime = 1;
 8004c18:	4b2c      	ldr	r3, [pc, #176]	; (8004ccc <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timerForGenerateWall > 0)
 8004c1e:	4b2c      	ldr	r3, [pc, #176]	; (8004cd0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d010      	beq.n	8004c48 <HAL_TIM_PeriodElapsedCallback+0xd4>
		{
			timerForGenerateWall--;
 8004c26:	4b2a      	ldr	r3, [pc, #168]	; (8004cd0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	4b28      	ldr	r3, [pc, #160]	; (8004cd0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8004c30:	801a      	strh	r2, [r3, #0]
			if (timerForGenerateWall <= 0)
 8004c32:	4b27      	ldr	r3, [pc, #156]	; (8004cd0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d106      	bne.n	8004c48 <HAL_TIM_PeriodElapsedCallback+0xd4>
			{
				flagForGenerateWall= 1;
 8004c3a:	4b26      	ldr	r3, [pc, #152]	; (8004cd4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	801a      	strh	r2, [r3, #0]
				timerForGenerateWall= timerForGenerateWall_MUL;
 8004c40:	4b25      	ldr	r3, [pc, #148]	; (8004cd8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8004c42:	881a      	ldrh	r2, [r3, #0]
 8004c44:	4b22      	ldr	r3, [pc, #136]	; (8004cd0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8004c46:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timerForUart > 0)
 8004c48:	4b24      	ldr	r3, [pc, #144]	; (8004cdc <HAL_TIM_PeriodElapsedCallback+0x168>)
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d010      	beq.n	8004c72 <HAL_TIM_PeriodElapsedCallback+0xfe>
		{
			timerForUart--;
 8004c50:	4b22      	ldr	r3, [pc, #136]	; (8004cdc <HAL_TIM_PeriodElapsedCallback+0x168>)
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	3b01      	subs	r3, #1
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	4b20      	ldr	r3, [pc, #128]	; (8004cdc <HAL_TIM_PeriodElapsedCallback+0x168>)
 8004c5a:	801a      	strh	r2, [r3, #0]
			if (timerForUart <= 0)
 8004c5c:	4b1f      	ldr	r3, [pc, #124]	; (8004cdc <HAL_TIM_PeriodElapsedCallback+0x168>)
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d106      	bne.n	8004c72 <HAL_TIM_PeriodElapsedCallback+0xfe>
			{
				flagForUart= 1;
 8004c64:	4b1e      	ldr	r3, [pc, #120]	; (8004ce0 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8004c66:	2201      	movs	r2, #1
 8004c68:	801a      	strh	r2, [r3, #0]
				timerForUart= timerForUart_MUL;
 8004c6a:	4b1e      	ldr	r3, [pc, #120]	; (8004ce4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8004c6c:	881a      	ldrh	r2, [r3, #0]
 8004c6e:	4b1b      	ldr	r3, [pc, #108]	; (8004cdc <HAL_TIM_PeriodElapsedCallback+0x168>)
 8004c70:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timerForSendSensor > 0)
 8004c72:	4b1d      	ldr	r3, [pc, #116]	; (8004ce8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d010      	beq.n	8004c9c <HAL_TIM_PeriodElapsedCallback+0x128>
		{
			timerForSendSensor--;
 8004c7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ce8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	4b19      	ldr	r3, [pc, #100]	; (8004ce8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8004c84:	801a      	strh	r2, [r3, #0]
			if (timerForSendSensor <= 0)
 8004c86:	4b18      	ldr	r3, [pc, #96]	; (8004ce8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <HAL_TIM_PeriodElapsedCallback+0x128>
			{
				flagForSendSensor= 1;
 8004c8e:	4b17      	ldr	r3, [pc, #92]	; (8004cec <HAL_TIM_PeriodElapsedCallback+0x178>)
 8004c90:	2201      	movs	r2, #1
 8004c92:	801a      	strh	r2, [r3, #0]
				timerForSendSensor= timerForSendSensor_MUL;
 8004c94:	4b16      	ldr	r3, [pc, #88]	; (8004cf0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8004c96:	881a      	ldrh	r2, [r3, #0]
 8004c98:	4b13      	ldr	r3, [pc, #76]	; (8004ce8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8004c9a:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 8004c9c:	f7fd fcfc 	bl	8002698 <led7_Scan>
	}
}
 8004ca0:	bf00      	nop
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	20002a00 	.word	0x20002a00
 8004cac:	200029fe 	.word	0x200029fe
 8004cb0:	20002a02 	.word	0x20002a02
 8004cb4:	200029fa 	.word	0x200029fa
 8004cb8:	200029f8 	.word	0x200029f8
 8004cbc:	200029fc 	.word	0x200029fc
 8004cc0:	20002a08 	.word	0x20002a08
 8004cc4:	20002a04 	.word	0x20002a04
 8004cc8:	20002a12 	.word	0x20002a12
 8004ccc:	20002a10 	.word	0x20002a10
 8004cd0:	20002a18 	.word	0x20002a18
 8004cd4:	20002a16 	.word	0x20002a16
 8004cd8:	20002a1a 	.word	0x20002a1a
 8004cdc:	20002a1e 	.word	0x20002a1e
 8004ce0:	20002a1c 	.word	0x20002a1c
 8004ce4:	20002a20 	.word	0x20002a20
 8004ce8:	20002a24 	.word	0x20002a24
 8004cec:	20002a22 	.word	0x20002a22
 8004cf0:	20002a26 	.word	0x20002a26

08004cf4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004cf8:	4b17      	ldr	r3, [pc, #92]	; (8004d58 <MX_SPI1_Init+0x64>)
 8004cfa:	4a18      	ldr	r2, [pc, #96]	; (8004d5c <MX_SPI1_Init+0x68>)
 8004cfc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004cfe:	4b16      	ldr	r3, [pc, #88]	; (8004d58 <MX_SPI1_Init+0x64>)
 8004d00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004d04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004d06:	4b14      	ldr	r3, [pc, #80]	; (8004d58 <MX_SPI1_Init+0x64>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004d0c:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <MX_SPI1_Init+0x64>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d12:	4b11      	ldr	r3, [pc, #68]	; (8004d58 <MX_SPI1_Init+0x64>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004d18:	4b0f      	ldr	r3, [pc, #60]	; (8004d58 <MX_SPI1_Init+0x64>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004d1e:	4b0e      	ldr	r3, [pc, #56]	; (8004d58 <MX_SPI1_Init+0x64>)
 8004d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d26:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <MX_SPI1_Init+0x64>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d2c:	4b0a      	ldr	r3, [pc, #40]	; (8004d58 <MX_SPI1_Init+0x64>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d32:	4b09      	ldr	r3, [pc, #36]	; (8004d58 <MX_SPI1_Init+0x64>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d38:	4b07      	ldr	r3, [pc, #28]	; (8004d58 <MX_SPI1_Init+0x64>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004d3e:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <MX_SPI1_Init+0x64>)
 8004d40:	220a      	movs	r2, #10
 8004d42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004d44:	4804      	ldr	r0, [pc, #16]	; (8004d58 <MX_SPI1_Init+0x64>)
 8004d46:	f003 ff87 	bl	8008c58 <HAL_SPI_Init>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004d50:	f7fd fee6 	bl	8002b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004d54:	bf00      	nop
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	20002a28 	.word	0x20002a28
 8004d5c:	40013000 	.word	0x40013000

08004d60 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08a      	sub	sp, #40	; 0x28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d68:	f107 0314 	add.w	r3, r7, #20
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]
 8004d70:	605a      	str	r2, [r3, #4]
 8004d72:	609a      	str	r2, [r3, #8]
 8004d74:	60da      	str	r2, [r3, #12]
 8004d76:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a19      	ldr	r2, [pc, #100]	; (8004de4 <HAL_SPI_MspInit+0x84>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d12b      	bne.n	8004dda <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004d82:	2300      	movs	r3, #0
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	4b18      	ldr	r3, [pc, #96]	; (8004de8 <HAL_SPI_MspInit+0x88>)
 8004d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8a:	4a17      	ldr	r2, [pc, #92]	; (8004de8 <HAL_SPI_MspInit+0x88>)
 8004d8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d90:	6453      	str	r3, [r2, #68]	; 0x44
 8004d92:	4b15      	ldr	r3, [pc, #84]	; (8004de8 <HAL_SPI_MspInit+0x88>)
 8004d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d9a:	613b      	str	r3, [r7, #16]
 8004d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	4b11      	ldr	r3, [pc, #68]	; (8004de8 <HAL_SPI_MspInit+0x88>)
 8004da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da6:	4a10      	ldr	r2, [pc, #64]	; (8004de8 <HAL_SPI_MspInit+0x88>)
 8004da8:	f043 0302 	orr.w	r3, r3, #2
 8004dac:	6313      	str	r3, [r2, #48]	; 0x30
 8004dae:	4b0e      	ldr	r3, [pc, #56]	; (8004de8 <HAL_SPI_MspInit+0x88>)
 8004db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004dba:	2338      	movs	r3, #56	; 0x38
 8004dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004dca:	2305      	movs	r3, #5
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dce:	f107 0314 	add.w	r3, r7, #20
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4805      	ldr	r0, [pc, #20]	; (8004dec <HAL_SPI_MspInit+0x8c>)
 8004dd6:	f003 f8f1 	bl	8007fbc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004dda:	bf00      	nop
 8004ddc:	3728      	adds	r7, #40	; 0x28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	40013000 	.word	0x40013000
 8004de8:	40023800 	.word	0x40023800
 8004dec:	40020400 	.word	0x40020400

08004df0 <startUI>:
#include "timingModeUI.h"
#include "advanceModeUI.h"
#include "exitUI.h"
#include "uart.h"

void startUI(){
 8004df0:	b590      	push	{r4, r7, lr}
 8004df2:	b093      	sub	sp, #76	; 0x4c
 8004df4:	af04      	add	r7, sp, #16
	char str1[50] = "";
 8004df6:	2300      	movs	r3, #0
 8004df8:	603b      	str	r3, [r7, #0]
 8004dfa:	1d3b      	adds	r3, r7, #4
 8004dfc:	222e      	movs	r2, #46	; 0x2e
 8004dfe:	2100      	movs	r1, #0
 8004e00:	4618      	mov	r0, r3
 8004e02:	f006 fde1 	bl	800b9c8 <memset>

	lcd_Clear(BLACK);
 8004e06:	2000      	movs	r0, #0
 8004e08:	f7fc ffc0 	bl	8001d8c <lcd_Clear>
//	lcd_Fill(0, 0, 240, 30, BLACK);
	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8004e0c:	4b32      	ldr	r3, [pc, #200]	; (8004ed8 <startUI+0xe8>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	b298      	uxth	r0, r3
 8004e12:	4b32      	ldr	r3, [pc, #200]	; (8004edc <startUI+0xec>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	b299      	uxth	r1, r3
 8004e18:	4b31      	ldr	r3, [pc, #196]	; (8004ee0 <startUI+0xf0>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	4b31      	ldr	r3, [pc, #196]	; (8004ee4 <startUI+0xf4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	4c30      	ldr	r4, [pc, #192]	; (8004ee8 <startUI+0xf8>)
 8004e26:	9400      	str	r4, [sp, #0]
 8004e28:	f7fd f9ba 	bl	80021a0 <lcd_ShowPicture>
	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	9302      	str	r3, [sp, #8]
 8004e30:	2318      	movs	r3, #24
 8004e32:	9301      	str	r3, [sp, #4]
 8004e34:	f248 4330 	movw	r3, #33840	; 0x8430
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e3e:	4a2b      	ldr	r2, [pc, #172]	; (8004eec <startUI+0xfc>)
 8004e40:	2137      	movs	r1, #55	; 0x37
 8004e42:	203c      	movs	r0, #60	; 0x3c
 8004e44:	f7fd fb86 	bl	8002554 <lcd_ShowStr>

	lcd_ShowStr(40, 100, " ENTER YOUR ID ", WHITE, GRAY, 24, 0);
 8004e48:	2300      	movs	r3, #0
 8004e4a:	9302      	str	r3, [sp, #8]
 8004e4c:	2318      	movs	r3, #24
 8004e4e:	9301      	str	r3, [sp, #4]
 8004e50:	f248 4330 	movw	r3, #33840	; 0x8430
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e5a:	4a25      	ldr	r2, [pc, #148]	; (8004ef0 <startUI+0x100>)
 8004e5c:	2164      	movs	r1, #100	; 0x64
 8004e5e:	2028      	movs	r0, #40	; 0x28
 8004e60:	f7fd fb78 	bl	8002554 <lcd_ShowStr>

	lcd_DrawRectangle(60, 150, 180, 180, WHITE);
 8004e64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	23b4      	movs	r3, #180	; 0xb4
 8004e6c:	22b4      	movs	r2, #180	; 0xb4
 8004e6e:	2196      	movs	r1, #150	; 0x96
 8004e70:	203c      	movs	r0, #60	; 0x3c
 8004e72:	f7fd f88e 	bl	8001f92 <lcd_DrawRectangle>

	char *str2 = convert2str(ID);
 8004e76:	4b1f      	ldr	r3, [pc, #124]	; (8004ef4 <startUI+0x104>)
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fd fea8 	bl	8002bd0 <convert2str>
 8004e80:	6378      	str	r0, [r7, #52]	; 0x34
	strcat(str1, str2);
 8004e82:	463b      	mov	r3, r7
 8004e84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e86:	4618      	mov	r0, r3
 8004e88:	f006 fe46 	bl	800bb18 <strcat>
	lcd_StrCenter(0, 152, str1, WHITE, RED, 24, 1);
 8004e8c:	463a      	mov	r2, r7
 8004e8e:	2301      	movs	r3, #1
 8004e90:	9302      	str	r3, [sp, #8]
 8004e92:	2318      	movs	r3, #24
 8004e94:	9301      	str	r3, [sp, #4]
 8004e96:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ea0:	2198      	movs	r1, #152	; 0x98
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	f7fd fbba 	bl	800261c <lcd_StrCenter>

	lcd_ShowStr(80, 230, " START ", WHITE, GRAY, 24, 0);
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	9302      	str	r3, [sp, #8]
 8004eac:	2318      	movs	r3, #24
 8004eae:	9301      	str	r3, [sp, #4]
 8004eb0:	f248 4330 	movw	r3, #33840	; 0x8430
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004eba:	4a0f      	ldr	r2, [pc, #60]	; (8004ef8 <startUI+0x108>)
 8004ebc:	21e6      	movs	r1, #230	; 0xe6
 8004ebe:	2050      	movs	r0, #80	; 0x50
 8004ec0:	f7fd fb48 	bl	8002554 <lcd_ShowStr>
	show7seg(0, 0, 0, 0);
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	2100      	movs	r1, #0
 8004eca:	2000      	movs	r0, #0
 8004ecc:	f001 fbba 	bl	8006644 <show7seg>
}
 8004ed0:	bf00      	nop
 8004ed2:	373c      	adds	r7, #60	; 0x3c
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd90      	pop	{r4, r7, pc}
 8004ed8:	20000074 	.word	0x20000074
 8004edc:	20000078 	.word	0x20000078
 8004ee0:	2000007c 	.word	0x2000007c
 8004ee4:	20000080 	.word	0x20000080
 8004ee8:	080103f4 	.word	0x080103f4
 8004eec:	0800d0f0 	.word	0x0800d0f0
 8004ef0:	0800d100 	.word	0x0800d100
 8004ef4:	20000258 	.word	0x20000258
 8004ef8:	0800d110 	.word	0x0800d110

08004efc <eraseArrow>:

void eraseArrow()
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af02      	add	r7, sp, #8
	lcd_Fill(ARROWX1, ARROWNORMALY2, ARROWX2+1, 2 * ARROWTIMINGY1 - ARROWNORMALY2 + 1, BLACK);
 8004f02:	2300      	movs	r3, #0
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	f240 134b 	movw	r3, #331	; 0x14b
 8004f0a:	22dd      	movs	r2, #221	; 0xdd
 8004f0c:	21be      	movs	r1, #190	; 0xbe
 8004f0e:	20b4      	movs	r0, #180	; 0xb4
 8004f10:	f7fc ff6e 	bl	8001df0 <lcd_Fill>
}
 8004f14:	bf00      	nop
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <drawArrow>:

void drawArrow()
{
 8004f1c:	b590      	push	{r4, r7, lr}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af02      	add	r7, sp, #8
	// draw arrow
	eraseArrow();
 8004f22:	f7ff ffeb 	bl	8004efc <eraseArrow>
	lcd_DrawLine(arrowX2, arrowY2, arrowX1, arrowY1, WHITE);
 8004f26:	4b23      	ldr	r3, [pc, #140]	; (8004fb4 <drawArrow+0x98>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	b298      	uxth	r0, r3
 8004f2c:	4b22      	ldr	r3, [pc, #136]	; (8004fb8 <drawArrow+0x9c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	b299      	uxth	r1, r3
 8004f32:	4b22      	ldr	r3, [pc, #136]	; (8004fbc <drawArrow+0xa0>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	4b21      	ldr	r3, [pc, #132]	; (8004fc0 <drawArrow+0xa4>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8004f42:	9400      	str	r4, [sp, #0]
 8004f44:	f7fc ffa1 	bl	8001e8a <lcd_DrawLine>
	lcd_DrawLine(arrowX1, arrowY1, arrowX2, 2 * arrowY1 - arrowY2, WHITE);
 8004f48:	4b1c      	ldr	r3, [pc, #112]	; (8004fbc <drawArrow+0xa0>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	b298      	uxth	r0, r3
 8004f4e:	4b1c      	ldr	r3, [pc, #112]	; (8004fc0 <drawArrow+0xa4>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	b299      	uxth	r1, r3
 8004f54:	4b17      	ldr	r3, [pc, #92]	; (8004fb4 <drawArrow+0x98>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	b29c      	uxth	r4, r3
 8004f5a:	4b19      	ldr	r3, [pc, #100]	; (8004fc0 <drawArrow+0xa4>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <drawArrow+0x9c>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f72:	9200      	str	r2, [sp, #0]
 8004f74:	4622      	mov	r2, r4
 8004f76:	f7fc ff88 	bl	8001e8a <lcd_DrawLine>
	lcd_DrawLine(arrowX2, arrowY2, arrowX2, 2 * arrowY1 - arrowY2, WHITE);
 8004f7a:	4b0e      	ldr	r3, [pc, #56]	; (8004fb4 <drawArrow+0x98>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	b298      	uxth	r0, r3
 8004f80:	4b0d      	ldr	r3, [pc, #52]	; (8004fb8 <drawArrow+0x9c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	b299      	uxth	r1, r3
 8004f86:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <drawArrow+0x98>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	b29c      	uxth	r4, r3
 8004f8c:	4b0c      	ldr	r3, [pc, #48]	; (8004fc0 <drawArrow+0xa4>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	4b08      	ldr	r3, [pc, #32]	; (8004fb8 <drawArrow+0x9c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fa4:	9200      	str	r2, [sp, #0]
 8004fa6:	4622      	mov	r2, r4
 8004fa8:	f7fc ff6f 	bl	8001e8a <lcd_DrawLine>
}
 8004fac:	bf00      	nop
 8004fae:	3704      	adds	r7, #4
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd90      	pop	{r4, r7, pc}
 8004fb4:	20000008 	.word	0x20000008
 8004fb8:	20000010 	.word	0x20000010
 8004fbc:	20000004 	.word	0x20000004
 8004fc0:	2000000c 	.word	0x2000000c

08004fc4 <arrowInPickMode>:

void arrowInPickMode()
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af04      	add	r7, sp, #16
	if(button_count[3] == 1)
 8004fca:	4b99      	ldr	r3, [pc, #612]	; (8005230 <arrowInPickMode+0x26c>)
 8004fcc:	88db      	ldrh	r3, [r3, #6]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d117      	bne.n	8005002 <arrowInPickMode+0x3e>
	{
		flagChange = 1;
 8004fd2:	4b98      	ldr	r3, [pc, #608]	; (8005234 <arrowInPickMode+0x270>)
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]
		//turn arrow up
		switch (arrowMode)
 8004fd8:	4b97      	ldr	r3, [pc, #604]	; (8005238 <arrowInPickMode+0x274>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b05      	cmp	r3, #5
 8004fde:	d009      	beq.n	8004ff4 <arrowInPickMode+0x30>
 8004fe0:	2b05      	cmp	r3, #5
 8004fe2:	dc11      	bgt.n	8005008 <arrowInPickMode+0x44>
 8004fe4:	2b03      	cmp	r3, #3
 8004fe6:	d00e      	beq.n	8005006 <arrowInPickMode+0x42>
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d10d      	bne.n	8005008 <arrowInPickMode+0x44>
		case NORMALMODE:
			// Do nothing
			break;
		case TIMINGMODE:
			// turn it up to the position of normal mode and take the window up
			arrowMode = NORMALMODE;
 8004fec:	4b92      	ldr	r3, [pc, #584]	; (8005238 <arrowInPickMode+0x274>)
 8004fee:	2203      	movs	r2, #3
 8004ff0:	601a      	str	r2, [r3, #0]
			break;
 8004ff2:	e009      	b.n	8005008 <arrowInPickMode+0x44>
		case ADVANCEMODE:
			// Turn it up to the position of timing mode
			arrowMode = TIMINGMODE;
 8004ff4:	4b90      	ldr	r3, [pc, #576]	; (8005238 <arrowInPickMode+0x274>)
 8004ff6:	2204      	movs	r2, #4
 8004ff8:	601a      	str	r2, [r3, #0]
			flagUpDOwn = 0;
 8004ffa:	4b90      	ldr	r3, [pc, #576]	; (800523c <arrowInPickMode+0x278>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]
			break;
 8005000:	e002      	b.n	8005008 <arrowInPickMode+0x44>
		}

	}
 8005002:	bf00      	nop
 8005004:	e000      	b.n	8005008 <arrowInPickMode+0x44>
			break;
 8005006:	bf00      	nop
	if(button_count[7] == 1)
 8005008:	4b89      	ldr	r3, [pc, #548]	; (8005230 <arrowInPickMode+0x26c>)
 800500a:	89db      	ldrh	r3, [r3, #14]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d118      	bne.n	8005042 <arrowInPickMode+0x7e>
	{
		flagChange = 1;
 8005010:	4b88      	ldr	r3, [pc, #544]	; (8005234 <arrowInPickMode+0x270>)
 8005012:	2201      	movs	r2, #1
 8005014:	601a      	str	r2, [r3, #0]
		//turn arrow down
		switch (arrowMode)
 8005016:	4b88      	ldr	r3, [pc, #544]	; (8005238 <arrowInPickMode+0x274>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b05      	cmp	r3, #5
 800501c:	d013      	beq.n	8005046 <arrowInPickMode+0x82>
 800501e:	2b05      	cmp	r3, #5
 8005020:	dc12      	bgt.n	8005048 <arrowInPickMode+0x84>
 8005022:	2b03      	cmp	r3, #3
 8005024:	d002      	beq.n	800502c <arrowInPickMode+0x68>
 8005026:	2b04      	cmp	r3, #4
 8005028:	d007      	beq.n	800503a <arrowInPickMode+0x76>
 800502a:	e00d      	b.n	8005048 <arrowInPickMode+0x84>
		{
		case NORMALMODE:
			// turn it down to the position of timing mode
			arrowMode = TIMINGMODE;
 800502c:	4b82      	ldr	r3, [pc, #520]	; (8005238 <arrowInPickMode+0x274>)
 800502e:	2204      	movs	r2, #4
 8005030:	601a      	str	r2, [r3, #0]
			flagUpDOwn = 1;
 8005032:	4b82      	ldr	r3, [pc, #520]	; (800523c <arrowInPickMode+0x278>)
 8005034:	2201      	movs	r2, #1
 8005036:	601a      	str	r2, [r3, #0]
			break;
 8005038:	e006      	b.n	8005048 <arrowInPickMode+0x84>
		case TIMINGMODE:
			// turn it down to the position of advance mode and take the window down
			arrowMode = ADVANCEMODE;
 800503a:	4b7f      	ldr	r3, [pc, #508]	; (8005238 <arrowInPickMode+0x274>)
 800503c:	2205      	movs	r2, #5
 800503e:	601a      	str	r2, [r3, #0]
			break;
 8005040:	e002      	b.n	8005048 <arrowInPickMode+0x84>
		case ADVANCEMODE:
			// Do nothing
			break;
		}
	}
 8005042:	bf00      	nop
 8005044:	e000      	b.n	8005048 <arrowInPickMode+0x84>
			break;
 8005046:	bf00      	nop
	if(flagChange == 1)
 8005048:	4b7a      	ldr	r3, [pc, #488]	; (8005234 <arrowInPickMode+0x270>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b01      	cmp	r3, #1
 800504e:	f040 814d 	bne.w	80052ec <arrowInPickMode+0x328>
	{
		switch (arrowMode)
 8005052:	4b79      	ldr	r3, [pc, #484]	; (8005238 <arrowInPickMode+0x274>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b05      	cmp	r3, #5
 8005058:	f000 80fc 	beq.w	8005254 <arrowInPickMode+0x290>
 800505c:	2b05      	cmp	r3, #5
 800505e:	f300 8142 	bgt.w	80052e6 <arrowInPickMode+0x322>
 8005062:	2b03      	cmp	r3, #3
 8005064:	d002      	beq.n	800506c <arrowInPickMode+0xa8>
 8005066:	2b04      	cmp	r3, #4
 8005068:	d04f      	beq.n	800510a <arrowInPickMode+0x146>
 800506a:	e13c      	b.n	80052e6 <arrowInPickMode+0x322>
		{
		case NORMALMODE:
			arrowY1 = ARROWNORMALY1;
 800506c:	4b74      	ldr	r3, [pc, #464]	; (8005240 <arrowInPickMode+0x27c>)
 800506e:	22d2      	movs	r2, #210	; 0xd2
 8005070:	601a      	str	r2, [r3, #0]
			arrowY2 = ARROWNORMALY2;
 8005072:	4b74      	ldr	r3, [pc, #464]	; (8005244 <arrowInPickMode+0x280>)
 8005074:	22be      	movs	r2, #190	; 0xbe
 8005076:	601a      	str	r2, [r3, #0]

			// Show normal and timing mode & Draw the triangle show down
			lcd_Fill(0, 180, 240, 320, BLACK);
 8005078:	2300      	movs	r3, #0
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005080:	22f0      	movs	r2, #240	; 0xf0
 8005082:	21b4      	movs	r1, #180	; 0xb4
 8005084:	2000      	movs	r0, #0
 8005086:	f7fc feb3 	bl	8001df0 <lcd_Fill>
			lcd_ShowStr(10, 200, " NORMAL MODE ", RED, GRAY, 24, 0);
 800508a:	2300      	movs	r3, #0
 800508c:	9302      	str	r3, [sp, #8]
 800508e:	2318      	movs	r3, #24
 8005090:	9301      	str	r3, [sp, #4]
 8005092:	f248 4330 	movw	r3, #33840	; 0x8430
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800509c:	4a6a      	ldr	r2, [pc, #424]	; (8005248 <arrowInPickMode+0x284>)
 800509e:	21c8      	movs	r1, #200	; 0xc8
 80050a0:	200a      	movs	r0, #10
 80050a2:	f7fd fa57 	bl	8002554 <lcd_ShowStr>
			lcd_ShowStr(10, 250, " TIMING MODE ", WHITE, GRAY, 24, 0);
 80050a6:	2300      	movs	r3, #0
 80050a8:	9302      	str	r3, [sp, #8]
 80050aa:	2318      	movs	r3, #24
 80050ac:	9301      	str	r3, [sp, #4]
 80050ae:	f248 4330 	movw	r3, #33840	; 0x8430
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050b8:	4a64      	ldr	r2, [pc, #400]	; (800524c <arrowInPickMode+0x288>)
 80050ba:	21fa      	movs	r1, #250	; 0xfa
 80050bc:	200a      	movs	r0, #10
 80050be:	f7fd fa49 	bl	8002554 <lcd_ShowStr>
			lcd_DrawLine(110, 300, 130, 300, WHITE);
 80050c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80050cc:	2282      	movs	r2, #130	; 0x82
 80050ce:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80050d2:	206e      	movs	r0, #110	; 0x6e
 80050d4:	f7fc fed9 	bl	8001e8a <lcd_DrawLine>
			lcd_DrawLine(110, 300, 120, 310, WHITE);
 80050d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	f44f 739b 	mov.w	r3, #310	; 0x136
 80050e2:	2278      	movs	r2, #120	; 0x78
 80050e4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80050e8:	206e      	movs	r0, #110	; 0x6e
 80050ea:	f7fc fece 	bl	8001e8a <lcd_DrawLine>
			lcd_DrawLine(120, 310, 130, 300, WHITE);
 80050ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80050f8:	2282      	movs	r2, #130	; 0x82
 80050fa:	f44f 719b 	mov.w	r1, #310	; 0x136
 80050fe:	2078      	movs	r0, #120	; 0x78
 8005100:	f7fc fec3 	bl	8001e8a <lcd_DrawLine>

			// Draw arrow
			drawArrow();
 8005104:	f7ff ff0a 	bl	8004f1c <drawArrow>
			break;
 8005108:	e0ed      	b.n	80052e6 <arrowInPickMode+0x322>
		case TIMINGMODE:
			// TIMING is top
			lcd_Fill(0, 180, 240, 320, BLACK);
 800510a:	2300      	movs	r3, #0
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005112:	22f0      	movs	r2, #240	; 0xf0
 8005114:	21b4      	movs	r1, #180	; 0xb4
 8005116:	2000      	movs	r0, #0
 8005118:	f7fc fe6a 	bl	8001df0 <lcd_Fill>
			if(flagUpDOwn == 0)
 800511c:	4b47      	ldr	r3, [pc, #284]	; (800523c <arrowInPickMode+0x278>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d13d      	bne.n	80051a0 <arrowInPickMode+0x1dc>
			{
				arrowY1 = ARROWNORMALY1;
 8005124:	4b46      	ldr	r3, [pc, #280]	; (8005240 <arrowInPickMode+0x27c>)
 8005126:	22d2      	movs	r2, #210	; 0xd2
 8005128:	601a      	str	r2, [r3, #0]
				arrowY2 = ARROWNORMALY2;
 800512a:	4b46      	ldr	r3, [pc, #280]	; (8005244 <arrowInPickMode+0x280>)
 800512c:	22be      	movs	r2, #190	; 0xbe
 800512e:	601a      	str	r2, [r3, #0]
				lcd_ShowStr(10, 200, " TIMING MODE ", RED, GRAY, 24, 0);
 8005130:	2300      	movs	r3, #0
 8005132:	9302      	str	r3, [sp, #8]
 8005134:	2318      	movs	r3, #24
 8005136:	9301      	str	r3, [sp, #4]
 8005138:	f248 4330 	movw	r3, #33840	; 0x8430
 800513c:	9300      	str	r3, [sp, #0]
 800513e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005142:	4a42      	ldr	r2, [pc, #264]	; (800524c <arrowInPickMode+0x288>)
 8005144:	21c8      	movs	r1, #200	; 0xc8
 8005146:	200a      	movs	r0, #10
 8005148:	f7fd fa04 	bl	8002554 <lcd_ShowStr>
				lcd_ShowStr(10, 250, " ADVANCE MODE ", WHITE, GRAY, 24, 0);
 800514c:	2300      	movs	r3, #0
 800514e:	9302      	str	r3, [sp, #8]
 8005150:	2318      	movs	r3, #24
 8005152:	9301      	str	r3, [sp, #4]
 8005154:	f248 4330 	movw	r3, #33840	; 0x8430
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800515e:	4a3c      	ldr	r2, [pc, #240]	; (8005250 <arrowInPickMode+0x28c>)
 8005160:	21fa      	movs	r1, #250	; 0xfa
 8005162:	200a      	movs	r0, #10
 8005164:	f7fd f9f6 	bl	8002554 <lcd_ShowStr>

				lcd_DrawLine(110, 190, 130, 190, WHITE);
 8005168:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	23be      	movs	r3, #190	; 0xbe
 8005170:	2282      	movs	r2, #130	; 0x82
 8005172:	21be      	movs	r1, #190	; 0xbe
 8005174:	206e      	movs	r0, #110	; 0x6e
 8005176:	f7fc fe88 	bl	8001e8a <lcd_DrawLine>
				lcd_DrawLine(110, 190, 120, 180, WHITE);
 800517a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	23b4      	movs	r3, #180	; 0xb4
 8005182:	2278      	movs	r2, #120	; 0x78
 8005184:	21be      	movs	r1, #190	; 0xbe
 8005186:	206e      	movs	r0, #110	; 0x6e
 8005188:	f7fc fe7f 	bl	8001e8a <lcd_DrawLine>
				lcd_DrawLine(120, 180, 130, 190, WHITE);
 800518c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	23be      	movs	r3, #190	; 0xbe
 8005194:	2282      	movs	r2, #130	; 0x82
 8005196:	21b4      	movs	r1, #180	; 0xb4
 8005198:	2078      	movs	r0, #120	; 0x78
 800519a:	f7fc fe76 	bl	8001e8a <lcd_DrawLine>
 800519e:	e043      	b.n	8005228 <arrowInPickMode+0x264>
			}
			else
			{
				arrowY1 = ARROWTIMINGY1;
 80051a0:	4b27      	ldr	r3, [pc, #156]	; (8005240 <arrowInPickMode+0x27c>)
 80051a2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80051a6:	601a      	str	r2, [r3, #0]
				arrowY2 = ARROWTIMINGY2;
 80051a8:	4b26      	ldr	r3, [pc, #152]	; (8005244 <arrowInPickMode+0x280>)
 80051aa:	22f0      	movs	r2, #240	; 0xf0
 80051ac:	601a      	str	r2, [r3, #0]
				lcd_ShowStr(10, 200, " NORMAL MODE ", WHITE, GRAY, 24, 0);
 80051ae:	2300      	movs	r3, #0
 80051b0:	9302      	str	r3, [sp, #8]
 80051b2:	2318      	movs	r3, #24
 80051b4:	9301      	str	r3, [sp, #4]
 80051b6:	f248 4330 	movw	r3, #33840	; 0x8430
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051c0:	4a21      	ldr	r2, [pc, #132]	; (8005248 <arrowInPickMode+0x284>)
 80051c2:	21c8      	movs	r1, #200	; 0xc8
 80051c4:	200a      	movs	r0, #10
 80051c6:	f7fd f9c5 	bl	8002554 <lcd_ShowStr>
				lcd_ShowStr(10, 250, " TIMING MODE ", RED, GRAY, 24, 0);
 80051ca:	2300      	movs	r3, #0
 80051cc:	9302      	str	r3, [sp, #8]
 80051ce:	2318      	movs	r3, #24
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	f248 4330 	movw	r3, #33840	; 0x8430
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80051dc:	4a1b      	ldr	r2, [pc, #108]	; (800524c <arrowInPickMode+0x288>)
 80051de:	21fa      	movs	r1, #250	; 0xfa
 80051e0:	200a      	movs	r0, #10
 80051e2:	f7fd f9b7 	bl	8002554 <lcd_ShowStr>

				lcd_DrawLine(110, 300, 130, 300, WHITE);
 80051e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80051f0:	2282      	movs	r2, #130	; 0x82
 80051f2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80051f6:	206e      	movs	r0, #110	; 0x6e
 80051f8:	f7fc fe47 	bl	8001e8a <lcd_DrawLine>
				lcd_DrawLine(110, 300, 120, 310, WHITE);
 80051fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	f44f 739b 	mov.w	r3, #310	; 0x136
 8005206:	2278      	movs	r2, #120	; 0x78
 8005208:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800520c:	206e      	movs	r0, #110	; 0x6e
 800520e:	f7fc fe3c 	bl	8001e8a <lcd_DrawLine>
				lcd_DrawLine(120, 310, 130, 300, WHITE);
 8005212:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800521c:	2282      	movs	r2, #130	; 0x82
 800521e:	f44f 719b 	mov.w	r1, #310	; 0x136
 8005222:	2078      	movs	r0, #120	; 0x78
 8005224:	f7fc fe31 	bl	8001e8a <lcd_DrawLine>
			}

			drawArrow();
 8005228:	f7ff fe78 	bl	8004f1c <drawArrow>
			break;
 800522c:	e05b      	b.n	80052e6 <arrowInPickMode+0x322>
 800522e:	bf00      	nop
 8005230:	200001d4 	.word	0x200001d4
 8005234:	20000268 	.word	0x20000268
 8005238:	20000014 	.word	0x20000014
 800523c:	20000264 	.word	0x20000264
 8005240:	2000000c 	.word	0x2000000c
 8005244:	20000010 	.word	0x20000010
 8005248:	0800d118 	.word	0x0800d118
 800524c:	0800d128 	.word	0x0800d128
 8005250:	0800d138 	.word	0x0800d138
		case ADVANCEMODE:
			arrowY1 = ARROWADVANCEY1;
 8005254:	4b27      	ldr	r3, [pc, #156]	; (80052f4 <arrowInPickMode+0x330>)
 8005256:	f44f 7282 	mov.w	r2, #260	; 0x104
 800525a:	601a      	str	r2, [r3, #0]
			arrowY2 = ARROWADVANCEY2;
 800525c:	4b26      	ldr	r3, [pc, #152]	; (80052f8 <arrowInPickMode+0x334>)
 800525e:	22f0      	movs	r2, #240	; 0xf0
 8005260:	601a      	str	r2, [r3, #0]

			// Show timing and advance mode & Draw the triangle show up
			lcd_Fill(0, 180, 240, 320, BLACK);
 8005262:	2300      	movs	r3, #0
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800526a:	22f0      	movs	r2, #240	; 0xf0
 800526c:	21b4      	movs	r1, #180	; 0xb4
 800526e:	2000      	movs	r0, #0
 8005270:	f7fc fdbe 	bl	8001df0 <lcd_Fill>
			lcd_ShowStr(10, 200, " TIMING MODE ", WHITE, GRAY, 24, 0);
 8005274:	2300      	movs	r3, #0
 8005276:	9302      	str	r3, [sp, #8]
 8005278:	2318      	movs	r3, #24
 800527a:	9301      	str	r3, [sp, #4]
 800527c:	f248 4330 	movw	r3, #33840	; 0x8430
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005286:	4a1d      	ldr	r2, [pc, #116]	; (80052fc <arrowInPickMode+0x338>)
 8005288:	21c8      	movs	r1, #200	; 0xc8
 800528a:	200a      	movs	r0, #10
 800528c:	f7fd f962 	bl	8002554 <lcd_ShowStr>
			lcd_ShowStr(10, 250, " ADVANCE MODE ", RED, GRAY, 24, 0);
 8005290:	2300      	movs	r3, #0
 8005292:	9302      	str	r3, [sp, #8]
 8005294:	2318      	movs	r3, #24
 8005296:	9301      	str	r3, [sp, #4]
 8005298:	f248 4330 	movw	r3, #33840	; 0x8430
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80052a2:	4a17      	ldr	r2, [pc, #92]	; (8005300 <arrowInPickMode+0x33c>)
 80052a4:	21fa      	movs	r1, #250	; 0xfa
 80052a6:	200a      	movs	r0, #10
 80052a8:	f7fd f954 	bl	8002554 <lcd_ShowStr>
			lcd_DrawLine(110, 190, 130, 190, WHITE);
 80052ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	23be      	movs	r3, #190	; 0xbe
 80052b4:	2282      	movs	r2, #130	; 0x82
 80052b6:	21be      	movs	r1, #190	; 0xbe
 80052b8:	206e      	movs	r0, #110	; 0x6e
 80052ba:	f7fc fde6 	bl	8001e8a <lcd_DrawLine>
			lcd_DrawLine(110, 190, 120, 180, WHITE);
 80052be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	23b4      	movs	r3, #180	; 0xb4
 80052c6:	2278      	movs	r2, #120	; 0x78
 80052c8:	21be      	movs	r1, #190	; 0xbe
 80052ca:	206e      	movs	r0, #110	; 0x6e
 80052cc:	f7fc fddd 	bl	8001e8a <lcd_DrawLine>
			lcd_DrawLine(120, 180, 130, 190, WHITE);
 80052d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	23be      	movs	r3, #190	; 0xbe
 80052d8:	2282      	movs	r2, #130	; 0x82
 80052da:	21b4      	movs	r1, #180	; 0xb4
 80052dc:	2078      	movs	r0, #120	; 0x78
 80052de:	f7fc fdd4 	bl	8001e8a <lcd_DrawLine>

			// draw arrow
			drawArrow();
 80052e2:	f7ff fe1b 	bl	8004f1c <drawArrow>
		}
		flagChange = 0;
 80052e6:	4b07      	ldr	r3, [pc, #28]	; (8005304 <arrowInPickMode+0x340>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
	}
}
 80052ec:	bf00      	nop
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	2000000c 	.word	0x2000000c
 80052f8:	20000010 	.word	0x20000010
 80052fc:	0800d128 	.word	0x0800d128
 8005300:	0800d138 	.word	0x0800d138
 8005304:	20000268 	.word	0x20000268

08005308 <pickMode>:

void pickMode(uint16_t id){
 8005308:	b590      	push	{r4, r7, lr}
 800530a:	b095      	sub	sp, #84	; 0x54
 800530c:	af04      	add	r7, sp, #16
 800530e:	4603      	mov	r3, r0
 8005310:	80fb      	strh	r3, [r7, #6]
	lcd_Clear(BLACK);
 8005312:	2000      	movs	r0, #0
 8005314:	f7fc fd3a 	bl	8001d8c <lcd_Clear>

//	lcd_Fill(0, 0, 240, 30, BLACK);

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8005318:	4b4e      	ldr	r3, [pc, #312]	; (8005454 <pickMode+0x14c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	b298      	uxth	r0, r3
 800531e:	4b4e      	ldr	r3, [pc, #312]	; (8005458 <pickMode+0x150>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	b299      	uxth	r1, r3
 8005324:	4b4d      	ldr	r3, [pc, #308]	; (800545c <pickMode+0x154>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	b29a      	uxth	r2, r3
 800532a:	4b4d      	ldr	r3, [pc, #308]	; (8005460 <pickMode+0x158>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	b29b      	uxth	r3, r3
 8005330:	4c4c      	ldr	r4, [pc, #304]	; (8005464 <pickMode+0x15c>)
 8005332:	9400      	str	r4, [sp, #0]
 8005334:	f7fc ff34 	bl	80021a0 <lcd_ShowPicture>

	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 8005338:	2300      	movs	r3, #0
 800533a:	9302      	str	r3, [sp, #8]
 800533c:	2318      	movs	r3, #24
 800533e:	9301      	str	r3, [sp, #4]
 8005340:	f248 4330 	movw	r3, #33840	; 0x8430
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800534a:	4a47      	ldr	r2, [pc, #284]	; (8005468 <pickMode+0x160>)
 800534c:	2137      	movs	r1, #55	; 0x37
 800534e:	203c      	movs	r0, #60	; 0x3c
 8005350:	f7fd f900 	bl	8002554 <lcd_ShowStr>

	char str1[50] = " ID: ";
 8005354:	4a45      	ldr	r2, [pc, #276]	; (800546c <pickMode+0x164>)
 8005356:	f107 0308 	add.w	r3, r7, #8
 800535a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800535e:	6018      	str	r0, [r3, #0]
 8005360:	3304      	adds	r3, #4
 8005362:	8019      	strh	r1, [r3, #0]
 8005364:	f107 030e 	add.w	r3, r7, #14
 8005368:	222c      	movs	r2, #44	; 0x2c
 800536a:	2100      	movs	r1, #0
 800536c:	4618      	mov	r0, r3
 800536e:	f006 fb2b 	bl	800b9c8 <memset>
	char *str2 = convert2str(id);
 8005372:	88fb      	ldrh	r3, [r7, #6]
 8005374:	4618      	mov	r0, r3
 8005376:	f7fd fc2b 	bl	8002bd0 <convert2str>
 800537a:	63f8      	str	r0, [r7, #60]	; 0x3c
	strcat(str1, str2);
 800537c:	f107 0308 	add.w	r3, r7, #8
 8005380:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005382:	4618      	mov	r0, r3
 8005384:	f006 fbc8 	bl	800bb18 <strcat>

	lcd_StrCenter(0, 100, str1, WHITE, GRAY, 24, 0);
 8005388:	f107 0208 	add.w	r2, r7, #8
 800538c:	2300      	movs	r3, #0
 800538e:	9302      	str	r3, [sp, #8]
 8005390:	2318      	movs	r3, #24
 8005392:	9301      	str	r3, [sp, #4]
 8005394:	f248 4330 	movw	r3, #33840	; 0x8430
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800539e:	2164      	movs	r1, #100	; 0x64
 80053a0:	2000      	movs	r0, #0
 80053a2:	f7fd f93b 	bl	800261c <lcd_StrCenter>

	lcd_StrCenter(0, 150, " MODE ", WHITE, GRAY, 24, 0);
 80053a6:	2300      	movs	r3, #0
 80053a8:	9302      	str	r3, [sp, #8]
 80053aa:	2318      	movs	r3, #24
 80053ac:	9301      	str	r3, [sp, #4]
 80053ae:	f248 4330 	movw	r3, #33840	; 0x8430
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053b8:	4a2d      	ldr	r2, [pc, #180]	; (8005470 <pickMode+0x168>)
 80053ba:	2196      	movs	r1, #150	; 0x96
 80053bc:	2000      	movs	r0, #0
 80053be:	f7fd f92d 	bl	800261c <lcd_StrCenter>

	lcd_ShowStr(10, 200, " NORMAL MODE ", RED, GRAY, 24, 0);
 80053c2:	2300      	movs	r3, #0
 80053c4:	9302      	str	r3, [sp, #8]
 80053c6:	2318      	movs	r3, #24
 80053c8:	9301      	str	r3, [sp, #4]
 80053ca:	f248 4330 	movw	r3, #33840	; 0x8430
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80053d4:	4a27      	ldr	r2, [pc, #156]	; (8005474 <pickMode+0x16c>)
 80053d6:	21c8      	movs	r1, #200	; 0xc8
 80053d8:	200a      	movs	r0, #10
 80053da:	f7fd f8bb 	bl	8002554 <lcd_ShowStr>
	lcd_ShowStr(10, 250, " TIMING MODE ", WHITE, GRAY, 24, 0);
 80053de:	2300      	movs	r3, #0
 80053e0:	9302      	str	r3, [sp, #8]
 80053e2:	2318      	movs	r3, #24
 80053e4:	9301      	str	r3, [sp, #4]
 80053e6:	f248 4330 	movw	r3, #33840	; 0x8430
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053f0:	4a21      	ldr	r2, [pc, #132]	; (8005478 <pickMode+0x170>)
 80053f2:	21fa      	movs	r1, #250	; 0xfa
 80053f4:	200a      	movs	r0, #10
 80053f6:	f7fd f8ad 	bl	8002554 <lcd_ShowStr>

	// Draw the triangle show down
	arrowY1 = ARROWNORMALY1;
 80053fa:	4b20      	ldr	r3, [pc, #128]	; (800547c <pickMode+0x174>)
 80053fc:	22d2      	movs	r2, #210	; 0xd2
 80053fe:	601a      	str	r2, [r3, #0]
	arrowY2 = ARROWNORMALY2;
 8005400:	4b1f      	ldr	r3, [pc, #124]	; (8005480 <pickMode+0x178>)
 8005402:	22be      	movs	r2, #190	; 0xbe
 8005404:	601a      	str	r2, [r3, #0]
	drawArrow();
 8005406:	f7ff fd89 	bl	8004f1c <drawArrow>
	lcd_DrawLine(110, 300, 130, 300, WHITE);
 800540a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005414:	2282      	movs	r2, #130	; 0x82
 8005416:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800541a:	206e      	movs	r0, #110	; 0x6e
 800541c:	f7fc fd35 	bl	8001e8a <lcd_DrawLine>
	lcd_DrawLine(110, 300, 120, 310, WHITE);
 8005420:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	f44f 739b 	mov.w	r3, #310	; 0x136
 800542a:	2278      	movs	r2, #120	; 0x78
 800542c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005430:	206e      	movs	r0, #110	; 0x6e
 8005432:	f7fc fd2a 	bl	8001e8a <lcd_DrawLine>
	lcd_DrawLine(120, 310, 130, 300, WHITE);
 8005436:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005440:	2282      	movs	r2, #130	; 0x82
 8005442:	f44f 719b 	mov.w	r1, #310	; 0x136
 8005446:	2078      	movs	r0, #120	; 0x78
 8005448:	f7fc fd1f 	bl	8001e8a <lcd_DrawLine>

}
 800544c:	bf00      	nop
 800544e:	3744      	adds	r7, #68	; 0x44
 8005450:	46bd      	mov	sp, r7
 8005452:	bd90      	pop	{r4, r7, pc}
 8005454:	20000074 	.word	0x20000074
 8005458:	20000078 	.word	0x20000078
 800545c:	2000007c 	.word	0x2000007c
 8005460:	20000080 	.word	0x20000080
 8005464:	080103f4 	.word	0x080103f4
 8005468:	0800d0f0 	.word	0x0800d0f0
 800546c:	0800d150 	.word	0x0800d150
 8005470:	0800d148 	.word	0x0800d148
 8005474:	0800d118 	.word	0x0800d118
 8005478:	0800d128 	.word	0x0800d128
 800547c:	2000000c 	.word	0x2000000c
 8005480:	20000010 	.word	0x20000010

08005484 <beginStartGame>:

void beginStartGame()
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b094      	sub	sp, #80	; 0x50
 8005488:	af04      	add	r7, sp, #16
	if(button_count[14] == 1)
 800548a:	4b9d      	ldr	r3, [pc, #628]	; (8005700 <beginStartGame+0x27c>)
 800548c:	8b9b      	ldrh	r3, [r3, #28]
 800548e:	2b01      	cmp	r3, #1
 8005490:	f040 81bc 	bne.w	800580c <beginStartGame+0x388>
	{
		switch (statusGame) {
 8005494:	4b9b      	ldr	r3, [pc, #620]	; (8005704 <beginStartGame+0x280>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b0a      	cmp	r3, #10
 800549a:	f200 81b9 	bhi.w	8005810 <beginStartGame+0x38c>
 800549e:	a201      	add	r2, pc, #4	; (adr r2, 80054a4 <beginStartGame+0x20>)
 80054a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a4:	080054d1 	.word	0x080054d1
 80054a8:	080054f7 	.word	0x080054f7
 80054ac:	0800550f 	.word	0x0800550f
 80054b0:	08005811 	.word	0x08005811
 80054b4:	08005811 	.word	0x08005811
 80054b8:	08005811 	.word	0x08005811
 80054bc:	0800572d 	.word	0x0800572d
 80054c0:	08005611 	.word	0x08005611
 80054c4:	08005583 	.word	0x08005583
 80054c8:	080055c1 	.word	0x080055c1
 80054cc:	080057a1 	.word	0x080057a1
			case INIT:
				statusGame = STARTMODE;
 80054d0:	4b8c      	ldr	r3, [pc, #560]	; (8005704 <beginStartGame+0x280>)
 80054d2:	2201      	movs	r2, #1
 80054d4:	601a      	str	r2, [r3, #0]
				ID = 0;
 80054d6:	4b8c      	ldr	r3, [pc, #560]	; (8005708 <beginStartGame+0x284>)
 80054d8:	2200      	movs	r2, #0
 80054da:	801a      	strh	r2, [r3, #0]
				SCORE = 0;
 80054dc:	4b8b      	ldr	r3, [pc, #556]	; (800570c <beginStartGame+0x288>)
 80054de:	2200      	movs	r2, #0
 80054e0:	801a      	strh	r2, [r3, #0]
				arrowMode = NORMALMODE;
 80054e2:	4b8b      	ldr	r3, [pc, #556]	; (8005710 <beginStartGame+0x28c>)
 80054e4:	2203      	movs	r2, #3
 80054e6:	601a      	str	r2, [r3, #0]
				TIMING = NOTIMING;
 80054e8:	4b8a      	ldr	r3, [pc, #552]	; (8005714 <beginStartGame+0x290>)
 80054ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80054ee:	801a      	strh	r2, [r3, #0]
				startUI();
 80054f0:	f7ff fc7e 	bl	8004df0 <startUI>
				break;
 80054f4:	e191      	b.n	800581a <beginStartGame+0x396>
			case STARTMODE:
				TOTALTIME = 0;
 80054f6:	4b88      	ldr	r3, [pc, #544]	; (8005718 <beginStartGame+0x294>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	801a      	strh	r2, [r3, #0]
				statusGame = PICKMODE;
 80054fc:	4b81      	ldr	r3, [pc, #516]	; (8005704 <beginStartGame+0x280>)
 80054fe:	2202      	movs	r2, #2
 8005500:	601a      	str	r2, [r3, #0]
				pickMode(ID);
 8005502:	4b81      	ldr	r3, [pc, #516]	; (8005708 <beginStartGame+0x284>)
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	4618      	mov	r0, r3
 8005508:	f7ff fefe 	bl	8005308 <pickMode>
				break;
 800550c:	e185      	b.n	800581a <beginStartGame+0x396>
			case PICKMODE:
				switch (arrowMode)
 800550e:	4b80      	ldr	r3, [pc, #512]	; (8005710 <beginStartGame+0x28c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b05      	cmp	r3, #5
 8005514:	d028      	beq.n	8005568 <beginStartGame+0xe4>
 8005516:	2b05      	cmp	r3, #5
 8005518:	f300 817c 	bgt.w	8005814 <beginStartGame+0x390>
 800551c:	2b03      	cmp	r3, #3
 800551e:	d002      	beq.n	8005526 <beginStartGame+0xa2>
 8005520:	2b04      	cmp	r3, #4
 8005522:	d015      	beq.n	8005550 <beginStartGame+0xcc>
					TIMING = 30;
					statusGame = SETUPADVANCEMODE;
					setupAdvance();
					break;
				}
				break;
 8005524:	e176      	b.n	8005814 <beginStartGame+0x390>
					oldStatusGame = NORMALMODE;
 8005526:	4b7d      	ldr	r3, [pc, #500]	; (800571c <beginStartGame+0x298>)
 8005528:	2203      	movs	r2, #3
 800552a:	601a      	str	r2, [r3, #0]
					statusGame = NORMALMODE;
 800552c:	4b75      	ldr	r3, [pc, #468]	; (8005704 <beginStartGame+0x280>)
 800552e:	2203      	movs	r2, #3
 8005530:	601a      	str	r2, [r3, #0]
					setUpLcdNormalPlay(ID, SCORE);
 8005532:	4b75      	ldr	r3, [pc, #468]	; (8005708 <beginStartGame+0x284>)
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	4a75      	ldr	r2, [pc, #468]	; (800570c <beginStartGame+0x288>)
 8005538:	8812      	ldrh	r2, [r2, #0]
 800553a:	4611      	mov	r1, r2
 800553c:	4618      	mov	r0, r3
 800553e:	f7fd fb83 	bl	8002c48 <setUpLcdNormalPlay>
					setTimerUart(1000);
 8005542:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005546:	f7ff fac1 	bl	8004acc <setTimerUart>
					snakeInit();
 800554a:	f7fe fd87 	bl	800405c <snakeInit>
					break;
 800554e:	e017      	b.n	8005580 <beginStartGame+0xfc>
					oldStatusGame = TIMINGMODE;
 8005550:	4b72      	ldr	r3, [pc, #456]	; (800571c <beginStartGame+0x298>)
 8005552:	2204      	movs	r2, #4
 8005554:	601a      	str	r2, [r3, #0]
					TIMING = 30;
 8005556:	4b6f      	ldr	r3, [pc, #444]	; (8005714 <beginStartGame+0x290>)
 8005558:	221e      	movs	r2, #30
 800555a:	801a      	strh	r2, [r3, #0]
					statusGame = SETUPTIMEMODE;
 800555c:	4b69      	ldr	r3, [pc, #420]	; (8005704 <beginStartGame+0x280>)
 800555e:	2208      	movs	r2, #8
 8005560:	601a      	str	r2, [r3, #0]
					setupTiming();
 8005562:	f000 ff7b 	bl	800645c <setupTiming>
					break;
 8005566:	e00b      	b.n	8005580 <beginStartGame+0xfc>
					oldStatusGame = ADVANCEMODE;
 8005568:	4b6c      	ldr	r3, [pc, #432]	; (800571c <beginStartGame+0x298>)
 800556a:	2205      	movs	r2, #5
 800556c:	601a      	str	r2, [r3, #0]
					TIMING = 30;
 800556e:	4b69      	ldr	r3, [pc, #420]	; (8005714 <beginStartGame+0x290>)
 8005570:	221e      	movs	r2, #30
 8005572:	801a      	strh	r2, [r3, #0]
					statusGame = SETUPADVANCEMODE;
 8005574:	4b63      	ldr	r3, [pc, #396]	; (8005704 <beginStartGame+0x280>)
 8005576:	2209      	movs	r2, #9
 8005578:	601a      	str	r2, [r3, #0]
					setupAdvance();
 800557a:	f7fb f921 	bl	80007c0 <setupAdvance>
					break;
 800557e:	bf00      	nop
				break;
 8005580:	e148      	b.n	8005814 <beginStartGame+0x390>
			case SETUPTIMEMODE:
				setTimerTiming(TIMING);
 8005582:	4b64      	ldr	r3, [pc, #400]	; (8005714 <beginStartGame+0x290>)
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	4618      	mov	r0, r3
 8005588:	f7ff fa48 	bl	8004a1c <setTimerTiming>
				setTimerDeTime(1000);
 800558c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005590:	f7ff fa64 	bl	8004a5c <setTimerDeTime>
				oldTiming = TIMING;
 8005594:	4b5f      	ldr	r3, [pc, #380]	; (8005714 <beginStartGame+0x290>)
 8005596:	881a      	ldrh	r2, [r3, #0]
 8005598:	4b61      	ldr	r3, [pc, #388]	; (8005720 <beginStartGame+0x29c>)
 800559a:	801a      	strh	r2, [r3, #0]
				statusGame = TIMINGMODE;
 800559c:	4b59      	ldr	r3, [pc, #356]	; (8005704 <beginStartGame+0x280>)
 800559e:	2204      	movs	r2, #4
 80055a0:	601a      	str	r2, [r3, #0]
				setUpLcdTimingPlay(ID, TIMING);
 80055a2:	4b59      	ldr	r3, [pc, #356]	; (8005708 <beginStartGame+0x284>)
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	4a5b      	ldr	r2, [pc, #364]	; (8005714 <beginStartGame+0x290>)
 80055a8:	8812      	ldrh	r2, [r2, #0]
 80055aa:	4611      	mov	r1, r2
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7fd fc03 	bl	8002db8 <setUpLcdTimingPlay>
				setTimerUart(1000);
 80055b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055b6:	f7ff fa89 	bl	8004acc <setTimerUart>
				snakeInit();
 80055ba:	f7fe fd4f 	bl	800405c <snakeInit>
				break;
 80055be:	e12c      	b.n	800581a <beginStartGame+0x396>
			case SETUPADVANCEMODE:
				setTimerTiming(TIMING);
 80055c0:	4b54      	ldr	r3, [pc, #336]	; (8005714 <beginStartGame+0x290>)
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff fa29 	bl	8004a1c <setTimerTiming>
				setTimerDeTime(1000);
 80055ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055ce:	f7ff fa45 	bl	8004a5c <setTimerDeTime>
				setTimerGenerateWall(2000);
 80055d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80055d6:	f7ff fa5d 	bl	8004a94 <setTimerGenerateWall>
				flagForGenerateWall = 0;
 80055da:	4b52      	ldr	r3, [pc, #328]	; (8005724 <beginStartGame+0x2a0>)
 80055dc:	2200      	movs	r2, #0
 80055de:	801a      	strh	r2, [r3, #0]
				oldTiming = TIMING;
 80055e0:	4b4c      	ldr	r3, [pc, #304]	; (8005714 <beginStartGame+0x290>)
 80055e2:	881a      	ldrh	r2, [r3, #0]
 80055e4:	4b4e      	ldr	r3, [pc, #312]	; (8005720 <beginStartGame+0x29c>)
 80055e6:	801a      	strh	r2, [r3, #0]
				statusGame = ADVANCEMODE;
 80055e8:	4b46      	ldr	r3, [pc, #280]	; (8005704 <beginStartGame+0x280>)
 80055ea:	2205      	movs	r2, #5
 80055ec:	601a      	str	r2, [r3, #0]
				setUpLcdAdvancePlay(ID, TIMING);
 80055ee:	4b46      	ldr	r3, [pc, #280]	; (8005708 <beginStartGame+0x284>)
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	4a48      	ldr	r2, [pc, #288]	; (8005714 <beginStartGame+0x290>)
 80055f4:	8812      	ldrh	r2, [r2, #0]
 80055f6:	4611      	mov	r1, r2
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7fd fc93 	bl	8002f24 <setUpLcdAdvancePlay>
				setTimerUart(1000);
 80055fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005602:	f7ff fa63 	bl	8004acc <setTimerUart>
				wallInit();
 8005606:	f7fe fc55 	bl	8003eb4 <wallInit>
				snakeInit();
 800560a:	f7fe fd27 	bl	800405c <snakeInit>
				break;
 800560e:	e104      	b.n	800581a <beginStartGame+0x396>
			case OVERMODE:
				if(arrowOverMode == NEWGAME)
 8005610:	4b45      	ldr	r3, [pc, #276]	; (8005728 <beginStartGame+0x2a4>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d15f      	bne.n	80056d8 <beginStartGame+0x254>
				{
					statusGame = oldStatusGame;
 8005618:	4b40      	ldr	r3, [pc, #256]	; (800571c <beginStartGame+0x298>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a39      	ldr	r2, [pc, #228]	; (8005704 <beginStartGame+0x280>)
 800561e:	6013      	str	r3, [r2, #0]
					SCORE = 0;
 8005620:	4b3a      	ldr	r3, [pc, #232]	; (800570c <beginStartGame+0x288>)
 8005622:	2200      	movs	r2, #0
 8005624:	801a      	strh	r2, [r3, #0]
					switch (statusGame)
 8005626:	4b37      	ldr	r3, [pc, #220]	; (8005704 <beginStartGame+0x280>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b05      	cmp	r3, #5
 800562c:	d030      	beq.n	8005690 <beginStartGame+0x20c>
 800562e:	2b05      	cmp	r3, #5
 8005630:	f300 80f2 	bgt.w	8005818 <beginStartGame+0x394>
 8005634:	2b03      	cmp	r3, #3
 8005636:	d002      	beq.n	800563e <beginStartGame+0x1ba>
 8005638:	2b04      	cmp	r3, #4
 800563a:	d00e      	beq.n	800565a <beginStartGame+0x1d6>
					SCORE = 0;
					arrowMode = NORMALMODE;
					TIMING = NOTIMING;
					startUI();
				}
				break;
 800563c:	e0ec      	b.n	8005818 <beginStartGame+0x394>
						oldStatusGame = NORMALMODE;
 800563e:	4b37      	ldr	r3, [pc, #220]	; (800571c <beginStartGame+0x298>)
 8005640:	2203      	movs	r2, #3
 8005642:	601a      	str	r2, [r3, #0]
						setUpLcdNormalPlay(ID, SCORE);
 8005644:	4b30      	ldr	r3, [pc, #192]	; (8005708 <beginStartGame+0x284>)
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	4a30      	ldr	r2, [pc, #192]	; (800570c <beginStartGame+0x288>)
 800564a:	8812      	ldrh	r2, [r2, #0]
 800564c:	4611      	mov	r1, r2
 800564e:	4618      	mov	r0, r3
 8005650:	f7fd fafa 	bl	8002c48 <setUpLcdNormalPlay>
						snakeInit();
 8005654:	f7fe fd02 	bl	800405c <snakeInit>
						break;
 8005658:	e051      	b.n	80056fe <beginStartGame+0x27a>
						oldStatusGame = TIMINGMODE;
 800565a:	4b30      	ldr	r3, [pc, #192]	; (800571c <beginStartGame+0x298>)
 800565c:	2204      	movs	r2, #4
 800565e:	601a      	str	r2, [r3, #0]
						TIMING = oldTiming;
 8005660:	4b2f      	ldr	r3, [pc, #188]	; (8005720 <beginStartGame+0x29c>)
 8005662:	881a      	ldrh	r2, [r3, #0]
 8005664:	4b2b      	ldr	r3, [pc, #172]	; (8005714 <beginStartGame+0x290>)
 8005666:	801a      	strh	r2, [r3, #0]
						setTimerTiming(TIMING);
 8005668:	4b2a      	ldr	r3, [pc, #168]	; (8005714 <beginStartGame+0x290>)
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	4618      	mov	r0, r3
 800566e:	f7ff f9d5 	bl	8004a1c <setTimerTiming>
						setTimerDeTime(1000);
 8005672:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005676:	f7ff f9f1 	bl	8004a5c <setTimerDeTime>
						setUpLcdTimingPlay(ID, TIMING);
 800567a:	4b23      	ldr	r3, [pc, #140]	; (8005708 <beginStartGame+0x284>)
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	4a25      	ldr	r2, [pc, #148]	; (8005714 <beginStartGame+0x290>)
 8005680:	8812      	ldrh	r2, [r2, #0]
 8005682:	4611      	mov	r1, r2
 8005684:	4618      	mov	r0, r3
 8005686:	f7fd fb97 	bl	8002db8 <setUpLcdTimingPlay>
						snakeInit();
 800568a:	f7fe fce7 	bl	800405c <snakeInit>
						break;
 800568e:	e036      	b.n	80056fe <beginStartGame+0x27a>
						oldStatusGame = ADVANCEMODE;
 8005690:	4b22      	ldr	r3, [pc, #136]	; (800571c <beginStartGame+0x298>)
 8005692:	2205      	movs	r2, #5
 8005694:	601a      	str	r2, [r3, #0]
						TIMING = oldTiming;
 8005696:	4b22      	ldr	r3, [pc, #136]	; (8005720 <beginStartGame+0x29c>)
 8005698:	881a      	ldrh	r2, [r3, #0]
 800569a:	4b1e      	ldr	r3, [pc, #120]	; (8005714 <beginStartGame+0x290>)
 800569c:	801a      	strh	r2, [r3, #0]
						setTimerTiming(TIMING);
 800569e:	4b1d      	ldr	r3, [pc, #116]	; (8005714 <beginStartGame+0x290>)
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7ff f9ba 	bl	8004a1c <setTimerTiming>
						setTimerDeTime(1000);
 80056a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056ac:	f7ff f9d6 	bl	8004a5c <setTimerDeTime>
						setTimerGenerateWall(2000);
 80056b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80056b4:	f7ff f9ee 	bl	8004a94 <setTimerGenerateWall>
						flagForGenerateWall = 0;
 80056b8:	4b1a      	ldr	r3, [pc, #104]	; (8005724 <beginStartGame+0x2a0>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	801a      	strh	r2, [r3, #0]
						setUpLcdAdvancePlay(ID, TIMING);
 80056be:	4b12      	ldr	r3, [pc, #72]	; (8005708 <beginStartGame+0x284>)
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	4a14      	ldr	r2, [pc, #80]	; (8005714 <beginStartGame+0x290>)
 80056c4:	8812      	ldrh	r2, [r2, #0]
 80056c6:	4611      	mov	r1, r2
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fd fc2b 	bl	8002f24 <setUpLcdAdvancePlay>
						snakeInit();
 80056ce:	f7fe fcc5 	bl	800405c <snakeInit>
						wallInit();
 80056d2:	f7fe fbef 	bl	8003eb4 <wallInit>
						break;
 80056d6:	e012      	b.n	80056fe <beginStartGame+0x27a>
					statusGame = STARTMODE;
 80056d8:	4b0a      	ldr	r3, [pc, #40]	; (8005704 <beginStartGame+0x280>)
 80056da:	2201      	movs	r2, #1
 80056dc:	601a      	str	r2, [r3, #0]
					ID = 0;
 80056de:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <beginStartGame+0x284>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	801a      	strh	r2, [r3, #0]
					SCORE = 0;
 80056e4:	4b09      	ldr	r3, [pc, #36]	; (800570c <beginStartGame+0x288>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	801a      	strh	r2, [r3, #0]
					arrowMode = NORMALMODE;
 80056ea:	4b09      	ldr	r3, [pc, #36]	; (8005710 <beginStartGame+0x28c>)
 80056ec:	2203      	movs	r2, #3
 80056ee:	601a      	str	r2, [r3, #0]
					TIMING = NOTIMING;
 80056f0:	4b08      	ldr	r3, [pc, #32]	; (8005714 <beginStartGame+0x290>)
 80056f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80056f6:	801a      	strh	r2, [r3, #0]
					startUI();
 80056f8:	f7ff fb7a 	bl	8004df0 <startUI>
				break;
 80056fc:	e08c      	b.n	8005818 <beginStartGame+0x394>
 80056fe:	e08b      	b.n	8005818 <beginStartGame+0x394>
 8005700:	200001d4 	.word	0x200001d4
 8005704:	2000026c 	.word	0x2000026c
 8005708:	20000258 	.word	0x20000258
 800570c:	2000025a 	.word	0x2000025a
 8005710:	20000014 	.word	0x20000014
 8005714:	20000000 	.word	0x20000000
 8005718:	20000284 	.word	0x20000284
 800571c:	20000270 	.word	0x20000270
 8005720:	20000280 	.word	0x20000280
 8005724:	20002a16 	.word	0x20002a16
 8005728:	20000260 	.word	0x20000260
			case STOPMODE:
				if(arrowStopMode == RESUME)
 800572c:	4baf      	ldr	r3, [pc, #700]	; (80059ec <beginStartGame+0x568>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b02      	cmp	r3, #2
 8005732:	d122      	bne.n	800577a <beginStartGame+0x2f6>
				{
					statusGame = oldStatusGame;
 8005734:	4bae      	ldr	r3, [pc, #696]	; (80059f0 <beginStartGame+0x56c>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4aae      	ldr	r2, [pc, #696]	; (80059f4 <beginStartGame+0x570>)
 800573a:	6013      	str	r3, [r2, #0]
					setTimerUart(1000);
 800573c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005740:	f7ff f9c4 	bl	8004acc <setTimerUart>
					if(statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 8005744:	4bab      	ldr	r3, [pc, #684]	; (80059f4 <beginStartGame+0x570>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b04      	cmp	r3, #4
 800574a:	d003      	beq.n	8005754 <beginStartGame+0x2d0>
 800574c:	4ba9      	ldr	r3, [pc, #676]	; (80059f4 <beginStartGame+0x570>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b05      	cmp	r3, #5
 8005752:	d10f      	bne.n	8005774 <beginStartGame+0x2f0>
					{
						setTimerTiming(TIMING);
 8005754:	4ba8      	ldr	r3, [pc, #672]	; (80059f8 <beginStartGame+0x574>)
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	4618      	mov	r0, r3
 800575a:	f7ff f95f 	bl	8004a1c <setTimerTiming>
						setTimerDeTime(1000);
 800575e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005762:	f7ff f97b 	bl	8004a5c <setTimerDeTime>
						setTimerGenerateWall(2000);
 8005766:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800576a:	f7ff f993 	bl	8004a94 <setTimerGenerateWall>
						flagForGenerateWall = 0;
 800576e:	4ba3      	ldr	r3, [pc, #652]	; (80059fc <beginStartGame+0x578>)
 8005770:	2200      	movs	r2, #0
 8005772:	801a      	strh	r2, [r3, #0]
					}
					resumeGame();
 8005774:	f7fe f8fe 	bl	8003974 <resumeGame>
					SCORE = 0;
					arrowMode = NORMALMODE;
					TIMING = NOTIMING;
					startUI();
				}
				break;
 8005778:	e04f      	b.n	800581a <beginStartGame+0x396>
					statusGame = STARTMODE;
 800577a:	4b9e      	ldr	r3, [pc, #632]	; (80059f4 <beginStartGame+0x570>)
 800577c:	2201      	movs	r2, #1
 800577e:	601a      	str	r2, [r3, #0]
					ID = 0;
 8005780:	4b9f      	ldr	r3, [pc, #636]	; (8005a00 <beginStartGame+0x57c>)
 8005782:	2200      	movs	r2, #0
 8005784:	801a      	strh	r2, [r3, #0]
					SCORE = 0;
 8005786:	4b9f      	ldr	r3, [pc, #636]	; (8005a04 <beginStartGame+0x580>)
 8005788:	2200      	movs	r2, #0
 800578a:	801a      	strh	r2, [r3, #0]
					arrowMode = NORMALMODE;
 800578c:	4b9e      	ldr	r3, [pc, #632]	; (8005a08 <beginStartGame+0x584>)
 800578e:	2203      	movs	r2, #3
 8005790:	601a      	str	r2, [r3, #0]
					TIMING = NOTIMING;
 8005792:	4b99      	ldr	r3, [pc, #612]	; (80059f8 <beginStartGame+0x574>)
 8005794:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005798:	801a      	strh	r2, [r3, #0]
					startUI();
 800579a:	f7ff fb29 	bl	8004df0 <startUI>
				break;
 800579e:	e03c      	b.n	800581a <beginStartGame+0x396>
			case EXITMODE:
				if(arrowExitMode == YES)
 80057a0:	4b9a      	ldr	r3, [pc, #616]	; (8005a0c <beginStartGame+0x588>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d112      	bne.n	80057ce <beginStartGame+0x34a>
				{
					statusGame = STARTMODE;
 80057a8:	4b92      	ldr	r3, [pc, #584]	; (80059f4 <beginStartGame+0x570>)
 80057aa:	2201      	movs	r2, #1
 80057ac:	601a      	str	r2, [r3, #0]
					ID = 0;
 80057ae:	4b94      	ldr	r3, [pc, #592]	; (8005a00 <beginStartGame+0x57c>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	801a      	strh	r2, [r3, #0]
					SCORE = 0;
 80057b4:	4b93      	ldr	r3, [pc, #588]	; (8005a04 <beginStartGame+0x580>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	801a      	strh	r2, [r3, #0]
					arrowMode = NORMALMODE;
 80057ba:	4b93      	ldr	r3, [pc, #588]	; (8005a08 <beginStartGame+0x584>)
 80057bc:	2203      	movs	r2, #3
 80057be:	601a      	str	r2, [r3, #0]
					TIMING = NOTIMING;
 80057c0:	4b8d      	ldr	r3, [pc, #564]	; (80059f8 <beginStartGame+0x574>)
 80057c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80057c6:	801a      	strh	r2, [r3, #0]
					startUI();
 80057c8:	f7ff fb12 	bl	8004df0 <startUI>
						flagForGenerateWall = 0;
					}
					resumeGame();
				}
			default:
				break;
 80057cc:	e020      	b.n	8005810 <beginStartGame+0x38c>
					statusGame = oldStatusGame;
 80057ce:	4b88      	ldr	r3, [pc, #544]	; (80059f0 <beginStartGame+0x56c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a88      	ldr	r2, [pc, #544]	; (80059f4 <beginStartGame+0x570>)
 80057d4:	6013      	str	r3, [r2, #0]
					if(statusGame == TIMINGMODE || statusGame == ADVANCEMODE)
 80057d6:	4b87      	ldr	r3, [pc, #540]	; (80059f4 <beginStartGame+0x570>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b04      	cmp	r3, #4
 80057dc:	d003      	beq.n	80057e6 <beginStartGame+0x362>
 80057de:	4b85      	ldr	r3, [pc, #532]	; (80059f4 <beginStartGame+0x570>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b05      	cmp	r3, #5
 80057e4:	d10f      	bne.n	8005806 <beginStartGame+0x382>
						setTimerTiming(TIMING);
 80057e6:	4b84      	ldr	r3, [pc, #528]	; (80059f8 <beginStartGame+0x574>)
 80057e8:	881b      	ldrh	r3, [r3, #0]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff f916 	bl	8004a1c <setTimerTiming>
						setTimerDeTime(1000);
 80057f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80057f4:	f7ff f932 	bl	8004a5c <setTimerDeTime>
						setTimerGenerateWall(2000);
 80057f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80057fc:	f7ff f94a 	bl	8004a94 <setTimerGenerateWall>
						flagForGenerateWall = 0;
 8005800:	4b7e      	ldr	r3, [pc, #504]	; (80059fc <beginStartGame+0x578>)
 8005802:	2200      	movs	r2, #0
 8005804:	801a      	strh	r2, [r3, #0]
					resumeGame();
 8005806:	f7fe f8b5 	bl	8003974 <resumeGame>
				break;
 800580a:	e001      	b.n	8005810 <beginStartGame+0x38c>
		}
	}
 800580c:	bf00      	nop
 800580e:	e004      	b.n	800581a <beginStartGame+0x396>
				break;
 8005810:	bf00      	nop
 8005812:	e002      	b.n	800581a <beginStartGame+0x396>
				break;
 8005814:	bf00      	nop
 8005816:	e000      	b.n	800581a <beginStartGame+0x396>
				break;
 8005818:	bf00      	nop
	if(statusGame == STARTMODE){
 800581a:	4b76      	ldr	r3, [pc, #472]	; (80059f4 <beginStartGame+0x570>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b01      	cmp	r3, #1
 8005820:	f040 815f 	bne.w	8005ae2 <beginStartGame+0x65e>
		char str1[50] = "";
 8005824:	2300      	movs	r3, #0
 8005826:	607b      	str	r3, [r7, #4]
 8005828:	f107 0308 	add.w	r3, r7, #8
 800582c:	222e      	movs	r2, #46	; 0x2e
 800582e:	2100      	movs	r1, #0
 8005830:	4618      	mov	r0, r3
 8005832:	f006 f8c9 	bl	800b9c8 <memset>
		char *str2;
		uint16_t val;
		val = ID;
 8005836:	4b72      	ldr	r3, [pc, #456]	; (8005a00 <beginStartGame+0x57c>)
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	87fb      	strh	r3, [r7, #62]	; 0x3e

		for(uint16_t i=0; i<14; i++)
 800583c:	2300      	movs	r3, #0
 800583e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005840:	e14b      	b.n	8005ada <beginStartGame+0x656>
		{
			if(button_count[i] == 1)
 8005842:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005844:	4a72      	ldr	r2, [pc, #456]	; (8005a10 <beginStartGame+0x58c>)
 8005846:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800584a:	2b01      	cmp	r3, #1
 800584c:	f040 8142 	bne.w	8005ad4 <beginStartGame+0x650>
			{
				button_count[i] == 0;
				switch (i)
 8005850:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005852:	2b0d      	cmp	r3, #13
 8005854:	f200 811a 	bhi.w	8005a8c <beginStartGame+0x608>
 8005858:	a201      	add	r2, pc, #4	; (adr r2, 8005860 <beginStartGame+0x3dc>)
 800585a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585e:	bf00      	nop
 8005860:	08005899 	.word	0x08005899
 8005864:	080058c5 	.word	0x080058c5
 8005868:	080058f1 	.word	0x080058f1
 800586c:	08005ad3 	.word	0x08005ad3
 8005870:	0800591d 	.word	0x0800591d
 8005874:	08005945 	.word	0x08005945
 8005878:	0800596d 	.word	0x0800596d
 800587c:	08005ad3 	.word	0x08005ad3
 8005880:	08005995 	.word	0x08005995
 8005884:	080059c1 	.word	0x080059c1
 8005888:	08005a15 	.word	0x08005a15
 800588c:	08005ad3 	.word	0x08005ad3
 8005890:	08005a41 	.word	0x08005a41
 8005894:	08005a6b 	.word	0x08005a6b
				{
					case 0:
						val = val*10 + i+1;
 8005898:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800589a:	461a      	mov	r2, r3
 800589c:	0092      	lsls	r2, r2, #2
 800589e:	4413      	add	r3, r2
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80058a6:	4413      	add	r3, r2
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	3301      	adds	r3, #1
 80058ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 80058ae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7fd f98d 	bl	8002bd0 <convert2str>
 80058b6:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 80058b8:	1d3b      	adds	r3, r7, #4
 80058ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058bc:	4618      	mov	r0, r3
 80058be:	f006 f92b 	bl	800bb18 <strcat>
						break;
 80058c2:	e0e3      	b.n	8005a8c <beginStartGame+0x608>
					case 1:
						val = val*10 + i+1;
 80058c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80058c6:	461a      	mov	r2, r3
 80058c8:	0092      	lsls	r2, r2, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80058d2:	4413      	add	r3, r2
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	3301      	adds	r3, #1
 80058d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 80058da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80058dc:	4618      	mov	r0, r3
 80058de:	f7fd f977 	bl	8002bd0 <convert2str>
 80058e2:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 80058e4:	1d3b      	adds	r3, r7, #4
 80058e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058e8:	4618      	mov	r0, r3
 80058ea:	f006 f915 	bl	800bb18 <strcat>
						break;
 80058ee:	e0cd      	b.n	8005a8c <beginStartGame+0x608>
					case 2:
						val = val*10 + i+1;
 80058f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80058f2:	461a      	mov	r2, r3
 80058f4:	0092      	lsls	r2, r2, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80058fe:	4413      	add	r3, r2
 8005900:	b29b      	uxth	r3, r3
 8005902:	3301      	adds	r3, #1
 8005904:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005906:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005908:	4618      	mov	r0, r3
 800590a:	f7fd f961 	bl	8002bd0 <convert2str>
 800590e:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005910:	1d3b      	adds	r3, r7, #4
 8005912:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005914:	4618      	mov	r0, r3
 8005916:	f006 f8ff 	bl	800bb18 <strcat>
						break;
 800591a:	e0b7      	b.n	8005a8c <beginStartGame+0x608>
					case 3:
						continue;
						break;
					case 4:
						val = val*10 + i;
 800591c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800591e:	461a      	mov	r2, r3
 8005920:	0092      	lsls	r2, r2, #2
 8005922:	4413      	add	r3, r2
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800592a:	4413      	add	r3, r2
 800592c:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 800592e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005930:	4618      	mov	r0, r3
 8005932:	f7fd f94d 	bl	8002bd0 <convert2str>
 8005936:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005938:	1d3b      	adds	r3, r7, #4
 800593a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800593c:	4618      	mov	r0, r3
 800593e:	f006 f8eb 	bl	800bb18 <strcat>
						break;
 8005942:	e0a3      	b.n	8005a8c <beginStartGame+0x608>
					case 5:
						val = val*10 + i;
 8005944:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005946:	461a      	mov	r2, r3
 8005948:	0092      	lsls	r2, r2, #2
 800594a:	4413      	add	r3, r2
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	b29a      	uxth	r2, r3
 8005950:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005952:	4413      	add	r3, r2
 8005954:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005956:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005958:	4618      	mov	r0, r3
 800595a:	f7fd f939 	bl	8002bd0 <convert2str>
 800595e:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005960:	1d3b      	adds	r3, r7, #4
 8005962:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005964:	4618      	mov	r0, r3
 8005966:	f006 f8d7 	bl	800bb18 <strcat>
						break;
 800596a:	e08f      	b.n	8005a8c <beginStartGame+0x608>
					case 6:
						val = val*10 + i;
 800596c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800596e:	461a      	mov	r2, r3
 8005970:	0092      	lsls	r2, r2, #2
 8005972:	4413      	add	r3, r2
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800597a:	4413      	add	r3, r2
 800597c:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 800597e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005980:	4618      	mov	r0, r3
 8005982:	f7fd f925 	bl	8002bd0 <convert2str>
 8005986:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005988:	1d3b      	adds	r3, r7, #4
 800598a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800598c:	4618      	mov	r0, r3
 800598e:	f006 f8c3 	bl	800bb18 <strcat>
						break;
 8005992:	e07b      	b.n	8005a8c <beginStartGame+0x608>
					case 7:
						continue;
						break;
					case 8:
						val = val*10 + i-1;
 8005994:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005996:	461a      	mov	r2, r3
 8005998:	0092      	lsls	r2, r2, #2
 800599a:	4413      	add	r3, r2
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	b29a      	uxth	r2, r3
 80059a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80059a2:	4413      	add	r3, r2
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	3b01      	subs	r3, #1
 80059a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 80059aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7fd f90f 	bl	8002bd0 <convert2str>
 80059b2:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 80059b4:	1d3b      	adds	r3, r7, #4
 80059b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059b8:	4618      	mov	r0, r3
 80059ba:	f006 f8ad 	bl	800bb18 <strcat>
						break;
 80059be:	e065      	b.n	8005a8c <beginStartGame+0x608>
					case 9:
						val = val*10 + i-1;
 80059c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80059c2:	461a      	mov	r2, r3
 80059c4:	0092      	lsls	r2, r2, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80059ce:	4413      	add	r3, r2
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	3b01      	subs	r3, #1
 80059d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 80059d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80059d8:	4618      	mov	r0, r3
 80059da:	f7fd f8f9 	bl	8002bd0 <convert2str>
 80059de:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 80059e0:	1d3b      	adds	r3, r7, #4
 80059e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059e4:	4618      	mov	r0, r3
 80059e6:	f006 f897 	bl	800bb18 <strcat>
						break;
 80059ea:	e04f      	b.n	8005a8c <beginStartGame+0x608>
 80059ec:	2000005c 	.word	0x2000005c
 80059f0:	20000270 	.word	0x20000270
 80059f4:	2000026c 	.word	0x2000026c
 80059f8:	20000000 	.word	0x20000000
 80059fc:	20002a16 	.word	0x20002a16
 8005a00:	20000258 	.word	0x20000258
 8005a04:	2000025a 	.word	0x2000025a
 8005a08:	20000014 	.word	0x20000014
 8005a0c:	20000060 	.word	0x20000060
 8005a10:	200001d4 	.word	0x200001d4
					case 10:
						val = val*10 + i-1;
 8005a14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005a16:	461a      	mov	r2, r3
 8005a18:	0092      	lsls	r2, r2, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005a22:	4413      	add	r3, r2
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	3b01      	subs	r3, #1
 8005a28:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005a2a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fd f8cf 	bl	8002bd0 <convert2str>
 8005a32:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005a34:	1d3b      	adds	r3, r7, #4
 8005a36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f006 f86d 	bl	800bb18 <strcat>
						break;
 8005a3e:	e025      	b.n	8005a8c <beginStartGame+0x608>
					case 11:
						continue;
						break;
					case 12:
						str1[50] = "";
 8005a40:	4b40      	ldr	r3, [pc, #256]	; (8005b44 <beginStartGame+0x6c0>)
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						val = val/10;
 8005a48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005a4a:	4a3f      	ldr	r2, [pc, #252]	; (8005b48 <beginStartGame+0x6c4>)
 8005a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a50:	08db      	lsrs	r3, r3, #3
 8005a52:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005a54:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fd f8ba 	bl	8002bd0 <convert2str>
 8005a5c:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005a5e:	1d3b      	adds	r3, r7, #4
 8005a60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a62:	4618      	mov	r0, r3
 8005a64:	f006 f858 	bl	800bb18 <strcat>
						break;
 8005a68:	e010      	b.n	8005a8c <beginStartGame+0x608>
					case 13:
						val = val*10;
 8005a6a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	0092      	lsls	r2, r2, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	87fb      	strh	r3, [r7, #62]	; 0x3e
						str2 = convert2str(val);
 8005a76:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7fd f8a9 	bl	8002bd0 <convert2str>
 8005a7e:	63b8      	str	r0, [r7, #56]	; 0x38
						strcat(str1, str2);
 8005a80:	1d3b      	adds	r3, r7, #4
 8005a82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a84:	4618      	mov	r0, r3
 8005a86:	f006 f847 	bl	800bb18 <strcat>
						break;
 8005a8a:	bf00      	nop
				}
				lcd_Fill(60, 150, 180, 180, BLACK);
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	23b4      	movs	r3, #180	; 0xb4
 8005a92:	22b4      	movs	r2, #180	; 0xb4
 8005a94:	2196      	movs	r1, #150	; 0x96
 8005a96:	203c      	movs	r0, #60	; 0x3c
 8005a98:	f7fc f9aa 	bl	8001df0 <lcd_Fill>
				lcd_DrawRectangle(60, 150, 180, 180, WHITE);
 8005a9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005aa0:	9300      	str	r3, [sp, #0]
 8005aa2:	23b4      	movs	r3, #180	; 0xb4
 8005aa4:	22b4      	movs	r2, #180	; 0xb4
 8005aa6:	2196      	movs	r1, #150	; 0x96
 8005aa8:	203c      	movs	r0, #60	; 0x3c
 8005aaa:	f7fc fa72 	bl	8001f92 <lcd_DrawRectangle>
				lcd_StrCenter(0, 152, str1, WHITE, RED, 24, 1);
 8005aae:	1d3a      	adds	r2, r7, #4
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	9302      	str	r3, [sp, #8]
 8005ab4:	2318      	movs	r3, #24
 8005ab6:	9301      	str	r3, [sp, #4]
 8005ab8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ac2:	2198      	movs	r1, #152	; 0x98
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	f7fc fda9 	bl	800261c <lcd_StrCenter>

				ID = val;
 8005aca:	4a20      	ldr	r2, [pc, #128]	; (8005b4c <beginStartGame+0x6c8>)
 8005acc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005ace:	8013      	strh	r3, [r2, #0]
 8005ad0:	e000      	b.n	8005ad4 <beginStartGame+0x650>
						continue;
 8005ad2:	bf00      	nop
		for(uint16_t i=0; i<14; i++)
 8005ad4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005ada:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005adc:	2b0d      	cmp	r3, #13
 8005ade:	f67f aeb0 	bls.w	8005842 <beginStartGame+0x3be>
			}
		}
	}
	if(statusGame == SETUPTIMEMODE)
 8005ae2:	4b1b      	ldr	r3, [pc, #108]	; (8005b50 <beginStartGame+0x6cc>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b08      	cmp	r3, #8
 8005ae8:	d101      	bne.n	8005aee <beginStartGame+0x66a>
	{
		initTimingMode();
 8005aea:	f000 fe0b 	bl	8006704 <initTimingMode>
	}
	if(statusGame == SETUPADVANCEMODE)
 8005aee:	4b18      	ldr	r3, [pc, #96]	; (8005b50 <beginStartGame+0x6cc>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2b09      	cmp	r3, #9
 8005af4:	d101      	bne.n	8005afa <beginStartGame+0x676>
	{
		initAdvanceMode();
 8005af6:	f7fa ffe5 	bl	8000ac4 <initAdvanceMode>
	}
	if(statusGame != STARTMODE)
 8005afa:	4b15      	ldr	r3, [pc, #84]	; (8005b50 <beginStartGame+0x6cc>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d00e      	beq.n	8005b20 <beginStartGame+0x69c>
	{
		if(statusGame == PICKMODE)
 8005b02:	4b13      	ldr	r3, [pc, #76]	; (8005b50 <beginStartGame+0x6cc>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d101      	bne.n	8005b0e <beginStartGame+0x68a>
		{
			arrowInPickMode();
 8005b0a:	f7ff fa5b 	bl	8004fc4 <arrowInPickMode>
		}
		if(button_count[12] == 1)
 8005b0e:	4b11      	ldr	r3, [pc, #68]	; (8005b54 <beginStartGame+0x6d0>)
 8005b10:	8b1b      	ldrh	r3, [r3, #24]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d104      	bne.n	8005b20 <beginStartGame+0x69c>
		{
			statusGame = EXITMODE;
 8005b16:	4b0e      	ldr	r3, [pc, #56]	; (8005b50 <beginStartGame+0x6cc>)
 8005b18:	220a      	movs	r2, #10
 8005b1a:	601a      	str	r2, [r3, #0]
			initExit();
 8005b1c:	f7fb fb2e 	bl	800117c <initExit>
		}
	}
	if(statusGame != TIMINGMODE && statusGame != ADVANCEMODE)
 8005b20:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <beginStartGame+0x6cc>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d009      	beq.n	8005b3c <beginStartGame+0x6b8>
 8005b28:	4b09      	ldr	r3, [pc, #36]	; (8005b50 <beginStartGame+0x6cc>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b05      	cmp	r3, #5
 8005b2e:	d005      	beq.n	8005b3c <beginStartGame+0x6b8>
	{
		setTimerDeTime(0);
 8005b30:	2000      	movs	r0, #0
 8005b32:	f7fe ff93 	bl	8004a5c <setTimerDeTime>
		setTimerGenerateWall(0);
 8005b36:	2000      	movs	r0, #0
 8005b38:	f7fe ffac 	bl	8004a94 <setTimerGenerateWall>
	}
}
 8005b3c:	bf00      	nop
 8005b3e:	3740      	adds	r7, #64	; 0x40
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	0800d184 	.word	0x0800d184
 8005b48:	cccccccd 	.word	0xcccccccd
 8005b4c:	20000258 	.word	0x20000258
 8005b50:	2000026c 	.word	0x2000026c
 8005b54:	200001d4 	.word	0x200001d4

08005b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b5e:	2300      	movs	r3, #0
 8005b60:	607b      	str	r3, [r7, #4]
 8005b62:	4b10      	ldr	r3, [pc, #64]	; (8005ba4 <HAL_MspInit+0x4c>)
 8005b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b66:	4a0f      	ldr	r2, [pc, #60]	; (8005ba4 <HAL_MspInit+0x4c>)
 8005b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8005b6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ba4 <HAL_MspInit+0x4c>)
 8005b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b76:	607b      	str	r3, [r7, #4]
 8005b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	603b      	str	r3, [r7, #0]
 8005b7e:	4b09      	ldr	r3, [pc, #36]	; (8005ba4 <HAL_MspInit+0x4c>)
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	4a08      	ldr	r2, [pc, #32]	; (8005ba4 <HAL_MspInit+0x4c>)
 8005b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b88:	6413      	str	r3, [r2, #64]	; 0x40
 8005b8a:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <HAL_MspInit+0x4c>)
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b92:	603b      	str	r3, [r7, #0]
 8005b94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40023800 	.word	0x40023800

08005ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005bac:	e7fe      	b.n	8005bac <NMI_Handler+0x4>

08005bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005bb2:	e7fe      	b.n	8005bb2 <HardFault_Handler+0x4>

08005bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005bb8:	e7fe      	b.n	8005bb8 <MemManage_Handler+0x4>

08005bba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005bbe:	e7fe      	b.n	8005bbe <BusFault_Handler+0x4>

08005bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005bc4:	e7fe      	b.n	8005bc4 <UsageFault_Handler+0x4>

08005bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005bca:	bf00      	nop
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005bd8:	bf00      	nop
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005be2:	b480      	push	{r7}
 8005be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005be6:	bf00      	nop
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005bf4:	f001 f878 	bl	8006ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005bf8:	bf00      	nop
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005c00:	4802      	ldr	r0, [pc, #8]	; (8005c0c <TIM2_IRQHandler+0x10>)
 8005c02:	f003 ff32 	bl	8009a6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005c06:	bf00      	nop
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20002a84 	.word	0x20002a84

08005c10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005c14:	4802      	ldr	r0, [pc, #8]	; (8005c20 <USART2_IRQHandler+0x10>)
 8005c16:	f004 fe6d 	bl	800a8f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005c1a:	bf00      	nop
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	20002b18 	.word	0x20002b18

08005c24 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005c28:	4802      	ldr	r0, [pc, #8]	; (8005c34 <DMA2_Stream0_IRQHandler+0x10>)
 8005c2a:	f001 ff5d 	bl	8007ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005c2e:	bf00      	nop
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	20000174 	.word	0x20000174

08005c38 <showNotifyStop>:
#include "software_timer.h"
#include "uart.h"
#include "game_over.h"

void showNotifyStop()
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af04      	add	r7, sp, #16

	lcd_StrCenter(0, overWallY[0] + 10, " PAUSE GAME ", WHITE, BLACK, 16, 0);
 8005c3e:	4b25      	ldr	r3, [pc, #148]	; (8005cd4 <showNotifyStop+0x9c>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	330a      	adds	r3, #10
 8005c46:	b299      	uxth	r1, r3
 8005c48:	2300      	movs	r3, #0
 8005c4a:	9302      	str	r3, [sp, #8]
 8005c4c:	2310      	movs	r3, #16
 8005c4e:	9301      	str	r3, [sp, #4]
 8005c50:	2300      	movs	r3, #0
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c58:	4a1f      	ldr	r2, [pc, #124]	; (8005cd8 <showNotifyStop+0xa0>)
 8005c5a:	2000      	movs	r0, #0
 8005c5c:	f7fc fcde 	bl	800261c <lcd_StrCenter>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "RESUME", BLACK, GRAY, 16, 1);
 8005c60:	4b1e      	ldr	r3, [pc, #120]	; (8005cdc <showNotifyStop+0xa4>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	3308      	adds	r3, #8
 8005c68:	b298      	uxth	r0, r3
 8005c6a:	4b1a      	ldr	r3, [pc, #104]	; (8005cd4 <showNotifyStop+0x9c>)
 8005c6c:	689a      	ldr	r2, [r3, #8]
 8005c6e:	4b19      	ldr	r3, [pc, #100]	; (8005cd4 <showNotifyStop+0x9c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4413      	add	r3, r2
 8005c74:	0fda      	lsrs	r2, r3, #31
 8005c76:	4413      	add	r3, r2
 8005c78:	105b      	asrs	r3, r3, #1
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	3b14      	subs	r3, #20
 8005c7e:	b299      	uxth	r1, r3
 8005c80:	2301      	movs	r3, #1
 8005c82:	9302      	str	r3, [sp, #8]
 8005c84:	2310      	movs	r3, #16
 8005c86:	9301      	str	r3, [sp, #4]
 8005c88:	f248 4330 	movw	r3, #33840	; 0x8430
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	2300      	movs	r3, #0
 8005c90:	4a13      	ldr	r2, [pc, #76]	; (8005ce0 <showNotifyStop+0xa8>)
 8005c92:	f7fc fc5f 	bl	8002554 <lcd_ShowStr>

	lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 15, "EXIT", BLACK, GRAY, 16, 1);
 8005c96:	4b11      	ldr	r3, [pc, #68]	; (8005cdc <showNotifyStop+0xa4>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	b298      	uxth	r0, r3
 8005ca0:	4b0c      	ldr	r3, [pc, #48]	; (8005cd4 <showNotifyStop+0x9c>)
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	4b0b      	ldr	r3, [pc, #44]	; (8005cd4 <showNotifyStop+0x9c>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4413      	add	r3, r2
 8005caa:	0fda      	lsrs	r2, r3, #31
 8005cac:	4413      	add	r3, r2
 8005cae:	105b      	asrs	r3, r3, #1
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	330f      	adds	r3, #15
 8005cb4:	b299      	uxth	r1, r3
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	9302      	str	r3, [sp, #8]
 8005cba:	2310      	movs	r3, #16
 8005cbc:	9301      	str	r3, [sp, #4]
 8005cbe:	f248 4330 	movw	r3, #33840	; 0x8430
 8005cc2:	9300      	str	r3, [sp, #0]
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	4a07      	ldr	r2, [pc, #28]	; (8005ce4 <showNotifyStop+0xac>)
 8005cc8:	f7fc fc44 	bl	8002554 <lcd_ShowStr>
}
 8005ccc:	bf00      	nop
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	2000004c 	.word	0x2000004c
 8005cd8:	0800d188 	.word	0x0800d188
 8005cdc:	2000003c 	.word	0x2000003c
 8005ce0:	0800d198 	.word	0x0800d198
 8005ce4:	0800d1a0 	.word	0x0800d1a0

08005ce8 <drawArrowStop>:


void drawArrowStop()
{
 8005ce8:	b590      	push	{r4, r7, lr}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af04      	add	r7, sp, #16
	int yValNewGame = (overWallY[2]+overWallY[0])/2 - 15 + 7;
 8005cee:	4b87      	ldr	r3, [pc, #540]	; (8005f0c <drawArrowStop+0x224>)
 8005cf0:	689a      	ldr	r2, [r3, #8]
 8005cf2:	4b86      	ldr	r3, [pc, #536]	; (8005f0c <drawArrowStop+0x224>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	0fda      	lsrs	r2, r3, #31
 8005cfa:	4413      	add	r3, r2
 8005cfc:	105b      	asrs	r3, r3, #1
 8005cfe:	3b08      	subs	r3, #8
 8005d00:	607b      	str	r3, [r7, #4]
	int yValExit = (overWallY[2]+overWallY[0])/2 + 20 + 8;
 8005d02:	4b82      	ldr	r3, [pc, #520]	; (8005f0c <drawArrowStop+0x224>)
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	4b81      	ldr	r3, [pc, #516]	; (8005f0c <drawArrowStop+0x224>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	0fda      	lsrs	r2, r3, #31
 8005d0e:	4413      	add	r3, r2
 8005d10:	105b      	asrs	r3, r3, #1
 8005d12:	331c      	adds	r3, #28
 8005d14:	603b      	str	r3, [r7, #0]

	switch(arrowStopMode)
 8005d16:	4b7e      	ldr	r3, [pc, #504]	; (8005f10 <drawArrowStop+0x228>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d07a      	beq.n	8005e14 <drawArrowStop+0x12c>
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	f040 80f0 	bne.w	8005f04 <drawArrowStop+0x21c>
	{
	case RESUME:
		eraseFull();
 8005d24:	f7fb fc04 	bl	8001530 <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "RESUME", RED, GRAY, 16, 1);
 8005d28:	4b7a      	ldr	r3, [pc, #488]	; (8005f14 <drawArrowStop+0x22c>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	3308      	adds	r3, #8
 8005d30:	b298      	uxth	r0, r3
 8005d32:	4b76      	ldr	r3, [pc, #472]	; (8005f0c <drawArrowStop+0x224>)
 8005d34:	689a      	ldr	r2, [r3, #8]
 8005d36:	4b75      	ldr	r3, [pc, #468]	; (8005f0c <drawArrowStop+0x224>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	0fda      	lsrs	r2, r3, #31
 8005d3e:	4413      	add	r3, r2
 8005d40:	105b      	asrs	r3, r3, #1
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	3b14      	subs	r3, #20
 8005d46:	b299      	uxth	r1, r3
 8005d48:	2301      	movs	r3, #1
 8005d4a:	9302      	str	r3, [sp, #8]
 8005d4c:	2310      	movs	r3, #16
 8005d4e:	9301      	str	r3, [sp, #4]
 8005d50:	f248 4330 	movw	r3, #33840	; 0x8430
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005d5a:	4a6f      	ldr	r2, [pc, #444]	; (8005f18 <drawArrowStop+0x230>)
 8005d5c:	f7fc fbfa 	bl	8002554 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 15, "EXIT", BLACK, GRAY, 16, 1);
 8005d60:	4b6c      	ldr	r3, [pc, #432]	; (8005f14 <drawArrowStop+0x22c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	3308      	adds	r3, #8
 8005d68:	b298      	uxth	r0, r3
 8005d6a:	4b68      	ldr	r3, [pc, #416]	; (8005f0c <drawArrowStop+0x224>)
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	4b67      	ldr	r3, [pc, #412]	; (8005f0c <drawArrowStop+0x224>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4413      	add	r3, r2
 8005d74:	0fda      	lsrs	r2, r3, #31
 8005d76:	4413      	add	r3, r2
 8005d78:	105b      	asrs	r3, r3, #1
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	330f      	adds	r3, #15
 8005d7e:	b299      	uxth	r1, r3
 8005d80:	2301      	movs	r3, #1
 8005d82:	9302      	str	r3, [sp, #8]
 8005d84:	2310      	movs	r3, #16
 8005d86:	9301      	str	r3, [sp, #4]
 8005d88:	f248 4330 	movw	r3, #33840	; 0x8430
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	2300      	movs	r3, #0
 8005d90:	4a62      	ldr	r2, [pc, #392]	; (8005f1c <drawArrowStop+0x234>)
 8005d92:	f7fc fbdf 	bl	8002554 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame - 5, BLACK);
 8005d96:	4b5f      	ldr	r3, [pc, #380]	; (8005f14 <drawArrowStop+0x22c>)
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	3b0f      	subs	r3, #15
 8005d9e:	b298      	uxth	r0, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	b299      	uxth	r1, r3
 8005da4:	4b5b      	ldr	r3, [pc, #364]	; (8005f14 <drawArrowStop+0x22c>)
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	3b0a      	subs	r3, #10
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	3b05      	subs	r3, #5
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	2400      	movs	r4, #0
 8005db8:	9400      	str	r4, [sp, #0]
 8005dba:	f7fc f866 	bl	8001e8a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValNewGame, overWallX[1] - 10, yValNewGame + 5, BLACK);
 8005dbe:	4b55      	ldr	r3, [pc, #340]	; (8005f14 <drawArrowStop+0x22c>)
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	3b0f      	subs	r3, #15
 8005dc6:	b298      	uxth	r0, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	b299      	uxth	r1, r3
 8005dcc:	4b51      	ldr	r3, [pc, #324]	; (8005f14 <drawArrowStop+0x22c>)
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	3b0a      	subs	r3, #10
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	3305      	adds	r3, #5
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	2400      	movs	r4, #0
 8005de0:	9400      	str	r4, [sp, #0]
 8005de2:	f7fc f852 	bl	8001e8a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValNewGame - 5, overWallX[1] - 10, yValNewGame + 5, BLACK);
 8005de6:	4b4b      	ldr	r3, [pc, #300]	; (8005f14 <drawArrowStop+0x22c>)
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	3b0a      	subs	r3, #10
 8005dee:	b298      	uxth	r0, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	3b05      	subs	r3, #5
 8005df6:	b299      	uxth	r1, r3
 8005df8:	4b46      	ldr	r3, [pc, #280]	; (8005f14 <drawArrowStop+0x22c>)
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	3b0a      	subs	r3, #10
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	3305      	adds	r3, #5
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	2400      	movs	r4, #0
 8005e0c:	9400      	str	r4, [sp, #0]
 8005e0e:	f7fc f83c 	bl	8001e8a <lcd_DrawLine>
		break;
 8005e12:	e077      	b.n	8005f04 <drawArrowStop+0x21c>
	case EXIT:
		eraseFull();
 8005e14:	f7fb fb8c 	bl	8001530 <eraseFull>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 - 20, "RESUME", BLACK, GRAY, 16, 1);
 8005e18:	4b3e      	ldr	r3, [pc, #248]	; (8005f14 <drawArrowStop+0x22c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	3308      	adds	r3, #8
 8005e20:	b298      	uxth	r0, r3
 8005e22:	4b3a      	ldr	r3, [pc, #232]	; (8005f0c <drawArrowStop+0x224>)
 8005e24:	689a      	ldr	r2, [r3, #8]
 8005e26:	4b39      	ldr	r3, [pc, #228]	; (8005f0c <drawArrowStop+0x224>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	0fda      	lsrs	r2, r3, #31
 8005e2e:	4413      	add	r3, r2
 8005e30:	105b      	asrs	r3, r3, #1
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	3b14      	subs	r3, #20
 8005e36:	b299      	uxth	r1, r3
 8005e38:	2301      	movs	r3, #1
 8005e3a:	9302      	str	r3, [sp, #8]
 8005e3c:	2310      	movs	r3, #16
 8005e3e:	9301      	str	r3, [sp, #4]
 8005e40:	f248 4330 	movw	r3, #33840	; 0x8430
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	2300      	movs	r3, #0
 8005e48:	4a33      	ldr	r2, [pc, #204]	; (8005f18 <drawArrowStop+0x230>)
 8005e4a:	f7fc fb83 	bl	8002554 <lcd_ShowStr>
		lcd_ShowStr(overWallX[0]+8, (overWallY[2]+overWallY[0])/2 + 15, "EXIT", RED, GRAY, 16, 1);
 8005e4e:	4b31      	ldr	r3, [pc, #196]	; (8005f14 <drawArrowStop+0x22c>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	3308      	adds	r3, #8
 8005e56:	b298      	uxth	r0, r3
 8005e58:	4b2c      	ldr	r3, [pc, #176]	; (8005f0c <drawArrowStop+0x224>)
 8005e5a:	689a      	ldr	r2, [r3, #8]
 8005e5c:	4b2b      	ldr	r3, [pc, #172]	; (8005f0c <drawArrowStop+0x224>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4413      	add	r3, r2
 8005e62:	0fda      	lsrs	r2, r3, #31
 8005e64:	4413      	add	r3, r2
 8005e66:	105b      	asrs	r3, r3, #1
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	330f      	adds	r3, #15
 8005e6c:	b299      	uxth	r1, r3
 8005e6e:	2301      	movs	r3, #1
 8005e70:	9302      	str	r3, [sp, #8]
 8005e72:	2310      	movs	r3, #16
 8005e74:	9301      	str	r3, [sp, #4]
 8005e76:	f248 4330 	movw	r3, #33840	; 0x8430
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005e80:	4a26      	ldr	r2, [pc, #152]	; (8005f1c <drawArrowStop+0x234>)
 8005e82:	f7fc fb67 	bl	8002554 <lcd_ShowStr>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit - 5, BLACK);
 8005e86:	4b23      	ldr	r3, [pc, #140]	; (8005f14 <drawArrowStop+0x22c>)
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	3b0f      	subs	r3, #15
 8005e8e:	b298      	uxth	r0, r3
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	b299      	uxth	r1, r3
 8005e94:	4b1f      	ldr	r3, [pc, #124]	; (8005f14 <drawArrowStop+0x22c>)
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	3b0a      	subs	r3, #10
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	3b05      	subs	r3, #5
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	2400      	movs	r4, #0
 8005ea8:	9400      	str	r4, [sp, #0]
 8005eaa:	f7fb ffee 	bl	8001e8a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 15, yValExit, overWallX[1] - 10, yValExit + 5, BLACK);
 8005eae:	4b19      	ldr	r3, [pc, #100]	; (8005f14 <drawArrowStop+0x22c>)
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	3b0f      	subs	r3, #15
 8005eb6:	b298      	uxth	r0, r3
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	b299      	uxth	r1, r3
 8005ebc:	4b15      	ldr	r3, [pc, #84]	; (8005f14 <drawArrowStop+0x22c>)
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	3b0a      	subs	r3, #10
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	3305      	adds	r3, #5
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	2400      	movs	r4, #0
 8005ed0:	9400      	str	r4, [sp, #0]
 8005ed2:	f7fb ffda 	bl	8001e8a <lcd_DrawLine>
		lcd_DrawLine(overWallX[1] - 10, yValExit - 5, overWallX[1] - 10, yValExit + 5, BLACK);
 8005ed6:	4b0f      	ldr	r3, [pc, #60]	; (8005f14 <drawArrowStop+0x22c>)
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	3b0a      	subs	r3, #10
 8005ede:	b298      	uxth	r0, r3
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	3b05      	subs	r3, #5
 8005ee6:	b299      	uxth	r1, r3
 8005ee8:	4b0a      	ldr	r3, [pc, #40]	; (8005f14 <drawArrowStop+0x22c>)
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	3b0a      	subs	r3, #10
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	3305      	adds	r3, #5
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	2400      	movs	r4, #0
 8005efc:	9400      	str	r4, [sp, #0]
 8005efe:	f7fb ffc4 	bl	8001e8a <lcd_DrawLine>
		break;
 8005f02:	bf00      	nop
	}
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd90      	pop	{r4, r7, pc}
 8005f0c:	2000004c 	.word	0x2000004c
 8005f10:	2000005c 	.word	0x2000005c
 8005f14:	2000003c 	.word	0x2000003c
 8005f18:	0800d198 	.word	0x0800d198
 8005f1c:	0800d1a0 	.word	0x0800d1a0

08005f20 <gameStopUI>:

void gameStopUI()
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	af00      	add	r7, sp, #0
	showWallnotify();
 8005f24:	f7fb fa00 	bl	8001328 <showWallnotify>
	showNotifyStop();
 8005f28:	f7ff fe86 	bl	8005c38 <showNotifyStop>
	drawArrowStop();
 8005f2c:	f7ff fedc 	bl	8005ce8 <drawArrowStop>
}
 8005f30:	bf00      	nop
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <pickStop>:

void pickStop()
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
	if(statusGame == STOPMODE)
 8005f38:	4b1c      	ldr	r3, [pc, #112]	; (8005fac <pickStop+0x78>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b06      	cmp	r3, #6
 8005f3e:	d133      	bne.n	8005fa8 <pickStop+0x74>
	{
		if(button_count[3] == 1)
 8005f40:	4b1b      	ldr	r3, [pc, #108]	; (8005fb0 <pickStop+0x7c>)
 8005f42:	88db      	ldrh	r3, [r3, #6]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d10f      	bne.n	8005f68 <pickStop+0x34>
		{
			flagStop = 1;
 8005f48:	4b1a      	ldr	r3, [pc, #104]	; (8005fb4 <pickStop+0x80>)
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	601a      	str	r2, [r3, #0]
			switch(arrowStopMode)
 8005f4e:	4b1a      	ldr	r3, [pc, #104]	; (8005fb8 <pickStop+0x84>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d002      	beq.n	8005f5c <pickStop+0x28>
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d107      	bne.n	8005f6a <pickStop+0x36>
			{
			case RESUME:
				// Do nothing
				return;
 8005f5a:	e025      	b.n	8005fa8 <pickStop+0x74>
				break;
			case EXIT:
				arrowStopMode = RESUME;
 8005f5c:	4b16      	ldr	r3, [pc, #88]	; (8005fb8 <pickStop+0x84>)
 8005f5e:	2202      	movs	r2, #2
 8005f60:	601a      	str	r2, [r3, #0]
				gameStopUI();
 8005f62:	f7ff ffdd 	bl	8005f20 <gameStopUI>
				break;
 8005f66:	e000      	b.n	8005f6a <pickStop+0x36>
			}
		}
 8005f68:	bf00      	nop
		if(button_count[7] == 1)
 8005f6a:	4b11      	ldr	r3, [pc, #68]	; (8005fb0 <pickStop+0x7c>)
 8005f6c:	89db      	ldrh	r3, [r3, #14]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d10e      	bne.n	8005f90 <pickStop+0x5c>
		{
			flagStop = 1;
 8005f72:	4b10      	ldr	r3, [pc, #64]	; (8005fb4 <pickStop+0x80>)
 8005f74:	2201      	movs	r2, #1
 8005f76:	601a      	str	r2, [r3, #0]
			switch(arrowStopMode)
 8005f78:	4b0f      	ldr	r3, [pc, #60]	; (8005fb8 <pickStop+0x84>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d012      	beq.n	8005fa6 <pickStop+0x72>
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d106      	bne.n	8005f92 <pickStop+0x5e>
			{
			case RESUME:
				arrowStopMode = EXIT;
 8005f84:	4b0c      	ldr	r3, [pc, #48]	; (8005fb8 <pickStop+0x84>)
 8005f86:	2201      	movs	r2, #1
 8005f88:	601a      	str	r2, [r3, #0]
				gameStopUI();
 8005f8a:	f7ff ffc9 	bl	8005f20 <gameStopUI>
				break;
 8005f8e:	e000      	b.n	8005f92 <pickStop+0x5e>
			case EXIT:
				// Do nothing
				return;
				break;
			}
		}
 8005f90:	bf00      	nop
		if(flagStop == 1)
 8005f92:	4b08      	ldr	r3, [pc, #32]	; (8005fb4 <pickStop+0x80>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d106      	bne.n	8005fa8 <pickStop+0x74>
		{
			gameStopUI();
 8005f9a:	f7ff ffc1 	bl	8005f20 <gameStopUI>
			flagStop = 0;
 8005f9e:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <pickStop+0x80>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	601a      	str	r2, [r3, #0]
 8005fa4:	e000      	b.n	8005fa8 <pickStop+0x74>
				return;
 8005fa6:	bf00      	nop
		}
	}
}
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	2000026c 	.word	0x2000026c
 8005fb0:	200001d4 	.word	0x200001d4
 8005fb4:	20000278 	.word	0x20000278
 8005fb8:	2000005c 	.word	0x2000005c

08005fbc <initStopGame>:

uint8_t initStopGame(uint8_t val)
{
 8005fbc:	b590      	push	{r4, r7, lr}
 8005fbe:	b097      	sub	sp, #92	; 0x5c
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	71fb      	strb	r3, [r7, #7]
	if(val == 1)
 8005fc6:	79fb      	ldrb	r3, [r7, #7]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d14d      	bne.n	8006068 <initStopGame+0xac>
	{
		char str1[60] = "GAME_PLAY#";
 8005fcc:	4a29      	ldr	r2, [pc, #164]	; (8006074 <initStopGame+0xb8>)
 8005fce:	f107 0308 	add.w	r3, r7, #8
 8005fd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8005fd4:	c303      	stmia	r3!, {r0, r1}
 8005fd6:	801a      	strh	r2, [r3, #0]
 8005fd8:	3302      	adds	r3, #2
 8005fda:	0c12      	lsrs	r2, r2, #16
 8005fdc:	701a      	strb	r2, [r3, #0]
 8005fde:	f107 0313 	add.w	r3, r7, #19
 8005fe2:	2231      	movs	r2, #49	; 0x31
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f005 fcee 	bl	800b9c8 <memset>
		char *str2 = convert2str(ID);
 8005fec:	4b22      	ldr	r3, [pc, #136]	; (8006078 <initStopGame+0xbc>)
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fc fded 	bl	8002bd0 <convert2str>
 8005ff6:	6578      	str	r0, [r7, #84]	; 0x54
		strcat(str1, str2);
 8005ff8:	f107 0308 	add.w	r3, r7, #8
 8005ffc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ffe:	4618      	mov	r0, r3
 8006000:	f005 fd8a 	bl	800bb18 <strcat>
		char str3[15] = "has stop game#";
 8006004:	4b1d      	ldr	r3, [pc, #116]	; (800607c <initStopGame+0xc0>)
 8006006:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800600a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800600c:	c407      	stmia	r4!, {r0, r1, r2}
 800600e:	8023      	strh	r3, [r4, #0]
 8006010:	3402      	adds	r4, #2
 8006012:	0c1b      	lsrs	r3, r3, #16
 8006014:	7023      	strb	r3, [r4, #0]
		strcat(str1, str3);
 8006016:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800601a:	f107 0308 	add.w	r3, r7, #8
 800601e:	4611      	mov	r1, r2
 8006020:	4618      	mov	r0, r3
 8006022:	f005 fd79 	bl	800bb18 <strcat>
		uart_EspSendBytes(str1, strlen(str1));
 8006026:	f107 0308 	add.w	r3, r7, #8
 800602a:	4618      	mov	r0, r3
 800602c:	f7fa f8d0 	bl	80001d0 <strlen>
 8006030:	4603      	mov	r3, r0
 8006032:	b29a      	uxth	r2, r3
 8006034:	f107 0308 	add.w	r3, r7, #8
 8006038:	4611      	mov	r1, r2
 800603a:	4618      	mov	r0, r3
 800603c:	f000 fba6 	bl	800678c <uart_EspSendBytes>

		statusGame = STOPMODE;
 8006040:	4b0f      	ldr	r3, [pc, #60]	; (8006080 <initStopGame+0xc4>)
 8006042:	2206      	movs	r2, #6
 8006044:	601a      	str	r2, [r3, #0]
		arrowStopMode = RESUME;
 8006046:	4b0f      	ldr	r3, [pc, #60]	; (8006084 <initStopGame+0xc8>)
 8006048:	2202      	movs	r2, #2
 800604a:	601a      	str	r2, [r3, #0]
		setTimerTiming(0);
 800604c:	2000      	movs	r0, #0
 800604e:	f7fe fce5 	bl	8004a1c <setTimerTiming>
		setTimerUart(0);
 8006052:	2000      	movs	r0, #0
 8006054:	f7fe fd3a 	bl	8004acc <setTimerUart>
		setTimerGenerateWall(0);
 8006058:	2000      	movs	r0, #0
 800605a:	f7fe fd1b 	bl	8004a94 <setTimerGenerateWall>
		flagStop = 1;
 800605e:	4b0a      	ldr	r3, [pc, #40]	; (8006088 <initStopGame+0xcc>)
 8006060:	2201      	movs	r2, #1
 8006062:	601a      	str	r2, [r3, #0]
		pickStop();
 8006064:	f7ff ff66 	bl	8005f34 <pickStop>
	}
	return 0;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	375c      	adds	r7, #92	; 0x5c
 800606e:	46bd      	mov	sp, r7
 8006070:	bd90      	pop	{r4, r7, pc}
 8006072:	bf00      	nop
 8006074:	0800d1a8 	.word	0x0800d1a8
 8006078:	20000258 	.word	0x20000258
 800607c:	0800d1e4 	.word	0x0800d1e4
 8006080:	2000026c 	.word	0x2000026c
 8006084:	2000005c 	.word	0x2000005c
 8006088:	20000278 	.word	0x20000278

0800608c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
	return 1;
 8006090:	2301      	movs	r3, #1
}
 8006092:	4618      	mov	r0, r3
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <_kill>:

int _kill(int pid, int sig)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80060a6:	f005 fc65 	bl	800b974 <__errno>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2216      	movs	r2, #22
 80060ae:	601a      	str	r2, [r3, #0]
	return -1;
 80060b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <_exit>:

void _exit (int status)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80060c4:	f04f 31ff 	mov.w	r1, #4294967295
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7ff ffe7 	bl	800609c <_kill>
	while (1) {}		/* Make sure we hang here */
 80060ce:	e7fe      	b.n	80060ce <_exit+0x12>

080060d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060dc:	2300      	movs	r3, #0
 80060de:	617b      	str	r3, [r7, #20]
 80060e0:	e00a      	b.n	80060f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80060e2:	f3af 8000 	nop.w
 80060e6:	4601      	mov	r1, r0
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	1c5a      	adds	r2, r3, #1
 80060ec:	60ba      	str	r2, [r7, #8]
 80060ee:	b2ca      	uxtb	r2, r1
 80060f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	3301      	adds	r3, #1
 80060f6:	617b      	str	r3, [r7, #20]
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	dbf0      	blt.n	80060e2 <_read+0x12>
	}

return len;
 8006100:	687b      	ldr	r3, [r7, #4]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b086      	sub	sp, #24
 800610e:	af00      	add	r7, sp, #0
 8006110:	60f8      	str	r0, [r7, #12]
 8006112:	60b9      	str	r1, [r7, #8]
 8006114:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006116:	2300      	movs	r3, #0
 8006118:	617b      	str	r3, [r7, #20]
 800611a:	e009      	b.n	8006130 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	60ba      	str	r2, [r7, #8]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	4618      	mov	r0, r3
 8006126:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	3301      	adds	r3, #1
 800612e:	617b      	str	r3, [r7, #20]
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	429a      	cmp	r2, r3
 8006136:	dbf1      	blt.n	800611c <_write+0x12>
	}
	return len;
 8006138:	687b      	ldr	r3, [r7, #4]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <_close>:

int _close(int file)
{
 8006142:	b480      	push	{r7}
 8006144:	b083      	sub	sp, #12
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
	return -1;
 800614a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800614e:	4618      	mov	r0, r3
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
 8006162:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800616a:	605a      	str	r2, [r3, #4]
	return 0;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <_isatty>:

int _isatty(int file)
{
 800617a:	b480      	push	{r7}
 800617c:	b083      	sub	sp, #12
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
	return 1;
 8006182:	2301      	movs	r3, #1
}
 8006184:	4618      	mov	r0, r3
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
	return 0;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
	...

080061ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80061b4:	4a14      	ldr	r2, [pc, #80]	; (8006208 <_sbrk+0x5c>)
 80061b6:	4b15      	ldr	r3, [pc, #84]	; (800620c <_sbrk+0x60>)
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80061c0:	4b13      	ldr	r3, [pc, #76]	; (8006210 <_sbrk+0x64>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d102      	bne.n	80061ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80061c8:	4b11      	ldr	r3, [pc, #68]	; (8006210 <_sbrk+0x64>)
 80061ca:	4a12      	ldr	r2, [pc, #72]	; (8006214 <_sbrk+0x68>)
 80061cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80061ce:	4b10      	ldr	r3, [pc, #64]	; (8006210 <_sbrk+0x64>)
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4413      	add	r3, r2
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d207      	bcs.n	80061ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80061dc:	f005 fbca 	bl	800b974 <__errno>
 80061e0:	4603      	mov	r3, r0
 80061e2:	220c      	movs	r2, #12
 80061e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80061e6:	f04f 33ff 	mov.w	r3, #4294967295
 80061ea:	e009      	b.n	8006200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80061ec:	4b08      	ldr	r3, [pc, #32]	; (8006210 <_sbrk+0x64>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80061f2:	4b07      	ldr	r3, [pc, #28]	; (8006210 <_sbrk+0x64>)
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4413      	add	r3, r2
 80061fa:	4a05      	ldr	r2, [pc, #20]	; (8006210 <_sbrk+0x64>)
 80061fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80061fe:	68fb      	ldr	r3, [r7, #12]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3718      	adds	r7, #24
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	20020000 	.word	0x20020000
 800620c:	00000400 	.word	0x00000400
 8006210:	20002a80 	.word	0x20002a80
 8006214:	20002b70 	.word	0x20002b70

08006218 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006218:	b480      	push	{r7}
 800621a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800621c:	4b06      	ldr	r3, [pc, #24]	; (8006238 <SystemInit+0x20>)
 800621e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006222:	4a05      	ldr	r2, [pc, #20]	; (8006238 <SystemInit+0x20>)
 8006224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800622c:	bf00      	nop
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	e000ed00 	.word	0xe000ed00

0800623c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006242:	f107 0308 	add.w	r3, r7, #8
 8006246:	2200      	movs	r2, #0
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	605a      	str	r2, [r3, #4]
 800624c:	609a      	str	r2, [r3, #8]
 800624e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006250:	463b      	mov	r3, r7
 8006252:	2200      	movs	r2, #0
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006258:	4b1d      	ldr	r3, [pc, #116]	; (80062d0 <MX_TIM2_Init+0x94>)
 800625a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800625e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8006260:	4b1b      	ldr	r3, [pc, #108]	; (80062d0 <MX_TIM2_Init+0x94>)
 8006262:	f240 3247 	movw	r2, #839	; 0x347
 8006266:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006268:	4b19      	ldr	r3, [pc, #100]	; (80062d0 <MX_TIM2_Init+0x94>)
 800626a:	2200      	movs	r2, #0
 800626c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800626e:	4b18      	ldr	r3, [pc, #96]	; (80062d0 <MX_TIM2_Init+0x94>)
 8006270:	2263      	movs	r2, #99	; 0x63
 8006272:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006274:	4b16      	ldr	r3, [pc, #88]	; (80062d0 <MX_TIM2_Init+0x94>)
 8006276:	2200      	movs	r2, #0
 8006278:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800627a:	4b15      	ldr	r3, [pc, #84]	; (80062d0 <MX_TIM2_Init+0x94>)
 800627c:	2200      	movs	r2, #0
 800627e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006280:	4813      	ldr	r0, [pc, #76]	; (80062d0 <MX_TIM2_Init+0x94>)
 8006282:	f003 fad9 	bl	8009838 <HAL_TIM_Base_Init>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800628c:	f7fc fc48 	bl	8002b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006294:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006296:	f107 0308 	add.w	r3, r7, #8
 800629a:	4619      	mov	r1, r3
 800629c:	480c      	ldr	r0, [pc, #48]	; (80062d0 <MX_TIM2_Init+0x94>)
 800629e:	f003 fdaf 	bl	8009e00 <HAL_TIM_ConfigClockSource>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80062a8:	f7fc fc3a 	bl	8002b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80062ac:	2300      	movs	r3, #0
 80062ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062b0:	2300      	movs	r3, #0
 80062b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80062b4:	463b      	mov	r3, r7
 80062b6:	4619      	mov	r1, r3
 80062b8:	4805      	ldr	r0, [pc, #20]	; (80062d0 <MX_TIM2_Init+0x94>)
 80062ba:	f004 f97b 	bl	800a5b4 <HAL_TIMEx_MasterConfigSynchronization>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80062c4:	f7fc fc2c 	bl	8002b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80062c8:	bf00      	nop
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	20002a84 	.word	0x20002a84

080062d4 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b088      	sub	sp, #32
 80062d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80062da:	1d3b      	adds	r3, r7, #4
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	605a      	str	r2, [r3, #4]
 80062e2:	609a      	str	r2, [r3, #8]
 80062e4:	60da      	str	r2, [r3, #12]
 80062e6:	611a      	str	r2, [r3, #16]
 80062e8:	615a      	str	r2, [r3, #20]
 80062ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80062ec:	4b1e      	ldr	r3, [pc, #120]	; (8006368 <MX_TIM13_Init+0x94>)
 80062ee:	4a1f      	ldr	r2, [pc, #124]	; (800636c <MX_TIM13_Init+0x98>)
 80062f0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 80062f2:	4b1d      	ldr	r3, [pc, #116]	; (8006368 <MX_TIM13_Init+0x94>)
 80062f4:	f240 3247 	movw	r2, #839	; 0x347
 80062f8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062fa:	4b1b      	ldr	r3, [pc, #108]	; (8006368 <MX_TIM13_Init+0x94>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8006300:	4b19      	ldr	r3, [pc, #100]	; (8006368 <MX_TIM13_Init+0x94>)
 8006302:	2263      	movs	r2, #99	; 0x63
 8006304:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006306:	4b18      	ldr	r3, [pc, #96]	; (8006368 <MX_TIM13_Init+0x94>)
 8006308:	2200      	movs	r2, #0
 800630a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800630c:	4b16      	ldr	r3, [pc, #88]	; (8006368 <MX_TIM13_Init+0x94>)
 800630e:	2200      	movs	r2, #0
 8006310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006312:	4815      	ldr	r0, [pc, #84]	; (8006368 <MX_TIM13_Init+0x94>)
 8006314:	f003 fa90 	bl	8009838 <HAL_TIM_Base_Init>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800631e:	f7fc fbff 	bl	8002b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8006322:	4811      	ldr	r0, [pc, #68]	; (8006368 <MX_TIM13_Init+0x94>)
 8006324:	f003 fb48 	bl	80099b8 <HAL_TIM_PWM_Init>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800632e:	f7fc fbf7 	bl	8002b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006332:	2360      	movs	r3, #96	; 0x60
 8006334:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006336:	2300      	movs	r3, #0
 8006338:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800633a:	2300      	movs	r3, #0
 800633c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800633e:	2300      	movs	r3, #0
 8006340:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006342:	1d3b      	adds	r3, r7, #4
 8006344:	2200      	movs	r2, #0
 8006346:	4619      	mov	r1, r3
 8006348:	4807      	ldr	r0, [pc, #28]	; (8006368 <MX_TIM13_Init+0x94>)
 800634a:	f003 fc97 	bl	8009c7c <HAL_TIM_PWM_ConfigChannel>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8006354:	f7fc fbe4 	bl	8002b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8006358:	4803      	ldr	r0, [pc, #12]	; (8006368 <MX_TIM13_Init+0x94>)
 800635a:	f000 f845 	bl	80063e8 <HAL_TIM_MspPostInit>

}
 800635e:	bf00      	nop
 8006360:	3720      	adds	r7, #32
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	20002acc 	.word	0x20002acc
 800636c:	40001c00 	.word	0x40001c00

08006370 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006380:	d116      	bne.n	80063b0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006382:	2300      	movs	r3, #0
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	4b16      	ldr	r3, [pc, #88]	; (80063e0 <HAL_TIM_Base_MspInit+0x70>)
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	4a15      	ldr	r2, [pc, #84]	; (80063e0 <HAL_TIM_Base_MspInit+0x70>)
 800638c:	f043 0301 	orr.w	r3, r3, #1
 8006390:	6413      	str	r3, [r2, #64]	; 0x40
 8006392:	4b13      	ldr	r3, [pc, #76]	; (80063e0 <HAL_TIM_Base_MspInit+0x70>)
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800639e:	2200      	movs	r2, #0
 80063a0:	2100      	movs	r1, #0
 80063a2:	201c      	movs	r0, #28
 80063a4:	f001 f9d1 	bl	800774a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80063a8:	201c      	movs	r0, #28
 80063aa:	f001 f9ea 	bl	8007782 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80063ae:	e012      	b.n	80063d6 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a0b      	ldr	r2, [pc, #44]	; (80063e4 <HAL_TIM_Base_MspInit+0x74>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d10d      	bne.n	80063d6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80063ba:	2300      	movs	r3, #0
 80063bc:	60bb      	str	r3, [r7, #8]
 80063be:	4b08      	ldr	r3, [pc, #32]	; (80063e0 <HAL_TIM_Base_MspInit+0x70>)
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	4a07      	ldr	r2, [pc, #28]	; (80063e0 <HAL_TIM_Base_MspInit+0x70>)
 80063c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063c8:	6413      	str	r3, [r2, #64]	; 0x40
 80063ca:	4b05      	ldr	r3, [pc, #20]	; (80063e0 <HAL_TIM_Base_MspInit+0x70>)
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d2:	60bb      	str	r3, [r7, #8]
 80063d4:	68bb      	ldr	r3, [r7, #8]
}
 80063d6:	bf00      	nop
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	40023800 	.word	0x40023800
 80063e4:	40001c00 	.word	0x40001c00

080063e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b088      	sub	sp, #32
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063f0:	f107 030c 	add.w	r3, r7, #12
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]
 80063f8:	605a      	str	r2, [r3, #4]
 80063fa:	609a      	str	r2, [r3, #8]
 80063fc:	60da      	str	r2, [r3, #12]
 80063fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a12      	ldr	r2, [pc, #72]	; (8006450 <HAL_TIM_MspPostInit+0x68>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d11e      	bne.n	8006448 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800640a:	2300      	movs	r3, #0
 800640c:	60bb      	str	r3, [r7, #8]
 800640e:	4b11      	ldr	r3, [pc, #68]	; (8006454 <HAL_TIM_MspPostInit+0x6c>)
 8006410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006412:	4a10      	ldr	r2, [pc, #64]	; (8006454 <HAL_TIM_MspPostInit+0x6c>)
 8006414:	f043 0320 	orr.w	r3, r3, #32
 8006418:	6313      	str	r3, [r2, #48]	; 0x30
 800641a:	4b0e      	ldr	r3, [pc, #56]	; (8006454 <HAL_TIM_MspPostInit+0x6c>)
 800641c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641e:	f003 0320 	and.w	r3, r3, #32
 8006422:	60bb      	str	r3, [r7, #8]
 8006424:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006426:	f44f 7380 	mov.w	r3, #256	; 0x100
 800642a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800642c:	2302      	movs	r3, #2
 800642e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006430:	2300      	movs	r3, #0
 8006432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006434:	2300      	movs	r3, #0
 8006436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8006438:	2309      	movs	r3, #9
 800643a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800643c:	f107 030c 	add.w	r3, r7, #12
 8006440:	4619      	mov	r1, r3
 8006442:	4805      	ldr	r0, [pc, #20]	; (8006458 <HAL_TIM_MspPostInit+0x70>)
 8006444:	f001 fdba 	bl	8007fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8006448:	bf00      	nop
 800644a:	3720      	adds	r7, #32
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	40001c00 	.word	0x40001c00
 8006454:	40023800 	.word	0x40023800
 8006458:	40021400 	.word	0x40021400

0800645c <setupTiming>:
#include "lcd.h"
#include "button.h"
#include "led_7seg.h"

void setupTiming()
{
 800645c:	b590      	push	{r4, r7, lr}
 800645e:	b095      	sub	sp, #84	; 0x54
 8006460:	af04      	add	r7, sp, #16
	lcd_Clear(BLACK);
 8006462:	2000      	movs	r0, #0
 8006464:	f7fb fc92 	bl	8001d8c <lcd_Clear>

	//	lcd_Fill(0, 0, 240, 30, BLACK);

	lcd_ShowPicture(logoBKX, logoBKY, logoBKHeight, logoBKWidth, gImage_BKWHITEBG);
 8006468:	4b6b      	ldr	r3, [pc, #428]	; (8006618 <setupTiming+0x1bc>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	b298      	uxth	r0, r3
 800646e:	4b6b      	ldr	r3, [pc, #428]	; (800661c <setupTiming+0x1c0>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	b299      	uxth	r1, r3
 8006474:	4b6a      	ldr	r3, [pc, #424]	; (8006620 <setupTiming+0x1c4>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	b29a      	uxth	r2, r3
 800647a:	4b6a      	ldr	r3, [pc, #424]	; (8006624 <setupTiming+0x1c8>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	b29b      	uxth	r3, r3
 8006480:	4c69      	ldr	r4, [pc, #420]	; (8006628 <setupTiming+0x1cc>)
 8006482:	9400      	str	r4, [sp, #0]
 8006484:	f7fb fe8c 	bl	80021a0 <lcd_ShowPicture>

	lcd_ShowStr(60, 55, " SNAKE GAME ", WHITE, GRAY, 24, 0);
 8006488:	2300      	movs	r3, #0
 800648a:	9302      	str	r3, [sp, #8]
 800648c:	2318      	movs	r3, #24
 800648e:	9301      	str	r3, [sp, #4]
 8006490:	f248 4330 	movw	r3, #33840	; 0x8430
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800649a:	4a64      	ldr	r2, [pc, #400]	; (800662c <setupTiming+0x1d0>)
 800649c:	2137      	movs	r1, #55	; 0x37
 800649e:	203c      	movs	r0, #60	; 0x3c
 80064a0:	f7fc f858 	bl	8002554 <lcd_ShowStr>

	char str1[50] = " ID: ";
 80064a4:	4a62      	ldr	r2, [pc, #392]	; (8006630 <setupTiming+0x1d4>)
 80064a6:	1d3b      	adds	r3, r7, #4
 80064a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80064ac:	6018      	str	r0, [r3, #0]
 80064ae:	3304      	adds	r3, #4
 80064b0:	8019      	strh	r1, [r3, #0]
 80064b2:	f107 030a 	add.w	r3, r7, #10
 80064b6:	222c      	movs	r2, #44	; 0x2c
 80064b8:	2100      	movs	r1, #0
 80064ba:	4618      	mov	r0, r3
 80064bc:	f005 fa84 	bl	800b9c8 <memset>
	char *str2 = convert2str(ID);
 80064c0:	4b5c      	ldr	r3, [pc, #368]	; (8006634 <setupTiming+0x1d8>)
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7fc fb83 	bl	8002bd0 <convert2str>
 80064ca:	4603      	mov	r3, r0
 80064cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	strcat(str1, str2);
 80064ce:	1d3b      	adds	r3, r7, #4
 80064d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064d2:	4618      	mov	r0, r3
 80064d4:	f005 fb20 	bl	800bb18 <strcat>

	lcd_StrCenter(0, 100, str1, WHITE, GRAY, 24, 0);
 80064d8:	1d3a      	adds	r2, r7, #4
 80064da:	2300      	movs	r3, #0
 80064dc:	9302      	str	r3, [sp, #8]
 80064de:	2318      	movs	r3, #24
 80064e0:	9301      	str	r3, [sp, #4]
 80064e2:	f248 4330 	movw	r3, #33840	; 0x8430
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064ec:	2164      	movs	r1, #100	; 0x64
 80064ee:	2000      	movs	r0, #0
 80064f0:	f7fc f894 	bl	800261c <lcd_StrCenter>

	lcd_StrCenter(0, 150, " MODE: TIMING", WHITE, GRAY, 24, 0);
 80064f4:	2300      	movs	r3, #0
 80064f6:	9302      	str	r3, [sp, #8]
 80064f8:	2318      	movs	r3, #24
 80064fa:	9301      	str	r3, [sp, #4]
 80064fc:	f248 4330 	movw	r3, #33840	; 0x8430
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006506:	4a4c      	ldr	r2, [pc, #304]	; (8006638 <setupTiming+0x1dc>)
 8006508:	2196      	movs	r1, #150	; 0x96
 800650a:	2000      	movs	r0, #0
 800650c:	f7fc f886 	bl	800261c <lcd_StrCenter>

	lcd_ShowStr(20, 210, "TIME:", WHITE, GRAY, 24, 0);
 8006510:	2300      	movs	r3, #0
 8006512:	9302      	str	r3, [sp, #8]
 8006514:	2318      	movs	r3, #24
 8006516:	9301      	str	r3, [sp, #4]
 8006518:	f248 4330 	movw	r3, #33840	; 0x8430
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006522:	4a46      	ldr	r2, [pc, #280]	; (800663c <setupTiming+0x1e0>)
 8006524:	21d2      	movs	r1, #210	; 0xd2
 8006526:	2014      	movs	r0, #20
 8006528:	f7fc f814 	bl	8002554 <lcd_ShowStr>
	lcd_DrawRectangle(150, 210, 200, 240, WHITE);
 800652c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	23f0      	movs	r3, #240	; 0xf0
 8006534:	22c8      	movs	r2, #200	; 0xc8
 8006536:	21d2      	movs	r1, #210	; 0xd2
 8006538:	2096      	movs	r0, #150	; 0x96
 800653a:	f7fb fd2a 	bl	8001f92 <lcd_DrawRectangle>

	char *str3 = convert2str(TIMING);
 800653e:	4b40      	ldr	r3, [pc, #256]	; (8006640 <setupTiming+0x1e4>)
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	4618      	mov	r0, r3
 8006544:	f7fc fb44 	bl	8002bd0 <convert2str>
 8006548:	4603      	mov	r3, r0
 800654a:	63bb      	str	r3, [r7, #56]	; 0x38
	if(TIMING < 120)
 800654c:	4b3c      	ldr	r3, [pc, #240]	; (8006640 <setupTiming+0x1e4>)
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	2b77      	cmp	r3, #119	; 0x77
 8006552:	d80e      	bhi.n	8006572 <setupTiming+0x116>
	{
		lcd_ShowStr(165, 212, str3, WHITE, GRAY, 24, 1);
 8006554:	2301      	movs	r3, #1
 8006556:	9302      	str	r3, [sp, #8]
 8006558:	2318      	movs	r3, #24
 800655a:	9301      	str	r3, [sp, #4]
 800655c:	f248 4330 	movw	r3, #33840	; 0x8430
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006568:	21d4      	movs	r1, #212	; 0xd4
 800656a:	20a5      	movs	r0, #165	; 0xa5
 800656c:	f7fb fff2 	bl	8002554 <lcd_ShowStr>
 8006570:	e00d      	b.n	800658e <setupTiming+0x132>
	}else{
		lcd_ShowStr(157, 212, str3, WHITE, GRAY, 24, 1);
 8006572:	2301      	movs	r3, #1
 8006574:	9302      	str	r3, [sp, #8]
 8006576:	2318      	movs	r3, #24
 8006578:	9301      	str	r3, [sp, #4]
 800657a:	f248 4330 	movw	r3, #33840	; 0x8430
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006586:	21d4      	movs	r1, #212	; 0xd4
 8006588:	209d      	movs	r0, #157	; 0x9d
 800658a:	f7fb ffe3 	bl	8002554 <lcd_ShowStr>
	}

	if(TIMING < 120)
 800658e:	4b2c      	ldr	r3, [pc, #176]	; (8006640 <setupTiming+0x1e4>)
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	2b77      	cmp	r3, #119	; 0x77
 8006594:	d81a      	bhi.n	80065cc <setupTiming+0x170>
	{
		lcd_DrawLine(165, 200, 185, 200, WHITE);
 8006596:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	23c8      	movs	r3, #200	; 0xc8
 800659e:	22b9      	movs	r2, #185	; 0xb9
 80065a0:	21c8      	movs	r1, #200	; 0xc8
 80065a2:	20a5      	movs	r0, #165	; 0xa5
 80065a4:	f7fb fc71 	bl	8001e8a <lcd_DrawLine>
		lcd_DrawLine(175, 180, 165, 200, WHITE);
 80065a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	23c8      	movs	r3, #200	; 0xc8
 80065b0:	22a5      	movs	r2, #165	; 0xa5
 80065b2:	21b4      	movs	r1, #180	; 0xb4
 80065b4:	20af      	movs	r0, #175	; 0xaf
 80065b6:	f7fb fc68 	bl	8001e8a <lcd_DrawLine>
		lcd_DrawLine(185, 200, 175, 180, WHITE);
 80065ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	23b4      	movs	r3, #180	; 0xb4
 80065c2:	22af      	movs	r2, #175	; 0xaf
 80065c4:	21c8      	movs	r1, #200	; 0xc8
 80065c6:	20b9      	movs	r0, #185	; 0xb9
 80065c8:	f7fb fc5f 	bl	8001e8a <lcd_DrawLine>
	}
	if(TIMING > 30)
 80065cc:	4b1c      	ldr	r3, [pc, #112]	; (8006640 <setupTiming+0x1e4>)
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	2b1e      	cmp	r3, #30
 80065d2:	d91c      	bls.n	800660e <setupTiming+0x1b2>
	{
		lcd_DrawLine(165, 250, 185, 250, WHITE);
 80065d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	23fa      	movs	r3, #250	; 0xfa
 80065dc:	22b9      	movs	r2, #185	; 0xb9
 80065de:	21fa      	movs	r1, #250	; 0xfa
 80065e0:	20a5      	movs	r0, #165	; 0xa5
 80065e2:	f7fb fc52 	bl	8001e8a <lcd_DrawLine>
		lcd_DrawLine(165, 250, 175, 270, WHITE);
 80065e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80065f0:	22af      	movs	r2, #175	; 0xaf
 80065f2:	21fa      	movs	r1, #250	; 0xfa
 80065f4:	20a5      	movs	r0, #165	; 0xa5
 80065f6:	f7fb fc48 	bl	8001e8a <lcd_DrawLine>
		lcd_DrawLine(185, 250, 175, 270, WHITE);
 80065fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8006604:	22af      	movs	r2, #175	; 0xaf
 8006606:	21fa      	movs	r1, #250	; 0xfa
 8006608:	20b9      	movs	r0, #185	; 0xb9
 800660a:	f7fb fc3e 	bl	8001e8a <lcd_DrawLine>
	}
}
 800660e:	bf00      	nop
 8006610:	3744      	adds	r7, #68	; 0x44
 8006612:	46bd      	mov	sp, r7
 8006614:	bd90      	pop	{r4, r7, pc}
 8006616:	bf00      	nop
 8006618:	20000074 	.word	0x20000074
 800661c:	20000078 	.word	0x20000078
 8006620:	2000007c 	.word	0x2000007c
 8006624:	20000080 	.word	0x20000080
 8006628:	080103f4 	.word	0x080103f4
 800662c:	0800d1f4 	.word	0x0800d1f4
 8006630:	0800d21c 	.word	0x0800d21c
 8006634:	20000258 	.word	0x20000258
 8006638:	0800d204 	.word	0x0800d204
 800663c:	0800d214 	.word	0x0800d214
 8006640:	20000000 	.word	0x20000000

08006644 <show7seg>:

void show7seg(int first, int second, int third, int fourth)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
 8006650:	603b      	str	r3, [r7, #0]
	led7_SetDigit(first, 0, 0);
 8006652:	2200      	movs	r2, #0
 8006654:	2100      	movs	r1, #0
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f7fc f8aa 	bl	80027b0 <led7_SetDigit>
	led7_SetDigit(second, 1, 0);
 800665c:	2200      	movs	r2, #0
 800665e:	2101      	movs	r1, #1
 8006660:	68b8      	ldr	r0, [r7, #8]
 8006662:	f7fc f8a5 	bl	80027b0 <led7_SetDigit>
	led7_SetDigit(third, 2, 0);
 8006666:	2200      	movs	r2, #0
 8006668:	2102      	movs	r1, #2
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f7fc f8a0 	bl	80027b0 <led7_SetDigit>
	led7_SetDigit(fourth, 3, 0);
 8006670:	2200      	movs	r2, #0
 8006672:	2103      	movs	r1, #3
 8006674:	6838      	ldr	r0, [r7, #0]
 8006676:	f7fc f89b 	bl	80027b0 <led7_SetDigit>
	led7_SetColon(1);
 800667a:	2001      	movs	r0, #1
 800667c:	f7fc f8bc 	bl	80027f8 <led7_SetColon>
}
 8006680:	bf00      	nop
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <showTiming>:

void showTiming()
{
 8006688:	b5b0      	push	{r4, r5, r7, lr}
 800668a:	af00      	add	r7, sp, #0
//	char str5[50] = "TIMING: ";
//	char *str6 = convert2str(TIMING);
//	strcat(str5, str6);
//	lcd_Fill(timingX, timingY, timingX+90, timingY+15, BLUE);
//	lcd_ShowStr(timingX, timingY, str5, RED, BLUE, 16, 0);
	show7seg(TIMING/600, TIMING/60, TIMING%60 / 10, TIMING%10);
 800668c:	4b19      	ldr	r3, [pc, #100]	; (80066f4 <showTiming+0x6c>)
 800668e:	881b      	ldrh	r3, [r3, #0]
 8006690:	4a19      	ldr	r2, [pc, #100]	; (80066f8 <showTiming+0x70>)
 8006692:	fba2 2303 	umull	r2, r3, r2, r3
 8006696:	099b      	lsrs	r3, r3, #6
 8006698:	b29b      	uxth	r3, r3
 800669a:	4618      	mov	r0, r3
 800669c:	4b15      	ldr	r3, [pc, #84]	; (80066f4 <showTiming+0x6c>)
 800669e:	881b      	ldrh	r3, [r3, #0]
 80066a0:	4a16      	ldr	r2, [pc, #88]	; (80066fc <showTiming+0x74>)
 80066a2:	fba2 2303 	umull	r2, r3, r2, r3
 80066a6:	095b      	lsrs	r3, r3, #5
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	461c      	mov	r4, r3
 80066ac:	4b11      	ldr	r3, [pc, #68]	; (80066f4 <showTiming+0x6c>)
 80066ae:	881a      	ldrh	r2, [r3, #0]
 80066b0:	4b12      	ldr	r3, [pc, #72]	; (80066fc <showTiming+0x74>)
 80066b2:	fba3 1302 	umull	r1, r3, r3, r2
 80066b6:	0959      	lsrs	r1, r3, #5
 80066b8:	460b      	mov	r3, r1
 80066ba:	011b      	lsls	r3, r3, #4
 80066bc:	1a5b      	subs	r3, r3, r1
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	4a0e      	ldr	r2, [pc, #56]	; (8006700 <showTiming+0x78>)
 80066c6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ca:	08db      	lsrs	r3, r3, #3
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	461d      	mov	r5, r3
 80066d0:	4b08      	ldr	r3, [pc, #32]	; (80066f4 <showTiming+0x6c>)
 80066d2:	881a      	ldrh	r2, [r3, #0]
 80066d4:	4b0a      	ldr	r3, [pc, #40]	; (8006700 <showTiming+0x78>)
 80066d6:	fba3 1302 	umull	r1, r3, r3, r2
 80066da:	08d9      	lsrs	r1, r3, #3
 80066dc:	460b      	mov	r3, r1
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	440b      	add	r3, r1
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	462a      	mov	r2, r5
 80066ea:	4621      	mov	r1, r4
 80066ec:	f7ff ffaa 	bl	8006644 <show7seg>
}
 80066f0:	bf00      	nop
 80066f2:	bdb0      	pop	{r4, r5, r7, pc}
 80066f4:	20000000 	.word	0x20000000
 80066f8:	1b4e81b5 	.word	0x1b4e81b5
 80066fc:	88888889 	.word	0x88888889
 8006700:	cccccccd 	.word	0xcccccccd

08006704 <initTimingMode>:

void initTimingMode()
{
 8006704:	b580      	push	{r7, lr}
 8006706:	af00      	add	r7, sp, #0
	if(button_count[3] == 1)
 8006708:	4b13      	ldr	r3, [pc, #76]	; (8006758 <initTimingMode+0x54>)
 800670a:	88db      	ldrh	r3, [r3, #6]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d10e      	bne.n	800672e <initTimingMode+0x2a>
	{
		TIMING = TIMING + 30;
 8006710:	4b12      	ldr	r3, [pc, #72]	; (800675c <initTimingMode+0x58>)
 8006712:	881b      	ldrh	r3, [r3, #0]
 8006714:	331e      	adds	r3, #30
 8006716:	b29a      	uxth	r2, r3
 8006718:	4b10      	ldr	r3, [pc, #64]	; (800675c <initTimingMode+0x58>)
 800671a:	801a      	strh	r2, [r3, #0]
		if(TIMING > 120)
 800671c:	4b0f      	ldr	r3, [pc, #60]	; (800675c <initTimingMode+0x58>)
 800671e:	881b      	ldrh	r3, [r3, #0]
 8006720:	2b78      	cmp	r3, #120	; 0x78
 8006722:	d902      	bls.n	800672a <initTimingMode+0x26>
		{
			TIMING = 120;
 8006724:	4b0d      	ldr	r3, [pc, #52]	; (800675c <initTimingMode+0x58>)
 8006726:	2278      	movs	r2, #120	; 0x78
 8006728:	801a      	strh	r2, [r3, #0]
		}
		setupTiming();
 800672a:	f7ff fe97 	bl	800645c <setupTiming>
	}
	if(button_count[7] == 1)
 800672e:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <initTimingMode+0x54>)
 8006730:	89db      	ldrh	r3, [r3, #14]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d10e      	bne.n	8006754 <initTimingMode+0x50>
	{
		TIMING = TIMING - 30;
 8006736:	4b09      	ldr	r3, [pc, #36]	; (800675c <initTimingMode+0x58>)
 8006738:	881b      	ldrh	r3, [r3, #0]
 800673a:	3b1e      	subs	r3, #30
 800673c:	b29a      	uxth	r2, r3
 800673e:	4b07      	ldr	r3, [pc, #28]	; (800675c <initTimingMode+0x58>)
 8006740:	801a      	strh	r2, [r3, #0]
		if(TIMING < 30)
 8006742:	4b06      	ldr	r3, [pc, #24]	; (800675c <initTimingMode+0x58>)
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	2b1d      	cmp	r3, #29
 8006748:	d802      	bhi.n	8006750 <initTimingMode+0x4c>
		{
			TIMING = 30;
 800674a:	4b04      	ldr	r3, [pc, #16]	; (800675c <initTimingMode+0x58>)
 800674c:	221e      	movs	r2, #30
 800674e:	801a      	strh	r2, [r3, #0]
		}
		setupTiming();
 8006750:	f7ff fe84 	bl	800645c <setupTiming>
	}
}
 8006754:	bf00      	nop
 8006756:	bd80      	pop	{r7, pc}
 8006758:	200001d4 	.word	0x200001d4
 800675c:	20000000 	.word	0x20000000

08006760 <uart_init_esp>:
//    uart_Rs232SendString(".");
//    sprintf((void*)msg,"%ld",num%100);
//    uart_Rs232SendString(msg);
//}

void uart_init_esp(){
 8006760:	b580      	push	{r7, lr}
 8006762:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8006764:	2201      	movs	r2, #1
 8006766:	4906      	ldr	r1, [pc, #24]	; (8006780 <uart_init_esp+0x20>)
 8006768:	4806      	ldr	r0, [pc, #24]	; (8006784 <uart_init_esp+0x24>)
 800676a:	f004 f892 	bl	800a892 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 800676e:	2201      	movs	r2, #1
 8006770:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006774:	4804      	ldr	r0, [pc, #16]	; (8006788 <uart_init_esp+0x28>)
 8006776:	f001 fdbd 	bl	80082f4 <HAL_GPIO_WritePin>
}
 800677a:	bf00      	nop
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	20002b14 	.word	0x20002b14
 8006784:	20002b18 	.word	0x20002b18
 8006788:	40021400 	.word	0x40021400

0800678c <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	460b      	mov	r3, r1
 8006796:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 8006798:	887a      	ldrh	r2, [r7, #2]
 800679a:	230a      	movs	r3, #10
 800679c:	6879      	ldr	r1, [r7, #4]
 800679e:	4803      	ldr	r0, [pc, #12]	; (80067ac <uart_EspSendBytes+0x20>)
 80067a0:	f003 ffe5 	bl	800a76e <HAL_UART_Transmit>
}
 80067a4:	bf00      	nop
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	20002b18 	.word	0x20002b18

080067b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
//
//		// turn on the receive interrupt
//		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
//	}

	if(huart->Instance == USART2){
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a11      	ldr	r2, [pc, #68]	; (8006804 <HAL_UART_RxCpltCallback+0x54>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d11b      	bne.n	80067fa <HAL_UART_RxCpltCallback+0x4a>
		if(receive_buffer2 == 'O') check_esp = 1;
 80067c2:	4b11      	ldr	r3, [pc, #68]	; (8006808 <HAL_UART_RxCpltCallback+0x58>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b4f      	cmp	r3, #79	; 0x4f
 80067c8:	d103      	bne.n	80067d2 <HAL_UART_RxCpltCallback+0x22>
 80067ca:	4b10      	ldr	r3, [pc, #64]	; (800680c <HAL_UART_RxCpltCallback+0x5c>)
 80067cc:	2201      	movs	r2, #1
 80067ce:	701a      	strb	r2, [r3, #0]
 80067d0:	e00e      	b.n	80067f0 <HAL_UART_RxCpltCallback+0x40>
		else if(receive_buffer2 == 'a') light_status = 0;
 80067d2:	4b0d      	ldr	r3, [pc, #52]	; (8006808 <HAL_UART_RxCpltCallback+0x58>)
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	2b61      	cmp	r3, #97	; 0x61
 80067d8:	d103      	bne.n	80067e2 <HAL_UART_RxCpltCallback+0x32>
 80067da:	4b0d      	ldr	r3, [pc, #52]	; (8006810 <HAL_UART_RxCpltCallback+0x60>)
 80067dc:	2200      	movs	r2, #0
 80067de:	701a      	strb	r2, [r3, #0]
 80067e0:	e006      	b.n	80067f0 <HAL_UART_RxCpltCallback+0x40>
		else if(receive_buffer2 == 'A') light_status = 1;
 80067e2:	4b09      	ldr	r3, [pc, #36]	; (8006808 <HAL_UART_RxCpltCallback+0x58>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	2b41      	cmp	r3, #65	; 0x41
 80067e8:	d102      	bne.n	80067f0 <HAL_UART_RxCpltCallback+0x40>
 80067ea:	4b09      	ldr	r3, [pc, #36]	; (8006810 <HAL_UART_RxCpltCallback+0x60>)
 80067ec:	2201      	movs	r2, #1
 80067ee:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 80067f0:	2201      	movs	r2, #1
 80067f2:	4905      	ldr	r1, [pc, #20]	; (8006808 <HAL_UART_RxCpltCallback+0x58>)
 80067f4:	4807      	ldr	r0, [pc, #28]	; (8006814 <HAL_UART_RxCpltCallback+0x64>)
 80067f6:	f004 f84c 	bl	800a892 <HAL_UART_Receive_IT>
	}
}
 80067fa:	bf00      	nop
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	40004400 	.word	0x40004400
 8006808:	20002b14 	.word	0x20002b14
 800680c:	20002b15 	.word	0x20002b15
 8006810:	2000029c 	.word	0x2000029c
 8006814:	20002b18 	.word	0x20002b18

08006818 <uartSendContinuePlay>:
	strcat(str1, "#");
	uart_EspSendBytes(str1, strlen(str1));
}

void uartSendContinuePlay()
{
 8006818:	b5b0      	push	{r4, r5, r7, lr}
 800681a:	b0c0      	sub	sp, #256	; 0x100
 800681c:	af00      	add	r7, sp, #0
	char str1[70] = "GAME_PLAY#";
 800681e:	4a59      	ldr	r2, [pc, #356]	; (8006984 <uartSendContinuePlay+0x16c>)
 8006820:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006824:	ca07      	ldmia	r2, {r0, r1, r2}
 8006826:	c303      	stmia	r3!, {r0, r1}
 8006828:	801a      	strh	r2, [r3, #0]
 800682a:	3302      	adds	r3, #2
 800682c:	0c12      	lsrs	r2, r2, #16
 800682e:	701a      	strb	r2, [r3, #0]
 8006830:	f107 03b3 	add.w	r3, r7, #179	; 0xb3
 8006834:	223b      	movs	r2, #59	; 0x3b
 8006836:	2100      	movs	r1, #0
 8006838:	4618      	mov	r0, r3
 800683a:	f005 f8c5 	bl	800b9c8 <memset>
	char *str2 = convert2str(ID);
 800683e:	4b52      	ldr	r3, [pc, #328]	; (8006988 <uartSendContinuePlay+0x170>)
 8006840:	881b      	ldrh	r3, [r3, #0]
 8006842:	4618      	mov	r0, r3
 8006844:	f7fc f9c4 	bl	8002bd0 <convert2str>
 8006848:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
	strcat(str1, str2);
 800684c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006850:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8006854:	4618      	mov	r0, r3
 8006856:	f005 f95f 	bl	800bb18 <strcat>

	char str3[60] = "is continue playing game, time: ";
 800685a:	4b4c      	ldr	r3, [pc, #304]	; (800698c <uartSendContinuePlay+0x174>)
 800685c:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8006860:	461d      	mov	r5, r3
 8006862:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006864:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800686a:	682b      	ldr	r3, [r5, #0]
 800686c:	7023      	strb	r3, [r4, #0]
 800686e:	f107 038d 	add.w	r3, r7, #141	; 0x8d
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	605a      	str	r2, [r3, #4]
 8006878:	609a      	str	r2, [r3, #8]
 800687a:	60da      	str	r2, [r3, #12]
 800687c:	611a      	str	r2, [r3, #16]
 800687e:	615a      	str	r2, [r3, #20]
 8006880:	f8c3 2017 	str.w	r2, [r3, #23]
	char *str4 = convert2str(TOTALTIME);
 8006884:	4b42      	ldr	r3, [pc, #264]	; (8006990 <uartSendContinuePlay+0x178>)
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	4618      	mov	r0, r3
 800688a:	f7fc f9a1 	bl	8002bd0 <convert2str>
 800688e:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
	strcat(str3, str4);
 8006892:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006896:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800689a:	4618      	mov	r0, r3
 800689c:	f005 f93c 	bl	800bb18 <strcat>

	char str5[50] = ", score: ";
 80068a0:	4a3c      	ldr	r2, [pc, #240]	; (8006994 <uartSendContinuePlay+0x17c>)
 80068a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80068a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80068a8:	c303      	stmia	r3!, {r0, r1}
 80068aa:	801a      	strh	r2, [r3, #0]
 80068ac:	f107 0342 	add.w	r3, r7, #66	; 0x42
 80068b0:	2228      	movs	r2, #40	; 0x28
 80068b2:	2100      	movs	r1, #0
 80068b4:	4618      	mov	r0, r3
 80068b6:	f005 f887 	bl	800b9c8 <memset>
	char *str6 = convert2str(SCORE);
 80068ba:	4b37      	ldr	r3, [pc, #220]	; (8006998 <uartSendContinuePlay+0x180>)
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	4618      	mov	r0, r3
 80068c0:	f7fc f986 	bl	8002bd0 <convert2str>
 80068c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
	strcat(str5, str6);
 80068c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80068cc:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80068d0:	4618      	mov	r0, r3
 80068d2:	f005 f921 	bl	800bb18 <strcat>

	char str7[50] = ", performance: ";
 80068d6:	4b31      	ldr	r3, [pc, #196]	; (800699c <uartSendContinuePlay+0x184>)
 80068d8:	1d3c      	adds	r4, r7, #4
 80068da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80068dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80068e0:	f107 0314 	add.w	r3, r7, #20
 80068e4:	2222      	movs	r2, #34	; 0x22
 80068e6:	2100      	movs	r1, #0
 80068e8:	4618      	mov	r0, r3
 80068ea:	f005 f86d 	bl	800b9c8 <memset>
	char *str8 = convert2str(SCORE/TOTALTIME);
 80068ee:	4b2a      	ldr	r3, [pc, #168]	; (8006998 <uartSendContinuePlay+0x180>)
 80068f0:	881a      	ldrh	r2, [r3, #0]
 80068f2:	4b27      	ldr	r3, [pc, #156]	; (8006990 <uartSendContinuePlay+0x178>)
 80068f4:	881b      	ldrh	r3, [r3, #0]
 80068f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fc f967 	bl	8002bd0 <convert2str>
 8006902:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
	strcat(str7, str8);
 8006906:	1d3b      	adds	r3, r7, #4
 8006908:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800690c:	4618      	mov	r0, r3
 800690e:	f005 f903 	bl	800bb18 <strcat>

	strcat(str1, str3);
 8006912:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006916:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800691a:	4611      	mov	r1, r2
 800691c:	4618      	mov	r0, r3
 800691e:	f005 f8fb 	bl	800bb18 <strcat>
	strcat(str1, str5);
 8006922:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006926:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800692a:	4611      	mov	r1, r2
 800692c:	4618      	mov	r0, r3
 800692e:	f005 f8f3 	bl	800bb18 <strcat>
	strcat(str1, str7);
 8006932:	1d3a      	adds	r2, r7, #4
 8006934:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006938:	4611      	mov	r1, r2
 800693a:	4618      	mov	r0, r3
 800693c:	f005 f8ec 	bl	800bb18 <strcat>
	strcat(str1, "#");
 8006940:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006944:	4618      	mov	r0, r3
 8006946:	f7f9 fc43 	bl	80001d0 <strlen>
 800694a:	4603      	mov	r3, r0
 800694c:	461a      	mov	r2, r3
 800694e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006952:	4413      	add	r3, r2
 8006954:	4912      	ldr	r1, [pc, #72]	; (80069a0 <uartSendContinuePlay+0x188>)
 8006956:	461a      	mov	r2, r3
 8006958:	460b      	mov	r3, r1
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	8013      	strh	r3, [r2, #0]
	uart_EspSendBytes(str1, strlen(str1));
 800695e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006962:	4618      	mov	r0, r3
 8006964:	f7f9 fc34 	bl	80001d0 <strlen>
 8006968:	4603      	mov	r3, r0
 800696a:	b29a      	uxth	r2, r3
 800696c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006970:	4611      	mov	r1, r2
 8006972:	4618      	mov	r0, r3
 8006974:	f7ff ff0a 	bl	800678c <uart_EspSendBytes>
}
 8006978:	bf00      	nop
 800697a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800697e:	46bd      	mov	sp, r7
 8006980:	bdb0      	pop	{r4, r5, r7, pc}
 8006982:	bf00      	nop
 8006984:	0800d254 	.word	0x0800d254
 8006988:	20000258 	.word	0x20000258
 800698c:	0800d2f8 	.word	0x0800d2f8
 8006990:	20000284 	.word	0x20000284
 8006994:	0800d334 	.word	0x0800d334
 8006998:	2000025a 	.word	0x2000025a
 800699c:	0800d368 	.word	0x0800d368
 80069a0:	0800d250 	.word	0x0800d250

080069a4 <uartSendSensor>:

void uartSendSensor()
{
 80069a4:	b5b0      	push	{r4, r5, r7, lr}
 80069a6:	b0ba      	sub	sp, #232	; 0xe8
 80069a8:	af00      	add	r7, sp, #0
	char str1[50] = "SENSOR_INFO#";
 80069aa:	4b4f      	ldr	r3, [pc, #316]	; (8006ae8 <uartSendSensor+0x144>)
 80069ac:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 80069b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80069b2:	c407      	stmia	r4!, {r0, r1, r2}
 80069b4:	7023      	strb	r3, [r4, #0]
 80069b6:	f107 03b5 	add.w	r3, r7, #181	; 0xb5
 80069ba:	2225      	movs	r2, #37	; 0x25
 80069bc:	2100      	movs	r1, #0
 80069be:	4618      	mov	r0, r3
 80069c0:	f005 f802 	bl	800b9c8 <memset>
	char str3[60] = "Temperature: ";
 80069c4:	4b49      	ldr	r3, [pc, #292]	; (8006aec <uartSendSensor+0x148>)
 80069c6:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80069ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80069cc:	c407      	stmia	r4!, {r0, r1, r2}
 80069ce:	8023      	strh	r3, [r4, #0]
 80069d0:	f107 037a 	add.w	r3, r7, #122	; 0x7a
 80069d4:	222e      	movs	r2, #46	; 0x2e
 80069d6:	2100      	movs	r1, #0
 80069d8:	4618      	mov	r0, r3
 80069da:	f004 fff5 	bl	800b9c8 <memset>
	char *str4 = convert2str((uint16_t)sensor_GetTemperature());
 80069de:	f7fc f8d9 	bl	8002b94 <sensor_GetTemperature>
 80069e2:	eef0 7a40 	vmov.f32	s15, s0
 80069e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069ea:	ee17 3a90 	vmov	r3, s15
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7fc f8ed 	bl	8002bd0 <convert2str>
 80069f6:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
	strcat(str3, str4);
 80069fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80069fe:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8006a02:	4618      	mov	r0, r3
 8006a04:	f005 f888 	bl	800bb18 <strcat>

	char str5[50] = ", light: ";
 8006a08:	4a39      	ldr	r2, [pc, #228]	; (8006af0 <uartSendSensor+0x14c>)
 8006a0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006a10:	c303      	stmia	r3!, {r0, r1}
 8006a12:	801a      	strh	r2, [r3, #0]
 8006a14:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8006a18:	2228      	movs	r2, #40	; 0x28
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f004 ffd3 	bl	800b9c8 <memset>
	char *str6 = convert2str(sensor_GetLight());
 8006a22:	f7fc f89f 	bl	8002b64 <sensor_GetLight>
 8006a26:	4603      	mov	r3, r0
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7fc f8d1 	bl	8002bd0 <convert2str>
 8006a2e:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
	strcat(str5, str6);
 8006a32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a36:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f005 f86c 	bl	800bb18 <strcat>

	char str7[50] = ", potentiometer: ";
 8006a40:	4b2c      	ldr	r3, [pc, #176]	; (8006af4 <uartSendSensor+0x150>)
 8006a42:	1d3c      	adds	r4, r7, #4
 8006a44:	461d      	mov	r5, r3
 8006a46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a4a:	682b      	ldr	r3, [r5, #0]
 8006a4c:	8023      	strh	r3, [r4, #0]
 8006a4e:	f107 0316 	add.w	r3, r7, #22
 8006a52:	2220      	movs	r2, #32
 8006a54:	2100      	movs	r1, #0
 8006a56:	4618      	mov	r0, r3
 8006a58:	f004 ffb6 	bl	800b9c8 <memset>
	char *str8 = convert2str(sensor_GetPotentiometer());
 8006a5c:	f7fc f88e 	bl	8002b7c <sensor_GetPotentiometer>
 8006a60:	4603      	mov	r3, r0
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fc f8b4 	bl	8002bd0 <convert2str>
 8006a68:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	strcat(str7, str8);
 8006a6c:	1d3b      	adds	r3, r7, #4
 8006a6e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006a72:	4618      	mov	r0, r3
 8006a74:	f005 f850 	bl	800bb18 <strcat>

	strcat(str1, str3);
 8006a78:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8006a7c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006a80:	4611      	mov	r1, r2
 8006a82:	4618      	mov	r0, r3
 8006a84:	f005 f848 	bl	800bb18 <strcat>
	strcat(str1, str5);
 8006a88:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006a8c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006a90:	4611      	mov	r1, r2
 8006a92:	4618      	mov	r0, r3
 8006a94:	f005 f840 	bl	800bb18 <strcat>
	strcat(str1, str7);
 8006a98:	1d3a      	adds	r2, r7, #4
 8006a9a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f005 f839 	bl	800bb18 <strcat>
	strcat(str1, "#");
 8006aa6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7f9 fb90 	bl	80001d0 <strlen>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006ab8:	4413      	add	r3, r2
 8006aba:	490f      	ldr	r1, [pc, #60]	; (8006af8 <uartSendSensor+0x154>)
 8006abc:	461a      	mov	r2, r3
 8006abe:	460b      	mov	r3, r1
 8006ac0:	881b      	ldrh	r3, [r3, #0]
 8006ac2:	8013      	strh	r3, [r2, #0]
	uart_EspSendBytes(str1, strlen(str1));
 8006ac4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7f9 fb81 	bl	80001d0 <strlen>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8006ad6:	4611      	mov	r1, r2
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7ff fe57 	bl	800678c <uart_EspSendBytes>
}
 8006ade:	bf00      	nop
 8006ae0:	37e8      	adds	r7, #232	; 0xe8
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	0800d39c 	.word	0x0800d39c
 8006aec:	0800d3d0 	.word	0x0800d3d0
 8006af0:	0800d40c 	.word	0x0800d40c
 8006af4:	0800d440 	.word	0x0800d440
 8006af8:	0800d250 	.word	0x0800d250

08006afc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006b00:	4b11      	ldr	r3, [pc, #68]	; (8006b48 <MX_USART2_UART_Init+0x4c>)
 8006b02:	4a12      	ldr	r2, [pc, #72]	; (8006b4c <MX_USART2_UART_Init+0x50>)
 8006b04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006b06:	4b10      	ldr	r3, [pc, #64]	; (8006b48 <MX_USART2_UART_Init+0x4c>)
 8006b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006b0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006b0e:	4b0e      	ldr	r3, [pc, #56]	; (8006b48 <MX_USART2_UART_Init+0x4c>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006b14:	4b0c      	ldr	r3, [pc, #48]	; (8006b48 <MX_USART2_UART_Init+0x4c>)
 8006b16:	2200      	movs	r2, #0
 8006b18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006b1a:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <MX_USART2_UART_Init+0x4c>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006b20:	4b09      	ldr	r3, [pc, #36]	; (8006b48 <MX_USART2_UART_Init+0x4c>)
 8006b22:	220c      	movs	r2, #12
 8006b24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b26:	4b08      	ldr	r3, [pc, #32]	; (8006b48 <MX_USART2_UART_Init+0x4c>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b2c:	4b06      	ldr	r3, [pc, #24]	; (8006b48 <MX_USART2_UART_Init+0x4c>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006b32:	4805      	ldr	r0, [pc, #20]	; (8006b48 <MX_USART2_UART_Init+0x4c>)
 8006b34:	f003 fdce 	bl	800a6d4 <HAL_UART_Init>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006b3e:	f7fb ffef 	bl	8002b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006b42:	bf00      	nop
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	20002b18 	.word	0x20002b18
 8006b4c:	40004400 	.word	0x40004400

08006b50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b08a      	sub	sp, #40	; 0x28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b58:	f107 0314 	add.w	r3, r7, #20
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	605a      	str	r2, [r3, #4]
 8006b62:	609a      	str	r2, [r3, #8]
 8006b64:	60da      	str	r2, [r3, #12]
 8006b66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a1d      	ldr	r2, [pc, #116]	; (8006be4 <HAL_UART_MspInit+0x94>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d133      	bne.n	8006bda <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006b72:	2300      	movs	r3, #0
 8006b74:	613b      	str	r3, [r7, #16]
 8006b76:	4b1c      	ldr	r3, [pc, #112]	; (8006be8 <HAL_UART_MspInit+0x98>)
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	4a1b      	ldr	r2, [pc, #108]	; (8006be8 <HAL_UART_MspInit+0x98>)
 8006b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b80:	6413      	str	r3, [r2, #64]	; 0x40
 8006b82:	4b19      	ldr	r3, [pc, #100]	; (8006be8 <HAL_UART_MspInit+0x98>)
 8006b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b8a:	613b      	str	r3, [r7, #16]
 8006b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60fb      	str	r3, [r7, #12]
 8006b92:	4b15      	ldr	r3, [pc, #84]	; (8006be8 <HAL_UART_MspInit+0x98>)
 8006b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b96:	4a14      	ldr	r2, [pc, #80]	; (8006be8 <HAL_UART_MspInit+0x98>)
 8006b98:	f043 0301 	orr.w	r3, r3, #1
 8006b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b9e:	4b12      	ldr	r3, [pc, #72]	; (8006be8 <HAL_UART_MspInit+0x98>)
 8006ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006baa:	230c      	movs	r3, #12
 8006bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bae:	2302      	movs	r3, #2
 8006bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006bba:	2307      	movs	r3, #7
 8006bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bbe:	f107 0314 	add.w	r3, r7, #20
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4809      	ldr	r0, [pc, #36]	; (8006bec <HAL_UART_MspInit+0x9c>)
 8006bc6:	f001 f9f9 	bl	8007fbc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006bca:	2200      	movs	r2, #0
 8006bcc:	2100      	movs	r1, #0
 8006bce:	2026      	movs	r0, #38	; 0x26
 8006bd0:	f000 fdbb 	bl	800774a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006bd4:	2026      	movs	r0, #38	; 0x26
 8006bd6:	f000 fdd4 	bl	8007782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006bda:	bf00      	nop
 8006bdc:	3728      	adds	r7, #40	; 0x28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	40004400 	.word	0x40004400
 8006be8:	40023800 	.word	0x40023800
 8006bec:	40020000 	.word	0x40020000

08006bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006c28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006bf4:	480d      	ldr	r0, [pc, #52]	; (8006c2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006bf6:	490e      	ldr	r1, [pc, #56]	; (8006c30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006bf8:	4a0e      	ldr	r2, [pc, #56]	; (8006c34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006bfc:	e002      	b.n	8006c04 <LoopCopyDataInit>

08006bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006c02:	3304      	adds	r3, #4

08006c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006c08:	d3f9      	bcc.n	8006bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006c0a:	4a0b      	ldr	r2, [pc, #44]	; (8006c38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006c0c:	4c0b      	ldr	r4, [pc, #44]	; (8006c3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8006c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006c10:	e001      	b.n	8006c16 <LoopFillZerobss>

08006c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006c14:	3204      	adds	r2, #4

08006c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006c18:	d3fb      	bcc.n	8006c12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006c1a:	f7ff fafd 	bl	8006218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006c1e:	f004 feaf 	bl	800b980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006c22:	f7fb fe09 	bl	8002838 <main>
  bx  lr    
 8006c26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006c28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006c30:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8006c34:	0801119c 	.word	0x0801119c
  ldr r2, =_sbss
 8006c38:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8006c3c:	20002b70 	.word	0x20002b70

08006c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006c40:	e7fe      	b.n	8006c40 <ADC_IRQHandler>
	...

08006c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006c48:	4b0e      	ldr	r3, [pc, #56]	; (8006c84 <HAL_Init+0x40>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a0d      	ldr	r2, [pc, #52]	; (8006c84 <HAL_Init+0x40>)
 8006c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006c54:	4b0b      	ldr	r3, [pc, #44]	; (8006c84 <HAL_Init+0x40>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a0a      	ldr	r2, [pc, #40]	; (8006c84 <HAL_Init+0x40>)
 8006c5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006c60:	4b08      	ldr	r3, [pc, #32]	; (8006c84 <HAL_Init+0x40>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a07      	ldr	r2, [pc, #28]	; (8006c84 <HAL_Init+0x40>)
 8006c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c6c:	2003      	movs	r0, #3
 8006c6e:	f000 fd61 	bl	8007734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006c72:	200f      	movs	r0, #15
 8006c74:	f000 f808 	bl	8006c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006c78:	f7fe ff6e 	bl	8005b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	40023c00 	.word	0x40023c00

08006c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006c90:	4b12      	ldr	r3, [pc, #72]	; (8006cdc <HAL_InitTick+0x54>)
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	4b12      	ldr	r3, [pc, #72]	; (8006ce0 <HAL_InitTick+0x58>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	4619      	mov	r1, r3
 8006c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 fd79 	bl	800779e <HAL_SYSTICK_Config>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e00e      	b.n	8006cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2b0f      	cmp	r3, #15
 8006cba:	d80a      	bhi.n	8006cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	6879      	ldr	r1, [r7, #4]
 8006cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc4:	f000 fd41 	bl	800774a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006cc8:	4a06      	ldr	r2, [pc, #24]	; (8006ce4 <HAL_InitTick+0x5c>)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	e000      	b.n	8006cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	200000a0 	.word	0x200000a0
 8006ce0:	200000a8 	.word	0x200000a8
 8006ce4:	200000a4 	.word	0x200000a4

08006ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006cec:	4b06      	ldr	r3, [pc, #24]	; (8006d08 <HAL_IncTick+0x20>)
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	4b06      	ldr	r3, [pc, #24]	; (8006d0c <HAL_IncTick+0x24>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	4a04      	ldr	r2, [pc, #16]	; (8006d0c <HAL_IncTick+0x24>)
 8006cfa:	6013      	str	r3, [r2, #0]
}
 8006cfc:	bf00      	nop
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	200000a8 	.word	0x200000a8
 8006d0c:	20002b5c 	.word	0x20002b5c

08006d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d10:	b480      	push	{r7}
 8006d12:	af00      	add	r7, sp, #0
  return uwTick;
 8006d14:	4b03      	ldr	r3, [pc, #12]	; (8006d24 <HAL_GetTick+0x14>)
 8006d16:	681b      	ldr	r3, [r3, #0]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	20002b5c 	.word	0x20002b5c

08006d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d30:	f7ff ffee 	bl	8006d10 <HAL_GetTick>
 8006d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d40:	d005      	beq.n	8006d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d42:	4b0a      	ldr	r3, [pc, #40]	; (8006d6c <HAL_Delay+0x44>)
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	461a      	mov	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006d4e:	bf00      	nop
 8006d50:	f7ff ffde 	bl	8006d10 <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d8f7      	bhi.n	8006d50 <HAL_Delay+0x28>
  {
  }
}
 8006d60:	bf00      	nop
 8006d62:	bf00      	nop
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	200000a8 	.word	0x200000a8

08006d70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e033      	b.n	8006dee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d109      	bne.n	8006da2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7f9 fc82 	bl	8000698 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	f003 0310 	and.w	r3, r3, #16
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d118      	bne.n	8006de0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006db6:	f023 0302 	bic.w	r3, r3, #2
 8006dba:	f043 0202 	orr.w	r2, r3, #2
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fa68 	bl	8007298 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd2:	f023 0303 	bic.w	r3, r3, #3
 8006dd6:	f043 0201 	orr.w	r2, r3, #1
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	641a      	str	r2, [r3, #64]	; 0x40
 8006dde:	e001      	b.n	8006de4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
	...

08006df8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d101      	bne.n	8006e16 <HAL_ADC_Start_DMA+0x1e>
 8006e12:	2302      	movs	r3, #2
 8006e14:	e0e9      	b.n	8006fea <HAL_ADC_Start_DMA+0x1f2>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d018      	beq.n	8006e5e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	689a      	ldr	r2, [r3, #8]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f042 0201 	orr.w	r2, r2, #1
 8006e3a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006e3c:	4b6d      	ldr	r3, [pc, #436]	; (8006ff4 <HAL_ADC_Start_DMA+0x1fc>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a6d      	ldr	r2, [pc, #436]	; (8006ff8 <HAL_ADC_Start_DMA+0x200>)
 8006e42:	fba2 2303 	umull	r2, r3, r2, r3
 8006e46:	0c9a      	lsrs	r2, r3, #18
 8006e48:	4613      	mov	r3, r2
 8006e4a:	005b      	lsls	r3, r3, #1
 8006e4c:	4413      	add	r3, r2
 8006e4e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006e50:	e002      	b.n	8006e58 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	3b01      	subs	r3, #1
 8006e56:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1f9      	bne.n	8006e52 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e6c:	d107      	bne.n	8006e7e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689a      	ldr	r2, [r3, #8]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	f040 80a1 	bne.w	8006fd0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006e96:	f023 0301 	bic.w	r3, r3, #1
 8006e9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d007      	beq.n	8006ec0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006eb8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ecc:	d106      	bne.n	8006edc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed2:	f023 0206 	bic.w	r2, r3, #6
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	645a      	str	r2, [r3, #68]	; 0x44
 8006eda:	e002      	b.n	8006ee2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006eea:	4b44      	ldr	r3, [pc, #272]	; (8006ffc <HAL_ADC_Start_DMA+0x204>)
 8006eec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef2:	4a43      	ldr	r2, [pc, #268]	; (8007000 <HAL_ADC_Start_DMA+0x208>)
 8006ef4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efa:	4a42      	ldr	r2, [pc, #264]	; (8007004 <HAL_ADC_Start_DMA+0x20c>)
 8006efc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f02:	4a41      	ldr	r2, [pc, #260]	; (8007008 <HAL_ADC_Start_DMA+0x210>)
 8006f04:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006f0e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006f1e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689a      	ldr	r2, [r3, #8]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f2e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	334c      	adds	r3, #76	; 0x4c
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f000 fce8 	bl	8007914 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f003 031f 	and.w	r3, r3, #31
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d12a      	bne.n	8006fa6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a2d      	ldr	r2, [pc, #180]	; (800700c <HAL_ADC_Start_DMA+0x214>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d015      	beq.n	8006f86 <HAL_ADC_Start_DMA+0x18e>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a2c      	ldr	r2, [pc, #176]	; (8007010 <HAL_ADC_Start_DMA+0x218>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d105      	bne.n	8006f70 <HAL_ADC_Start_DMA+0x178>
 8006f64:	4b25      	ldr	r3, [pc, #148]	; (8006ffc <HAL_ADC_Start_DMA+0x204>)
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f003 031f 	and.w	r3, r3, #31
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00a      	beq.n	8006f86 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a27      	ldr	r2, [pc, #156]	; (8007014 <HAL_ADC_Start_DMA+0x21c>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d136      	bne.n	8006fe8 <HAL_ADC_Start_DMA+0x1f0>
 8006f7a:	4b20      	ldr	r3, [pc, #128]	; (8006ffc <HAL_ADC_Start_DMA+0x204>)
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f003 0310 	and.w	r3, r3, #16
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d130      	bne.n	8006fe8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d129      	bne.n	8006fe8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689a      	ldr	r2, [r3, #8]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006fa2:	609a      	str	r2, [r3, #8]
 8006fa4:	e020      	b.n	8006fe8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a18      	ldr	r2, [pc, #96]	; (800700c <HAL_ADC_Start_DMA+0x214>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d11b      	bne.n	8006fe8 <HAL_ADC_Start_DMA+0x1f0>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d114      	bne.n	8006fe8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689a      	ldr	r2, [r3, #8]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006fcc:	609a      	str	r2, [r3, #8]
 8006fce:	e00b      	b.n	8006fe8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd4:	f043 0210 	orr.w	r2, r3, #16
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe0:	f043 0201 	orr.w	r2, r3, #1
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3718      	adds	r7, #24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	200000a0 	.word	0x200000a0
 8006ff8:	431bde83 	.word	0x431bde83
 8006ffc:	40012300 	.word	0x40012300
 8007000:	08007491 	.word	0x08007491
 8007004:	0800754b 	.word	0x0800754b
 8007008:	08007567 	.word	0x08007567
 800700c:	40012000 	.word	0x40012000
 8007010:	40012100 	.word	0x40012100
 8007014:	40012200 	.word	0x40012200

08007018 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800705e:	2300      	movs	r3, #0
 8007060:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007068:	2b01      	cmp	r3, #1
 800706a:	d101      	bne.n	8007070 <HAL_ADC_ConfigChannel+0x1c>
 800706c:	2302      	movs	r3, #2
 800706e:	e105      	b.n	800727c <HAL_ADC_ConfigChannel+0x228>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b09      	cmp	r3, #9
 800707e:	d925      	bls.n	80070cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68d9      	ldr	r1, [r3, #12]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	b29b      	uxth	r3, r3
 800708c:	461a      	mov	r2, r3
 800708e:	4613      	mov	r3, r2
 8007090:	005b      	lsls	r3, r3, #1
 8007092:	4413      	add	r3, r2
 8007094:	3b1e      	subs	r3, #30
 8007096:	2207      	movs	r2, #7
 8007098:	fa02 f303 	lsl.w	r3, r2, r3
 800709c:	43da      	mvns	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	400a      	ands	r2, r1
 80070a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68d9      	ldr	r1, [r3, #12]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	689a      	ldr	r2, [r3, #8]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	4618      	mov	r0, r3
 80070b8:	4603      	mov	r3, r0
 80070ba:	005b      	lsls	r3, r3, #1
 80070bc:	4403      	add	r3, r0
 80070be:	3b1e      	subs	r3, #30
 80070c0:	409a      	lsls	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	430a      	orrs	r2, r1
 80070c8:	60da      	str	r2, [r3, #12]
 80070ca:	e022      	b.n	8007112 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6919      	ldr	r1, [r3, #16]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	461a      	mov	r2, r3
 80070da:	4613      	mov	r3, r2
 80070dc:	005b      	lsls	r3, r3, #1
 80070de:	4413      	add	r3, r2
 80070e0:	2207      	movs	r2, #7
 80070e2:	fa02 f303 	lsl.w	r3, r2, r3
 80070e6:	43da      	mvns	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	400a      	ands	r2, r1
 80070ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6919      	ldr	r1, [r3, #16]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	689a      	ldr	r2, [r3, #8]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	b29b      	uxth	r3, r3
 8007100:	4618      	mov	r0, r3
 8007102:	4603      	mov	r3, r0
 8007104:	005b      	lsls	r3, r3, #1
 8007106:	4403      	add	r3, r0
 8007108:	409a      	lsls	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	2b06      	cmp	r3, #6
 8007118:	d824      	bhi.n	8007164 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	4613      	mov	r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	4413      	add	r3, r2
 800712a:	3b05      	subs	r3, #5
 800712c:	221f      	movs	r2, #31
 800712e:	fa02 f303 	lsl.w	r3, r2, r3
 8007132:	43da      	mvns	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	400a      	ands	r2, r1
 800713a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	b29b      	uxth	r3, r3
 8007148:	4618      	mov	r0, r3
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	685a      	ldr	r2, [r3, #4]
 800714e:	4613      	mov	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	3b05      	subs	r3, #5
 8007156:	fa00 f203 	lsl.w	r2, r0, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	430a      	orrs	r2, r1
 8007160:	635a      	str	r2, [r3, #52]	; 0x34
 8007162:	e04c      	b.n	80071fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	2b0c      	cmp	r3, #12
 800716a:	d824      	bhi.n	80071b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	4613      	mov	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4413      	add	r3, r2
 800717c:	3b23      	subs	r3, #35	; 0x23
 800717e:	221f      	movs	r2, #31
 8007180:	fa02 f303 	lsl.w	r3, r2, r3
 8007184:	43da      	mvns	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	400a      	ands	r2, r1
 800718c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	b29b      	uxth	r3, r3
 800719a:	4618      	mov	r0, r3
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	4613      	mov	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	3b23      	subs	r3, #35	; 0x23
 80071a8:	fa00 f203 	lsl.w	r2, r0, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	631a      	str	r2, [r3, #48]	; 0x30
 80071b4:	e023      	b.n	80071fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	4613      	mov	r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	3b41      	subs	r3, #65	; 0x41
 80071c8:	221f      	movs	r2, #31
 80071ca:	fa02 f303 	lsl.w	r3, r2, r3
 80071ce:	43da      	mvns	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	400a      	ands	r2, r1
 80071d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	4618      	mov	r0, r3
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	685a      	ldr	r2, [r3, #4]
 80071ea:	4613      	mov	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4413      	add	r3, r2
 80071f0:	3b41      	subs	r3, #65	; 0x41
 80071f2:	fa00 f203 	lsl.w	r2, r0, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80071fe:	4b22      	ldr	r3, [pc, #136]	; (8007288 <HAL_ADC_ConfigChannel+0x234>)
 8007200:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a21      	ldr	r2, [pc, #132]	; (800728c <HAL_ADC_ConfigChannel+0x238>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d109      	bne.n	8007220 <HAL_ADC_ConfigChannel+0x1cc>
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2b12      	cmp	r3, #18
 8007212:	d105      	bne.n	8007220 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a19      	ldr	r2, [pc, #100]	; (800728c <HAL_ADC_ConfigChannel+0x238>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d123      	bne.n	8007272 <HAL_ADC_ConfigChannel+0x21e>
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b10      	cmp	r3, #16
 8007230:	d003      	beq.n	800723a <HAL_ADC_ConfigChannel+0x1e6>
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b11      	cmp	r3, #17
 8007238:	d11b      	bne.n	8007272 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b10      	cmp	r3, #16
 800724c:	d111      	bne.n	8007272 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800724e:	4b10      	ldr	r3, [pc, #64]	; (8007290 <HAL_ADC_ConfigChannel+0x23c>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a10      	ldr	r2, [pc, #64]	; (8007294 <HAL_ADC_ConfigChannel+0x240>)
 8007254:	fba2 2303 	umull	r2, r3, r2, r3
 8007258:	0c9a      	lsrs	r2, r3, #18
 800725a:	4613      	mov	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	4413      	add	r3, r2
 8007260:	005b      	lsls	r3, r3, #1
 8007262:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007264:	e002      	b.n	800726c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	3b01      	subs	r3, #1
 800726a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1f9      	bne.n	8007266 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr
 8007288:	40012300 	.word	0x40012300
 800728c:	40012000 	.word	0x40012000
 8007290:	200000a0 	.word	0x200000a0
 8007294:	431bde83 	.word	0x431bde83

08007298 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80072a0:	4b79      	ldr	r3, [pc, #484]	; (8007488 <ADC_Init+0x1f0>)
 80072a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	431a      	orrs	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	685a      	ldr	r2, [r3, #4]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	6859      	ldr	r1, [r3, #4]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	021a      	lsls	r2, r3, #8
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	430a      	orrs	r2, r1
 80072e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80072f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6859      	ldr	r1, [r3, #4]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689a      	ldr	r2, [r3, #8]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	430a      	orrs	r2, r1
 8007302:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689a      	ldr	r2, [r3, #8]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007312:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6899      	ldr	r1, [r3, #8]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	68da      	ldr	r2, [r3, #12]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	430a      	orrs	r2, r1
 8007324:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732a:	4a58      	ldr	r2, [pc, #352]	; (800748c <ADC_Init+0x1f4>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d022      	beq.n	8007376 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	689a      	ldr	r2, [r3, #8]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800733e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6899      	ldr	r1, [r3, #8]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689a      	ldr	r2, [r3, #8]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007360:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	6899      	ldr	r1, [r3, #8]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	609a      	str	r2, [r3, #8]
 8007374:	e00f      	b.n	8007396 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689a      	ldr	r2, [r3, #8]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007384:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007394:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f022 0202 	bic.w	r2, r2, #2
 80073a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6899      	ldr	r1, [r3, #8]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	7e1b      	ldrb	r3, [r3, #24]
 80073b0:	005a      	lsls	r2, r3, #1
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	430a      	orrs	r2, r1
 80073b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d01b      	beq.n	80073fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685a      	ldr	r2, [r3, #4]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685a      	ldr	r2, [r3, #4]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80073e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6859      	ldr	r1, [r3, #4]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ee:	3b01      	subs	r3, #1
 80073f0:	035a      	lsls	r2, r3, #13
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	605a      	str	r2, [r3, #4]
 80073fa:	e007      	b.n	800740c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	685a      	ldr	r2, [r3, #4]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800740a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800741a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	3b01      	subs	r3, #1
 8007428:	051a      	lsls	r2, r3, #20
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	430a      	orrs	r2, r1
 8007430:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007440:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6899      	ldr	r1, [r3, #8]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800744e:	025a      	lsls	r2, r3, #9
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	430a      	orrs	r2, r1
 8007456:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689a      	ldr	r2, [r3, #8]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007466:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6899      	ldr	r1, [r3, #8]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	029a      	lsls	r2, r3, #10
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	430a      	orrs	r2, r1
 800747a:	609a      	str	r2, [r3, #8]
}
 800747c:	bf00      	nop
 800747e:	3714      	adds	r7, #20
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	40012300 	.word	0x40012300
 800748c:	0f000001 	.word	0x0f000001

08007490 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d13c      	bne.n	8007524 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d12b      	bne.n	800751c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d127      	bne.n	800751c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d006      	beq.n	80074e8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d119      	bne.n	800751c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f022 0220 	bic.w	r2, r2, #32
 80074f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d105      	bne.n	800751c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007514:	f043 0201 	orr.w	r2, r3, #1
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f7ff fd7b 	bl	8007018 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007522:	e00e      	b.n	8007542 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007528:	f003 0310 	and.w	r3, r3, #16
 800752c:	2b00      	cmp	r3, #0
 800752e:	d003      	beq.n	8007538 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f7ff fd85 	bl	8007040 <HAL_ADC_ErrorCallback>
}
 8007536:	e004      	b.n	8007542 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	4798      	blx	r3
}
 8007542:	bf00      	nop
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b084      	sub	sp, #16
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007556:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f7ff fd67 	bl	800702c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800755e:	bf00      	nop
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b084      	sub	sp, #16
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007572:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2240      	movs	r2, #64	; 0x40
 8007578:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800757e:	f043 0204 	orr.w	r2, r3, #4
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f7ff fd5a 	bl	8007040 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800758c:	bf00      	nop
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f003 0307 	and.w	r3, r3, #7
 80075a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80075a4:	4b0c      	ldr	r3, [pc, #48]	; (80075d8 <__NVIC_SetPriorityGrouping+0x44>)
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80075aa:	68ba      	ldr	r2, [r7, #8]
 80075ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80075b0:	4013      	ands	r3, r2
 80075b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80075bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80075c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80075c6:	4a04      	ldr	r2, [pc, #16]	; (80075d8 <__NVIC_SetPriorityGrouping+0x44>)
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	60d3      	str	r3, [r2, #12]
}
 80075cc:	bf00      	nop
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	e000ed00 	.word	0xe000ed00

080075dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80075dc:	b480      	push	{r7}
 80075de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80075e0:	4b04      	ldr	r3, [pc, #16]	; (80075f4 <__NVIC_GetPriorityGrouping+0x18>)
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	0a1b      	lsrs	r3, r3, #8
 80075e6:	f003 0307 	and.w	r3, r3, #7
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr
 80075f4:	e000ed00 	.word	0xe000ed00

080075f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	4603      	mov	r3, r0
 8007600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007606:	2b00      	cmp	r3, #0
 8007608:	db0b      	blt.n	8007622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800760a:	79fb      	ldrb	r3, [r7, #7]
 800760c:	f003 021f 	and.w	r2, r3, #31
 8007610:	4907      	ldr	r1, [pc, #28]	; (8007630 <__NVIC_EnableIRQ+0x38>)
 8007612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007616:	095b      	lsrs	r3, r3, #5
 8007618:	2001      	movs	r0, #1
 800761a:	fa00 f202 	lsl.w	r2, r0, r2
 800761e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007622:	bf00      	nop
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	e000e100 	.word	0xe000e100

08007634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	4603      	mov	r3, r0
 800763c:	6039      	str	r1, [r7, #0]
 800763e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007644:	2b00      	cmp	r3, #0
 8007646:	db0a      	blt.n	800765e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	b2da      	uxtb	r2, r3
 800764c:	490c      	ldr	r1, [pc, #48]	; (8007680 <__NVIC_SetPriority+0x4c>)
 800764e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007652:	0112      	lsls	r2, r2, #4
 8007654:	b2d2      	uxtb	r2, r2
 8007656:	440b      	add	r3, r1
 8007658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800765c:	e00a      	b.n	8007674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	b2da      	uxtb	r2, r3
 8007662:	4908      	ldr	r1, [pc, #32]	; (8007684 <__NVIC_SetPriority+0x50>)
 8007664:	79fb      	ldrb	r3, [r7, #7]
 8007666:	f003 030f 	and.w	r3, r3, #15
 800766a:	3b04      	subs	r3, #4
 800766c:	0112      	lsls	r2, r2, #4
 800766e:	b2d2      	uxtb	r2, r2
 8007670:	440b      	add	r3, r1
 8007672:	761a      	strb	r2, [r3, #24]
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	e000e100 	.word	0xe000e100
 8007684:	e000ed00 	.word	0xe000ed00

08007688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007688:	b480      	push	{r7}
 800768a:	b089      	sub	sp, #36	; 0x24
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f003 0307 	and.w	r3, r3, #7
 800769a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	f1c3 0307 	rsb	r3, r3, #7
 80076a2:	2b04      	cmp	r3, #4
 80076a4:	bf28      	it	cs
 80076a6:	2304      	movcs	r3, #4
 80076a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	3304      	adds	r3, #4
 80076ae:	2b06      	cmp	r3, #6
 80076b0:	d902      	bls.n	80076b8 <NVIC_EncodePriority+0x30>
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	3b03      	subs	r3, #3
 80076b6:	e000      	b.n	80076ba <NVIC_EncodePriority+0x32>
 80076b8:	2300      	movs	r3, #0
 80076ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076bc:	f04f 32ff 	mov.w	r2, #4294967295
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	fa02 f303 	lsl.w	r3, r2, r3
 80076c6:	43da      	mvns	r2, r3
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	401a      	ands	r2, r3
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80076d0:	f04f 31ff 	mov.w	r1, #4294967295
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	fa01 f303 	lsl.w	r3, r1, r3
 80076da:	43d9      	mvns	r1, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076e0:	4313      	orrs	r3, r2
         );
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3724      	adds	r7, #36	; 0x24
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
	...

080076f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	3b01      	subs	r3, #1
 80076fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007700:	d301      	bcc.n	8007706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007702:	2301      	movs	r3, #1
 8007704:	e00f      	b.n	8007726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007706:	4a0a      	ldr	r2, [pc, #40]	; (8007730 <SysTick_Config+0x40>)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	3b01      	subs	r3, #1
 800770c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800770e:	210f      	movs	r1, #15
 8007710:	f04f 30ff 	mov.w	r0, #4294967295
 8007714:	f7ff ff8e 	bl	8007634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007718:	4b05      	ldr	r3, [pc, #20]	; (8007730 <SysTick_Config+0x40>)
 800771a:	2200      	movs	r2, #0
 800771c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800771e:	4b04      	ldr	r3, [pc, #16]	; (8007730 <SysTick_Config+0x40>)
 8007720:	2207      	movs	r2, #7
 8007722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	e000e010 	.word	0xe000e010

08007734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f7ff ff29 	bl	8007594 <__NVIC_SetPriorityGrouping>
}
 8007742:	bf00      	nop
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800774a:	b580      	push	{r7, lr}
 800774c:	b086      	sub	sp, #24
 800774e:	af00      	add	r7, sp, #0
 8007750:	4603      	mov	r3, r0
 8007752:	60b9      	str	r1, [r7, #8]
 8007754:	607a      	str	r2, [r7, #4]
 8007756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007758:	2300      	movs	r3, #0
 800775a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800775c:	f7ff ff3e 	bl	80075dc <__NVIC_GetPriorityGrouping>
 8007760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	68b9      	ldr	r1, [r7, #8]
 8007766:	6978      	ldr	r0, [r7, #20]
 8007768:	f7ff ff8e 	bl	8007688 <NVIC_EncodePriority>
 800776c:	4602      	mov	r2, r0
 800776e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007772:	4611      	mov	r1, r2
 8007774:	4618      	mov	r0, r3
 8007776:	f7ff ff5d 	bl	8007634 <__NVIC_SetPriority>
}
 800777a:	bf00      	nop
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b082      	sub	sp, #8
 8007786:	af00      	add	r7, sp, #0
 8007788:	4603      	mov	r3, r0
 800778a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800778c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007790:	4618      	mov	r0, r3
 8007792:	f7ff ff31 	bl	80075f8 <__NVIC_EnableIRQ>
}
 8007796:	bf00      	nop
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b082      	sub	sp, #8
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7ff ffa2 	bl	80076f0 <SysTick_Config>
 80077ac:	4603      	mov	r3, r0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
	...

080077b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80077c0:	2300      	movs	r3, #0
 80077c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80077c4:	f7ff faa4 	bl	8006d10 <HAL_GetTick>
 80077c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e099      	b.n	8007908 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2202      	movs	r2, #2
 80077d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f022 0201 	bic.w	r2, r2, #1
 80077f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80077f4:	e00f      	b.n	8007816 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80077f6:	f7ff fa8b 	bl	8006d10 <HAL_GetTick>
 80077fa:	4602      	mov	r2, r0
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	2b05      	cmp	r3, #5
 8007802:	d908      	bls.n	8007816 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2220      	movs	r2, #32
 8007808:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2203      	movs	r2, #3
 800780e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e078      	b.n	8007908 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0301 	and.w	r3, r3, #1
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1e8      	bne.n	80077f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800782c:	697a      	ldr	r2, [r7, #20]
 800782e:	4b38      	ldr	r3, [pc, #224]	; (8007910 <HAL_DMA_Init+0x158>)
 8007830:	4013      	ands	r3, r2
 8007832:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685a      	ldr	r2, [r3, #4]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007842:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800784e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800785a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a1b      	ldr	r3, [r3, #32]
 8007860:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	4313      	orrs	r3, r2
 8007866:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786c:	2b04      	cmp	r3, #4
 800786e:	d107      	bne.n	8007880 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007878:	4313      	orrs	r3, r2
 800787a:	697a      	ldr	r2, [r7, #20]
 800787c:	4313      	orrs	r3, r2
 800787e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	697a      	ldr	r2, [r7, #20]
 8007886:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	f023 0307 	bic.w	r3, r3, #7
 8007896:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	4313      	orrs	r3, r2
 80078a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a6:	2b04      	cmp	r3, #4
 80078a8:	d117      	bne.n	80078da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ae:	697a      	ldr	r2, [r7, #20]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00e      	beq.n	80078da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fb01 	bl	8007ec4 <DMA_CheckFifoParam>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d008      	beq.n	80078da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2240      	movs	r2, #64	; 0x40
 80078cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80078d6:	2301      	movs	r3, #1
 80078d8:	e016      	b.n	8007908 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	697a      	ldr	r2, [r7, #20]
 80078e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fab8 	bl	8007e58 <DMA_CalcBaseAndBitshift>
 80078e8:	4603      	mov	r3, r0
 80078ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078f0:	223f      	movs	r2, #63	; 0x3f
 80078f2:	409a      	lsls	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3718      	adds	r7, #24
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	f010803f 	.word	0xf010803f

08007914 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	607a      	str	r2, [r7, #4]
 8007920:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800792a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007932:	2b01      	cmp	r3, #1
 8007934:	d101      	bne.n	800793a <HAL_DMA_Start_IT+0x26>
 8007936:	2302      	movs	r3, #2
 8007938:	e040      	b.n	80079bc <HAL_DMA_Start_IT+0xa8>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b01      	cmp	r3, #1
 800794c:	d12f      	bne.n	80079ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2202      	movs	r2, #2
 8007952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	68b9      	ldr	r1, [r7, #8]
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f000 fa4a 	bl	8007dfc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800796c:	223f      	movs	r2, #63	; 0x3f
 800796e:	409a      	lsls	r2, r3
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f042 0216 	orr.w	r2, r2, #22
 8007982:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007988:	2b00      	cmp	r3, #0
 800798a:	d007      	beq.n	800799c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f042 0208 	orr.w	r2, r2, #8
 800799a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f042 0201 	orr.w	r2, r2, #1
 80079aa:	601a      	str	r2, [r3, #0]
 80079ac:	e005      	b.n	80079ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80079b6:	2302      	movs	r3, #2
 80079b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80079ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3718      	adds	r7, #24
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80079d2:	f7ff f99d 	bl	8006d10 <HAL_GetTick>
 80079d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d008      	beq.n	80079f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2280      	movs	r2, #128	; 0x80
 80079e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e052      	b.n	8007a9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f022 0216 	bic.w	r2, r2, #22
 8007a04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	695a      	ldr	r2, [r3, #20]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d103      	bne.n	8007a26 <HAL_DMA_Abort+0x62>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d007      	beq.n	8007a36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f022 0208 	bic.w	r2, r2, #8
 8007a34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f022 0201 	bic.w	r2, r2, #1
 8007a44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a46:	e013      	b.n	8007a70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007a48:	f7ff f962 	bl	8006d10 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	2b05      	cmp	r3, #5
 8007a54:	d90c      	bls.n	8007a70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2203      	movs	r2, #3
 8007a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e015      	b.n	8007a9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d1e4      	bne.n	8007a48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a82:	223f      	movs	r2, #63	; 0x3f
 8007a84:	409a      	lsls	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d004      	beq.n	8007ac2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2280      	movs	r2, #128	; 0x80
 8007abc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e00c      	b.n	8007adc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2205      	movs	r2, #5
 8007ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f022 0201 	bic.w	r2, r2, #1
 8007ad8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007af0:	2300      	movs	r3, #0
 8007af2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007af4:	4b8e      	ldr	r3, [pc, #568]	; (8007d30 <HAL_DMA_IRQHandler+0x248>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a8e      	ldr	r2, [pc, #568]	; (8007d34 <HAL_DMA_IRQHandler+0x24c>)
 8007afa:	fba2 2303 	umull	r2, r3, r2, r3
 8007afe:	0a9b      	lsrs	r3, r3, #10
 8007b00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b12:	2208      	movs	r2, #8
 8007b14:	409a      	lsls	r2, r3
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	4013      	ands	r3, r2
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d01a      	beq.n	8007b54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0304 	and.w	r3, r3, #4
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d013      	beq.n	8007b54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f022 0204 	bic.w	r2, r2, #4
 8007b3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b40:	2208      	movs	r2, #8
 8007b42:	409a      	lsls	r2, r3
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4c:	f043 0201 	orr.w	r2, r3, #1
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b58:	2201      	movs	r2, #1
 8007b5a:	409a      	lsls	r2, r3
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	4013      	ands	r3, r2
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d012      	beq.n	8007b8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00b      	beq.n	8007b8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b76:	2201      	movs	r2, #1
 8007b78:	409a      	lsls	r2, r3
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b82:	f043 0202 	orr.w	r2, r3, #2
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b8e:	2204      	movs	r2, #4
 8007b90:	409a      	lsls	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	4013      	ands	r3, r2
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d012      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 0302 	and.w	r3, r3, #2
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00b      	beq.n	8007bc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bac:	2204      	movs	r2, #4
 8007bae:	409a      	lsls	r2, r3
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb8:	f043 0204 	orr.w	r2, r3, #4
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bc4:	2210      	movs	r2, #16
 8007bc6:	409a      	lsls	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	4013      	ands	r3, r2
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d043      	beq.n	8007c58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0308 	and.w	r3, r3, #8
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d03c      	beq.n	8007c58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007be2:	2210      	movs	r2, #16
 8007be4:	409a      	lsls	r2, r3
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d018      	beq.n	8007c2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d108      	bne.n	8007c18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d024      	beq.n	8007c58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	4798      	blx	r3
 8007c16:	e01f      	b.n	8007c58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d01b      	beq.n	8007c58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	4798      	blx	r3
 8007c28:	e016      	b.n	8007c58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d107      	bne.n	8007c48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f022 0208 	bic.w	r2, r2, #8
 8007c46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d003      	beq.n	8007c58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c5c:	2220      	movs	r2, #32
 8007c5e:	409a      	lsls	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4013      	ands	r3, r2
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 808f 	beq.w	8007d88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 0310 	and.w	r3, r3, #16
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f000 8087 	beq.w	8007d88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c7e:	2220      	movs	r2, #32
 8007c80:	409a      	lsls	r2, r3
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b05      	cmp	r3, #5
 8007c90:	d136      	bne.n	8007d00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f022 0216 	bic.w	r2, r2, #22
 8007ca0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	695a      	ldr	r2, [r3, #20]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d103      	bne.n	8007cc2 <HAL_DMA_IRQHandler+0x1da>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d007      	beq.n	8007cd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f022 0208 	bic.w	r2, r2, #8
 8007cd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cd6:	223f      	movs	r2, #63	; 0x3f
 8007cd8:	409a      	lsls	r2, r3
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d07e      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	4798      	blx	r3
        }
        return;
 8007cfe:	e079      	b.n	8007df4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d01d      	beq.n	8007d4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10d      	bne.n	8007d38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d031      	beq.n	8007d88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	4798      	blx	r3
 8007d2c:	e02c      	b.n	8007d88 <HAL_DMA_IRQHandler+0x2a0>
 8007d2e:	bf00      	nop
 8007d30:	200000a0 	.word	0x200000a0
 8007d34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d023      	beq.n	8007d88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	4798      	blx	r3
 8007d48:	e01e      	b.n	8007d88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10f      	bne.n	8007d78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f022 0210 	bic.w	r2, r2, #16
 8007d66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d003      	beq.n	8007d88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d032      	beq.n	8007df6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d022      	beq.n	8007de2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2205      	movs	r2, #5
 8007da0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f022 0201 	bic.w	r2, r2, #1
 8007db2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	3301      	adds	r3, #1
 8007db8:	60bb      	str	r3, [r7, #8]
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d307      	bcc.n	8007dd0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 0301 	and.w	r3, r3, #1
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1f2      	bne.n	8007db4 <HAL_DMA_IRQHandler+0x2cc>
 8007dce:	e000      	b.n	8007dd2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007dd0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d005      	beq.n	8007df6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	4798      	blx	r3
 8007df2:	e000      	b.n	8007df6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007df4:	bf00      	nop
    }
  }
}
 8007df6:	3718      	adds	r7, #24
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
 8007e08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007e18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	2b40      	cmp	r3, #64	; 0x40
 8007e28:	d108      	bne.n	8007e3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007e3a:	e007      	b.n	8007e4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68ba      	ldr	r2, [r7, #8]
 8007e42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	60da      	str	r2, [r3, #12]
}
 8007e4c:	bf00      	nop
 8007e4e:	3714      	adds	r7, #20
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	3b10      	subs	r3, #16
 8007e68:	4a14      	ldr	r2, [pc, #80]	; (8007ebc <DMA_CalcBaseAndBitshift+0x64>)
 8007e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e6e:	091b      	lsrs	r3, r3, #4
 8007e70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007e72:	4a13      	ldr	r2, [pc, #76]	; (8007ec0 <DMA_CalcBaseAndBitshift+0x68>)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	4413      	add	r3, r2
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2b03      	cmp	r3, #3
 8007e84:	d909      	bls.n	8007e9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007e8e:	f023 0303 	bic.w	r3, r3, #3
 8007e92:	1d1a      	adds	r2, r3, #4
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	659a      	str	r2, [r3, #88]	; 0x58
 8007e98:	e007      	b.n	8007eaa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007ea2:	f023 0303 	bic.w	r3, r3, #3
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	aaaaaaab 	.word	0xaaaaaaab
 8007ec0:	0801103c 	.word	0x0801103c

08007ec4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d11f      	bne.n	8007f1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	2b03      	cmp	r3, #3
 8007ee2:	d856      	bhi.n	8007f92 <DMA_CheckFifoParam+0xce>
 8007ee4:	a201      	add	r2, pc, #4	; (adr r2, 8007eec <DMA_CheckFifoParam+0x28>)
 8007ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eea:	bf00      	nop
 8007eec:	08007efd 	.word	0x08007efd
 8007ef0:	08007f0f 	.word	0x08007f0f
 8007ef4:	08007efd 	.word	0x08007efd
 8007ef8:	08007f93 	.word	0x08007f93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d046      	beq.n	8007f96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f0c:	e043      	b.n	8007f96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007f16:	d140      	bne.n	8007f9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f1c:	e03d      	b.n	8007f9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f26:	d121      	bne.n	8007f6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	2b03      	cmp	r3, #3
 8007f2c:	d837      	bhi.n	8007f9e <DMA_CheckFifoParam+0xda>
 8007f2e:	a201      	add	r2, pc, #4	; (adr r2, 8007f34 <DMA_CheckFifoParam+0x70>)
 8007f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f34:	08007f45 	.word	0x08007f45
 8007f38:	08007f4b 	.word	0x08007f4b
 8007f3c:	08007f45 	.word	0x08007f45
 8007f40:	08007f5d 	.word	0x08007f5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	73fb      	strb	r3, [r7, #15]
      break;
 8007f48:	e030      	b.n	8007fac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d025      	beq.n	8007fa2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f5a:	e022      	b.n	8007fa2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007f64:	d11f      	bne.n	8007fa6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007f6a:	e01c      	b.n	8007fa6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d903      	bls.n	8007f7a <DMA_CheckFifoParam+0xb6>
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	2b03      	cmp	r3, #3
 8007f76:	d003      	beq.n	8007f80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007f78:	e018      	b.n	8007fac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f7e:	e015      	b.n	8007fac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00e      	beq.n	8007faa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f90:	e00b      	b.n	8007faa <DMA_CheckFifoParam+0xe6>
      break;
 8007f92:	bf00      	nop
 8007f94:	e00a      	b.n	8007fac <DMA_CheckFifoParam+0xe8>
      break;
 8007f96:	bf00      	nop
 8007f98:	e008      	b.n	8007fac <DMA_CheckFifoParam+0xe8>
      break;
 8007f9a:	bf00      	nop
 8007f9c:	e006      	b.n	8007fac <DMA_CheckFifoParam+0xe8>
      break;
 8007f9e:	bf00      	nop
 8007fa0:	e004      	b.n	8007fac <DMA_CheckFifoParam+0xe8>
      break;
 8007fa2:	bf00      	nop
 8007fa4:	e002      	b.n	8007fac <DMA_CheckFifoParam+0xe8>
      break;   
 8007fa6:	bf00      	nop
 8007fa8:	e000      	b.n	8007fac <DMA_CheckFifoParam+0xe8>
      break;
 8007faa:	bf00      	nop
    }
  } 
  
  return status; 
 8007fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3714      	adds	r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop

08007fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b089      	sub	sp, #36	; 0x24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	61fb      	str	r3, [r7, #28]
 8007fd6:	e16b      	b.n	80082b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007fd8:	2201      	movs	r2, #1
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	4013      	ands	r3, r2
 8007fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	f040 815a 	bne.w	80082aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	f003 0303 	and.w	r3, r3, #3
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d005      	beq.n	800800e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800800a:	2b02      	cmp	r3, #2
 800800c:	d130      	bne.n	8008070 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	005b      	lsls	r3, r3, #1
 8008018:	2203      	movs	r2, #3
 800801a:	fa02 f303 	lsl.w	r3, r2, r3
 800801e:	43db      	mvns	r3, r3
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	4013      	ands	r3, r2
 8008024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	68da      	ldr	r2, [r3, #12]
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	005b      	lsls	r3, r3, #1
 800802e:	fa02 f303 	lsl.w	r3, r2, r3
 8008032:	69ba      	ldr	r2, [r7, #24]
 8008034:	4313      	orrs	r3, r2
 8008036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	69ba      	ldr	r2, [r7, #24]
 800803c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008044:	2201      	movs	r2, #1
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	fa02 f303 	lsl.w	r3, r2, r3
 800804c:	43db      	mvns	r3, r3
 800804e:	69ba      	ldr	r2, [r7, #24]
 8008050:	4013      	ands	r3, r2
 8008052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	091b      	lsrs	r3, r3, #4
 800805a:	f003 0201 	and.w	r2, r3, #1
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	fa02 f303 	lsl.w	r3, r2, r3
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	4313      	orrs	r3, r2
 8008068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	69ba      	ldr	r2, [r7, #24]
 800806e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f003 0303 	and.w	r3, r3, #3
 8008078:	2b03      	cmp	r3, #3
 800807a:	d017      	beq.n	80080ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	005b      	lsls	r3, r3, #1
 8008086:	2203      	movs	r2, #3
 8008088:	fa02 f303 	lsl.w	r3, r2, r3
 800808c:	43db      	mvns	r3, r3
 800808e:	69ba      	ldr	r2, [r7, #24]
 8008090:	4013      	ands	r3, r2
 8008092:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	689a      	ldr	r2, [r3, #8]
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	005b      	lsls	r3, r3, #1
 800809c:	fa02 f303 	lsl.w	r3, r2, r3
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	f003 0303 	and.w	r3, r3, #3
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d123      	bne.n	8008100 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	08da      	lsrs	r2, r3, #3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	3208      	adds	r2, #8
 80080c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	f003 0307 	and.w	r3, r3, #7
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	220f      	movs	r2, #15
 80080d0:	fa02 f303 	lsl.w	r3, r2, r3
 80080d4:	43db      	mvns	r3, r3
 80080d6:	69ba      	ldr	r2, [r7, #24]
 80080d8:	4013      	ands	r3, r2
 80080da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	691a      	ldr	r2, [r3, #16]
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	f003 0307 	and.w	r3, r3, #7
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	fa02 f303 	lsl.w	r3, r2, r3
 80080ec:	69ba      	ldr	r2, [r7, #24]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	08da      	lsrs	r2, r3, #3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	3208      	adds	r2, #8
 80080fa:	69b9      	ldr	r1, [r7, #24]
 80080fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	005b      	lsls	r3, r3, #1
 800810a:	2203      	movs	r2, #3
 800810c:	fa02 f303 	lsl.w	r3, r2, r3
 8008110:	43db      	mvns	r3, r3
 8008112:	69ba      	ldr	r2, [r7, #24]
 8008114:	4013      	ands	r3, r2
 8008116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	f003 0203 	and.w	r2, r3, #3
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	005b      	lsls	r3, r3, #1
 8008124:	fa02 f303 	lsl.w	r3, r2, r3
 8008128:	69ba      	ldr	r2, [r7, #24]
 800812a:	4313      	orrs	r3, r2
 800812c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	69ba      	ldr	r2, [r7, #24]
 8008132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 80b4 	beq.w	80082aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008142:	2300      	movs	r3, #0
 8008144:	60fb      	str	r3, [r7, #12]
 8008146:	4b60      	ldr	r3, [pc, #384]	; (80082c8 <HAL_GPIO_Init+0x30c>)
 8008148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800814a:	4a5f      	ldr	r2, [pc, #380]	; (80082c8 <HAL_GPIO_Init+0x30c>)
 800814c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008150:	6453      	str	r3, [r2, #68]	; 0x44
 8008152:	4b5d      	ldr	r3, [pc, #372]	; (80082c8 <HAL_GPIO_Init+0x30c>)
 8008154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800815a:	60fb      	str	r3, [r7, #12]
 800815c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800815e:	4a5b      	ldr	r2, [pc, #364]	; (80082cc <HAL_GPIO_Init+0x310>)
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	089b      	lsrs	r3, r3, #2
 8008164:	3302      	adds	r3, #2
 8008166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800816a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	f003 0303 	and.w	r3, r3, #3
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	220f      	movs	r2, #15
 8008176:	fa02 f303 	lsl.w	r3, r2, r3
 800817a:	43db      	mvns	r3, r3
 800817c:	69ba      	ldr	r2, [r7, #24]
 800817e:	4013      	ands	r3, r2
 8008180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a52      	ldr	r2, [pc, #328]	; (80082d0 <HAL_GPIO_Init+0x314>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d02b      	beq.n	80081e2 <HAL_GPIO_Init+0x226>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a51      	ldr	r2, [pc, #324]	; (80082d4 <HAL_GPIO_Init+0x318>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d025      	beq.n	80081de <HAL_GPIO_Init+0x222>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a50      	ldr	r2, [pc, #320]	; (80082d8 <HAL_GPIO_Init+0x31c>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d01f      	beq.n	80081da <HAL_GPIO_Init+0x21e>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a4f      	ldr	r2, [pc, #316]	; (80082dc <HAL_GPIO_Init+0x320>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d019      	beq.n	80081d6 <HAL_GPIO_Init+0x21a>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a4e      	ldr	r2, [pc, #312]	; (80082e0 <HAL_GPIO_Init+0x324>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d013      	beq.n	80081d2 <HAL_GPIO_Init+0x216>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a4d      	ldr	r2, [pc, #308]	; (80082e4 <HAL_GPIO_Init+0x328>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d00d      	beq.n	80081ce <HAL_GPIO_Init+0x212>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a4c      	ldr	r2, [pc, #304]	; (80082e8 <HAL_GPIO_Init+0x32c>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d007      	beq.n	80081ca <HAL_GPIO_Init+0x20e>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a4b      	ldr	r2, [pc, #300]	; (80082ec <HAL_GPIO_Init+0x330>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d101      	bne.n	80081c6 <HAL_GPIO_Init+0x20a>
 80081c2:	2307      	movs	r3, #7
 80081c4:	e00e      	b.n	80081e4 <HAL_GPIO_Init+0x228>
 80081c6:	2308      	movs	r3, #8
 80081c8:	e00c      	b.n	80081e4 <HAL_GPIO_Init+0x228>
 80081ca:	2306      	movs	r3, #6
 80081cc:	e00a      	b.n	80081e4 <HAL_GPIO_Init+0x228>
 80081ce:	2305      	movs	r3, #5
 80081d0:	e008      	b.n	80081e4 <HAL_GPIO_Init+0x228>
 80081d2:	2304      	movs	r3, #4
 80081d4:	e006      	b.n	80081e4 <HAL_GPIO_Init+0x228>
 80081d6:	2303      	movs	r3, #3
 80081d8:	e004      	b.n	80081e4 <HAL_GPIO_Init+0x228>
 80081da:	2302      	movs	r3, #2
 80081dc:	e002      	b.n	80081e4 <HAL_GPIO_Init+0x228>
 80081de:	2301      	movs	r3, #1
 80081e0:	e000      	b.n	80081e4 <HAL_GPIO_Init+0x228>
 80081e2:	2300      	movs	r3, #0
 80081e4:	69fa      	ldr	r2, [r7, #28]
 80081e6:	f002 0203 	and.w	r2, r2, #3
 80081ea:	0092      	lsls	r2, r2, #2
 80081ec:	4093      	lsls	r3, r2
 80081ee:	69ba      	ldr	r2, [r7, #24]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80081f4:	4935      	ldr	r1, [pc, #212]	; (80082cc <HAL_GPIO_Init+0x310>)
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	089b      	lsrs	r3, r3, #2
 80081fa:	3302      	adds	r3, #2
 80081fc:	69ba      	ldr	r2, [r7, #24]
 80081fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008202:	4b3b      	ldr	r3, [pc, #236]	; (80082f0 <HAL_GPIO_Init+0x334>)
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	43db      	mvns	r3, r3
 800820c:	69ba      	ldr	r2, [r7, #24]
 800820e:	4013      	ands	r3, r2
 8008210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d003      	beq.n	8008226 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800821e:	69ba      	ldr	r2, [r7, #24]
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	4313      	orrs	r3, r2
 8008224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008226:	4a32      	ldr	r2, [pc, #200]	; (80082f0 <HAL_GPIO_Init+0x334>)
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800822c:	4b30      	ldr	r3, [pc, #192]	; (80082f0 <HAL_GPIO_Init+0x334>)
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	43db      	mvns	r3, r3
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	4013      	ands	r3, r2
 800823a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d003      	beq.n	8008250 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008248:	69ba      	ldr	r2, [r7, #24]
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	4313      	orrs	r3, r2
 800824e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008250:	4a27      	ldr	r2, [pc, #156]	; (80082f0 <HAL_GPIO_Init+0x334>)
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008256:	4b26      	ldr	r3, [pc, #152]	; (80082f0 <HAL_GPIO_Init+0x334>)
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	43db      	mvns	r3, r3
 8008260:	69ba      	ldr	r2, [r7, #24]
 8008262:	4013      	ands	r3, r2
 8008264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800826e:	2b00      	cmp	r3, #0
 8008270:	d003      	beq.n	800827a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008272:	69ba      	ldr	r2, [r7, #24]
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	4313      	orrs	r3, r2
 8008278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800827a:	4a1d      	ldr	r2, [pc, #116]	; (80082f0 <HAL_GPIO_Init+0x334>)
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008280:	4b1b      	ldr	r3, [pc, #108]	; (80082f0 <HAL_GPIO_Init+0x334>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	43db      	mvns	r3, r3
 800828a:	69ba      	ldr	r2, [r7, #24]
 800828c:	4013      	ands	r3, r2
 800828e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008298:	2b00      	cmp	r3, #0
 800829a:	d003      	beq.n	80082a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800829c:	69ba      	ldr	r2, [r7, #24]
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80082a4:	4a12      	ldr	r2, [pc, #72]	; (80082f0 <HAL_GPIO_Init+0x334>)
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	3301      	adds	r3, #1
 80082ae:	61fb      	str	r3, [r7, #28]
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	2b0f      	cmp	r3, #15
 80082b4:	f67f ae90 	bls.w	8007fd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80082b8:	bf00      	nop
 80082ba:	bf00      	nop
 80082bc:	3724      	adds	r7, #36	; 0x24
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	40023800 	.word	0x40023800
 80082cc:	40013800 	.word	0x40013800
 80082d0:	40020000 	.word	0x40020000
 80082d4:	40020400 	.word	0x40020400
 80082d8:	40020800 	.word	0x40020800
 80082dc:	40020c00 	.word	0x40020c00
 80082e0:	40021000 	.word	0x40021000
 80082e4:	40021400 	.word	0x40021400
 80082e8:	40021800 	.word	0x40021800
 80082ec:	40021c00 	.word	0x40021c00
 80082f0:	40013c00 	.word	0x40013c00

080082f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	460b      	mov	r3, r1
 80082fe:	807b      	strh	r3, [r7, #2]
 8008300:	4613      	mov	r3, r2
 8008302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008304:	787b      	ldrb	r3, [r7, #1]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d003      	beq.n	8008312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800830a:	887a      	ldrh	r2, [r7, #2]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008310:	e003      	b.n	800831a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008312:	887b      	ldrh	r3, [r7, #2]
 8008314:	041a      	lsls	r2, r3, #16
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	619a      	str	r2, [r3, #24]
}
 800831a:	bf00      	nop
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
	...

08008328 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d101      	bne.n	800833a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e267      	b.n	800880a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 0301 	and.w	r3, r3, #1
 8008342:	2b00      	cmp	r3, #0
 8008344:	d075      	beq.n	8008432 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008346:	4b88      	ldr	r3, [pc, #544]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f003 030c 	and.w	r3, r3, #12
 800834e:	2b04      	cmp	r3, #4
 8008350:	d00c      	beq.n	800836c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008352:	4b85      	ldr	r3, [pc, #532]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800835a:	2b08      	cmp	r3, #8
 800835c:	d112      	bne.n	8008384 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800835e:	4b82      	ldr	r3, [pc, #520]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008366:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800836a:	d10b      	bne.n	8008384 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800836c:	4b7e      	ldr	r3, [pc, #504]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d05b      	beq.n	8008430 <HAL_RCC_OscConfig+0x108>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d157      	bne.n	8008430 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e242      	b.n	800880a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800838c:	d106      	bne.n	800839c <HAL_RCC_OscConfig+0x74>
 800838e:	4b76      	ldr	r3, [pc, #472]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a75      	ldr	r2, [pc, #468]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 8008394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008398:	6013      	str	r3, [r2, #0]
 800839a:	e01d      	b.n	80083d8 <HAL_RCC_OscConfig+0xb0>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083a4:	d10c      	bne.n	80083c0 <HAL_RCC_OscConfig+0x98>
 80083a6:	4b70      	ldr	r3, [pc, #448]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a6f      	ldr	r2, [pc, #444]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 80083ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083b0:	6013      	str	r3, [r2, #0]
 80083b2:	4b6d      	ldr	r3, [pc, #436]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a6c      	ldr	r2, [pc, #432]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 80083b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083bc:	6013      	str	r3, [r2, #0]
 80083be:	e00b      	b.n	80083d8 <HAL_RCC_OscConfig+0xb0>
 80083c0:	4b69      	ldr	r3, [pc, #420]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a68      	ldr	r2, [pc, #416]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 80083c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083ca:	6013      	str	r3, [r2, #0]
 80083cc:	4b66      	ldr	r3, [pc, #408]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a65      	ldr	r2, [pc, #404]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 80083d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d013      	beq.n	8008408 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083e0:	f7fe fc96 	bl	8006d10 <HAL_GetTick>
 80083e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083e6:	e008      	b.n	80083fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083e8:	f7fe fc92 	bl	8006d10 <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	2b64      	cmp	r3, #100	; 0x64
 80083f4:	d901      	bls.n	80083fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e207      	b.n	800880a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083fa:	4b5b      	ldr	r3, [pc, #364]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d0f0      	beq.n	80083e8 <HAL_RCC_OscConfig+0xc0>
 8008406:	e014      	b.n	8008432 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008408:	f7fe fc82 	bl	8006d10 <HAL_GetTick>
 800840c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800840e:	e008      	b.n	8008422 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008410:	f7fe fc7e 	bl	8006d10 <HAL_GetTick>
 8008414:	4602      	mov	r2, r0
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	2b64      	cmp	r3, #100	; 0x64
 800841c:	d901      	bls.n	8008422 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800841e:	2303      	movs	r3, #3
 8008420:	e1f3      	b.n	800880a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008422:	4b51      	ldr	r3, [pc, #324]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1f0      	bne.n	8008410 <HAL_RCC_OscConfig+0xe8>
 800842e:	e000      	b.n	8008432 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 0302 	and.w	r3, r3, #2
 800843a:	2b00      	cmp	r3, #0
 800843c:	d063      	beq.n	8008506 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800843e:	4b4a      	ldr	r3, [pc, #296]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f003 030c 	and.w	r3, r3, #12
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00b      	beq.n	8008462 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800844a:	4b47      	ldr	r3, [pc, #284]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008452:	2b08      	cmp	r3, #8
 8008454:	d11c      	bne.n	8008490 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008456:	4b44      	ldr	r3, [pc, #272]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d116      	bne.n	8008490 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008462:	4b41      	ldr	r3, [pc, #260]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 0302 	and.w	r3, r3, #2
 800846a:	2b00      	cmp	r3, #0
 800846c:	d005      	beq.n	800847a <HAL_RCC_OscConfig+0x152>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	2b01      	cmp	r3, #1
 8008474:	d001      	beq.n	800847a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e1c7      	b.n	800880a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800847a:	4b3b      	ldr	r3, [pc, #236]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	00db      	lsls	r3, r3, #3
 8008488:	4937      	ldr	r1, [pc, #220]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 800848a:	4313      	orrs	r3, r2
 800848c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800848e:	e03a      	b.n	8008506 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d020      	beq.n	80084da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008498:	4b34      	ldr	r3, [pc, #208]	; (800856c <HAL_RCC_OscConfig+0x244>)
 800849a:	2201      	movs	r2, #1
 800849c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800849e:	f7fe fc37 	bl	8006d10 <HAL_GetTick>
 80084a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084a4:	e008      	b.n	80084b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084a6:	f7fe fc33 	bl	8006d10 <HAL_GetTick>
 80084aa:	4602      	mov	r2, r0
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d901      	bls.n	80084b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e1a8      	b.n	800880a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084b8:	4b2b      	ldr	r3, [pc, #172]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0302 	and.w	r3, r3, #2
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d0f0      	beq.n	80084a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084c4:	4b28      	ldr	r3, [pc, #160]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	00db      	lsls	r3, r3, #3
 80084d2:	4925      	ldr	r1, [pc, #148]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 80084d4:	4313      	orrs	r3, r2
 80084d6:	600b      	str	r3, [r1, #0]
 80084d8:	e015      	b.n	8008506 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084da:	4b24      	ldr	r3, [pc, #144]	; (800856c <HAL_RCC_OscConfig+0x244>)
 80084dc:	2200      	movs	r2, #0
 80084de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084e0:	f7fe fc16 	bl	8006d10 <HAL_GetTick>
 80084e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084e6:	e008      	b.n	80084fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084e8:	f7fe fc12 	bl	8006d10 <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d901      	bls.n	80084fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80084f6:	2303      	movs	r3, #3
 80084f8:	e187      	b.n	800880a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084fa:	4b1b      	ldr	r3, [pc, #108]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 0302 	and.w	r3, r3, #2
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1f0      	bne.n	80084e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0308 	and.w	r3, r3, #8
 800850e:	2b00      	cmp	r3, #0
 8008510:	d036      	beq.n	8008580 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d016      	beq.n	8008548 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800851a:	4b15      	ldr	r3, [pc, #84]	; (8008570 <HAL_RCC_OscConfig+0x248>)
 800851c:	2201      	movs	r2, #1
 800851e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008520:	f7fe fbf6 	bl	8006d10 <HAL_GetTick>
 8008524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008526:	e008      	b.n	800853a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008528:	f7fe fbf2 	bl	8006d10 <HAL_GetTick>
 800852c:	4602      	mov	r2, r0
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	2b02      	cmp	r3, #2
 8008534:	d901      	bls.n	800853a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	e167      	b.n	800880a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800853a:	4b0b      	ldr	r3, [pc, #44]	; (8008568 <HAL_RCC_OscConfig+0x240>)
 800853c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800853e:	f003 0302 	and.w	r3, r3, #2
 8008542:	2b00      	cmp	r3, #0
 8008544:	d0f0      	beq.n	8008528 <HAL_RCC_OscConfig+0x200>
 8008546:	e01b      	b.n	8008580 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008548:	4b09      	ldr	r3, [pc, #36]	; (8008570 <HAL_RCC_OscConfig+0x248>)
 800854a:	2200      	movs	r2, #0
 800854c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800854e:	f7fe fbdf 	bl	8006d10 <HAL_GetTick>
 8008552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008554:	e00e      	b.n	8008574 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008556:	f7fe fbdb 	bl	8006d10 <HAL_GetTick>
 800855a:	4602      	mov	r2, r0
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	2b02      	cmp	r3, #2
 8008562:	d907      	bls.n	8008574 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e150      	b.n	800880a <HAL_RCC_OscConfig+0x4e2>
 8008568:	40023800 	.word	0x40023800
 800856c:	42470000 	.word	0x42470000
 8008570:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008574:	4b88      	ldr	r3, [pc, #544]	; (8008798 <HAL_RCC_OscConfig+0x470>)
 8008576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008578:	f003 0302 	and.w	r3, r3, #2
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1ea      	bne.n	8008556 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0304 	and.w	r3, r3, #4
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 8097 	beq.w	80086bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800858e:	2300      	movs	r3, #0
 8008590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008592:	4b81      	ldr	r3, [pc, #516]	; (8008798 <HAL_RCC_OscConfig+0x470>)
 8008594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10f      	bne.n	80085be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800859e:	2300      	movs	r3, #0
 80085a0:	60bb      	str	r3, [r7, #8]
 80085a2:	4b7d      	ldr	r3, [pc, #500]	; (8008798 <HAL_RCC_OscConfig+0x470>)
 80085a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a6:	4a7c      	ldr	r2, [pc, #496]	; (8008798 <HAL_RCC_OscConfig+0x470>)
 80085a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085ac:	6413      	str	r3, [r2, #64]	; 0x40
 80085ae:	4b7a      	ldr	r3, [pc, #488]	; (8008798 <HAL_RCC_OscConfig+0x470>)
 80085b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085b6:	60bb      	str	r3, [r7, #8]
 80085b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80085ba:	2301      	movs	r3, #1
 80085bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085be:	4b77      	ldr	r3, [pc, #476]	; (800879c <HAL_RCC_OscConfig+0x474>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d118      	bne.n	80085fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80085ca:	4b74      	ldr	r3, [pc, #464]	; (800879c <HAL_RCC_OscConfig+0x474>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a73      	ldr	r2, [pc, #460]	; (800879c <HAL_RCC_OscConfig+0x474>)
 80085d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085d6:	f7fe fb9b 	bl	8006d10 <HAL_GetTick>
 80085da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085dc:	e008      	b.n	80085f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085de:	f7fe fb97 	bl	8006d10 <HAL_GetTick>
 80085e2:	4602      	mov	r2, r0
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	d901      	bls.n	80085f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80085ec:	2303      	movs	r3, #3
 80085ee:	e10c      	b.n	800880a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085f0:	4b6a      	ldr	r3, [pc, #424]	; (800879c <HAL_RCC_OscConfig+0x474>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d0f0      	beq.n	80085de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d106      	bne.n	8008612 <HAL_RCC_OscConfig+0x2ea>
 8008604:	4b64      	ldr	r3, [pc, #400]	; (8008798 <HAL_RCC_OscConfig+0x470>)
 8008606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008608:	4a63      	ldr	r2, [pc, #396]	; (8008798 <HAL_RCC_OscConfig+0x470>)
 800860a:	f043 0301 	orr.w	r3, r3, #1
 800860e:	6713      	str	r3, [r2, #112]	; 0x70
 8008610:	e01c      	b.n	800864c <HAL_RCC_OscConfig+0x324>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	2b05      	cmp	r3, #5
 8008618:	d10c      	bne.n	8008634 <HAL_RCC_OscConfig+0x30c>
 800861a:	4b5f      	ldr	r3, [pc, #380]	; (8008798 <HAL_RCC_OscConfig+0x470>)
 800861c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800861e:	4a5e      	ldr	r2, [pc, #376]	; (8008798 <HAL_RCC_OscConfig+0x470>)
 8008620:	f043 0304 	orr.w	r3, r3, #4
 8008624:	6713      	str	r3, [r2, #112]	; 0x70
 8008626:	4b5c      	ldr	r3, [pc, #368]	; (8008798 <HAL_RCC_OscConfig+0x470>)
 8008628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800862a:	4a5b      	ldr	r2, [pc, #364]	; (8008798 <HAL_RCC_OscConfig+0x470>)
 800862c:	f043 0301 	orr.w	r3, r3, #1
 8008630:	6713      	str	r3, [r2, #112]	; 0x70
 8008632:	e00b      	b.n	800864c <HAL_RCC_OscConfig+0x324>
 8008634:	4b58      	ldr	r3, [pc, #352]	; (8008798 <HAL_RCC_OscConfig+0x470>)
 8008636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008638:	4a57      	ldr	r2, [pc, #348]	; (8008798 <HAL_RCC_OscConfig+0x470>)
 800863a:	f023 0301 	bic.w	r3, r3, #1
 800863e:	6713      	str	r3, [r2, #112]	; 0x70
 8008640:	4b55      	ldr	r3, [pc, #340]	; (8008798 <HAL_RCC_OscConfig+0x470>)
 8008642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008644:	4a54      	ldr	r2, [pc, #336]	; (8008798 <HAL_RCC_OscConfig+0x470>)
 8008646:	f023 0304 	bic.w	r3, r3, #4
 800864a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d015      	beq.n	8008680 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008654:	f7fe fb5c 	bl	8006d10 <HAL_GetTick>
 8008658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800865a:	e00a      	b.n	8008672 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800865c:	f7fe fb58 	bl	8006d10 <HAL_GetTick>
 8008660:	4602      	mov	r2, r0
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	f241 3288 	movw	r2, #5000	; 0x1388
 800866a:	4293      	cmp	r3, r2
 800866c:	d901      	bls.n	8008672 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	e0cb      	b.n	800880a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008672:	4b49      	ldr	r3, [pc, #292]	; (8008798 <HAL_RCC_OscConfig+0x470>)
 8008674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008676:	f003 0302 	and.w	r3, r3, #2
 800867a:	2b00      	cmp	r3, #0
 800867c:	d0ee      	beq.n	800865c <HAL_RCC_OscConfig+0x334>
 800867e:	e014      	b.n	80086aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008680:	f7fe fb46 	bl	8006d10 <HAL_GetTick>
 8008684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008686:	e00a      	b.n	800869e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008688:	f7fe fb42 	bl	8006d10 <HAL_GetTick>
 800868c:	4602      	mov	r2, r0
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	f241 3288 	movw	r2, #5000	; 0x1388
 8008696:	4293      	cmp	r3, r2
 8008698:	d901      	bls.n	800869e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800869a:	2303      	movs	r3, #3
 800869c:	e0b5      	b.n	800880a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800869e:	4b3e      	ldr	r3, [pc, #248]	; (8008798 <HAL_RCC_OscConfig+0x470>)
 80086a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086a2:	f003 0302 	and.w	r3, r3, #2
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1ee      	bne.n	8008688 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80086aa:	7dfb      	ldrb	r3, [r7, #23]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d105      	bne.n	80086bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086b0:	4b39      	ldr	r3, [pc, #228]	; (8008798 <HAL_RCC_OscConfig+0x470>)
 80086b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b4:	4a38      	ldr	r2, [pc, #224]	; (8008798 <HAL_RCC_OscConfig+0x470>)
 80086b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	699b      	ldr	r3, [r3, #24]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f000 80a1 	beq.w	8008808 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80086c6:	4b34      	ldr	r3, [pc, #208]	; (8008798 <HAL_RCC_OscConfig+0x470>)
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	f003 030c 	and.w	r3, r3, #12
 80086ce:	2b08      	cmp	r3, #8
 80086d0:	d05c      	beq.n	800878c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d141      	bne.n	800875e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086da:	4b31      	ldr	r3, [pc, #196]	; (80087a0 <HAL_RCC_OscConfig+0x478>)
 80086dc:	2200      	movs	r2, #0
 80086de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086e0:	f7fe fb16 	bl	8006d10 <HAL_GetTick>
 80086e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086e6:	e008      	b.n	80086fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086e8:	f7fe fb12 	bl	8006d10 <HAL_GetTick>
 80086ec:	4602      	mov	r2, r0
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d901      	bls.n	80086fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80086f6:	2303      	movs	r3, #3
 80086f8:	e087      	b.n	800880a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086fa:	4b27      	ldr	r3, [pc, #156]	; (8008798 <HAL_RCC_OscConfig+0x470>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1f0      	bne.n	80086e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	69da      	ldr	r2, [r3, #28]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	431a      	orrs	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008714:	019b      	lsls	r3, r3, #6
 8008716:	431a      	orrs	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871c:	085b      	lsrs	r3, r3, #1
 800871e:	3b01      	subs	r3, #1
 8008720:	041b      	lsls	r3, r3, #16
 8008722:	431a      	orrs	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008728:	061b      	lsls	r3, r3, #24
 800872a:	491b      	ldr	r1, [pc, #108]	; (8008798 <HAL_RCC_OscConfig+0x470>)
 800872c:	4313      	orrs	r3, r2
 800872e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008730:	4b1b      	ldr	r3, [pc, #108]	; (80087a0 <HAL_RCC_OscConfig+0x478>)
 8008732:	2201      	movs	r2, #1
 8008734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008736:	f7fe faeb 	bl	8006d10 <HAL_GetTick>
 800873a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800873c:	e008      	b.n	8008750 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800873e:	f7fe fae7 	bl	8006d10 <HAL_GetTick>
 8008742:	4602      	mov	r2, r0
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	2b02      	cmp	r3, #2
 800874a:	d901      	bls.n	8008750 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800874c:	2303      	movs	r3, #3
 800874e:	e05c      	b.n	800880a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008750:	4b11      	ldr	r3, [pc, #68]	; (8008798 <HAL_RCC_OscConfig+0x470>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008758:	2b00      	cmp	r3, #0
 800875a:	d0f0      	beq.n	800873e <HAL_RCC_OscConfig+0x416>
 800875c:	e054      	b.n	8008808 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800875e:	4b10      	ldr	r3, [pc, #64]	; (80087a0 <HAL_RCC_OscConfig+0x478>)
 8008760:	2200      	movs	r2, #0
 8008762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008764:	f7fe fad4 	bl	8006d10 <HAL_GetTick>
 8008768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800876a:	e008      	b.n	800877e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800876c:	f7fe fad0 	bl	8006d10 <HAL_GetTick>
 8008770:	4602      	mov	r2, r0
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	2b02      	cmp	r3, #2
 8008778:	d901      	bls.n	800877e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800877a:	2303      	movs	r3, #3
 800877c:	e045      	b.n	800880a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800877e:	4b06      	ldr	r3, [pc, #24]	; (8008798 <HAL_RCC_OscConfig+0x470>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1f0      	bne.n	800876c <HAL_RCC_OscConfig+0x444>
 800878a:	e03d      	b.n	8008808 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	2b01      	cmp	r3, #1
 8008792:	d107      	bne.n	80087a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	e038      	b.n	800880a <HAL_RCC_OscConfig+0x4e2>
 8008798:	40023800 	.word	0x40023800
 800879c:	40007000 	.word	0x40007000
 80087a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80087a4:	4b1b      	ldr	r3, [pc, #108]	; (8008814 <HAL_RCC_OscConfig+0x4ec>)
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d028      	beq.n	8008804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087bc:	429a      	cmp	r2, r3
 80087be:	d121      	bne.n	8008804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d11a      	bne.n	8008804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80087d4:	4013      	ands	r3, r2
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80087da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80087dc:	4293      	cmp	r3, r2
 80087de:	d111      	bne.n	8008804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ea:	085b      	lsrs	r3, r3, #1
 80087ec:	3b01      	subs	r3, #1
 80087ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d107      	bne.n	8008804 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008800:	429a      	cmp	r2, r3
 8008802:	d001      	beq.n	8008808 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e000      	b.n	800880a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3718      	adds	r7, #24
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	40023800 	.word	0x40023800

08008818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d101      	bne.n	800882c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	e0cc      	b.n	80089c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800882c:	4b68      	ldr	r3, [pc, #416]	; (80089d0 <HAL_RCC_ClockConfig+0x1b8>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0307 	and.w	r3, r3, #7
 8008834:	683a      	ldr	r2, [r7, #0]
 8008836:	429a      	cmp	r2, r3
 8008838:	d90c      	bls.n	8008854 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800883a:	4b65      	ldr	r3, [pc, #404]	; (80089d0 <HAL_RCC_ClockConfig+0x1b8>)
 800883c:	683a      	ldr	r2, [r7, #0]
 800883e:	b2d2      	uxtb	r2, r2
 8008840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008842:	4b63      	ldr	r3, [pc, #396]	; (80089d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 0307 	and.w	r3, r3, #7
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	429a      	cmp	r2, r3
 800884e:	d001      	beq.n	8008854 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e0b8      	b.n	80089c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 0302 	and.w	r3, r3, #2
 800885c:	2b00      	cmp	r3, #0
 800885e:	d020      	beq.n	80088a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 0304 	and.w	r3, r3, #4
 8008868:	2b00      	cmp	r3, #0
 800886a:	d005      	beq.n	8008878 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800886c:	4b59      	ldr	r3, [pc, #356]	; (80089d4 <HAL_RCC_ClockConfig+0x1bc>)
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	4a58      	ldr	r2, [pc, #352]	; (80089d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008872:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008876:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0308 	and.w	r3, r3, #8
 8008880:	2b00      	cmp	r3, #0
 8008882:	d005      	beq.n	8008890 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008884:	4b53      	ldr	r3, [pc, #332]	; (80089d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	4a52      	ldr	r2, [pc, #328]	; (80089d4 <HAL_RCC_ClockConfig+0x1bc>)
 800888a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800888e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008890:	4b50      	ldr	r3, [pc, #320]	; (80089d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	494d      	ldr	r1, [pc, #308]	; (80089d4 <HAL_RCC_ClockConfig+0x1bc>)
 800889e:	4313      	orrs	r3, r2
 80088a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 0301 	and.w	r3, r3, #1
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d044      	beq.n	8008938 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d107      	bne.n	80088c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088b6:	4b47      	ldr	r3, [pc, #284]	; (80089d4 <HAL_RCC_ClockConfig+0x1bc>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d119      	bne.n	80088f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	e07f      	b.n	80089c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d003      	beq.n	80088d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80088d2:	2b03      	cmp	r3, #3
 80088d4:	d107      	bne.n	80088e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088d6:	4b3f      	ldr	r3, [pc, #252]	; (80089d4 <HAL_RCC_ClockConfig+0x1bc>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d109      	bne.n	80088f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e06f      	b.n	80089c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088e6:	4b3b      	ldr	r3, [pc, #236]	; (80089d4 <HAL_RCC_ClockConfig+0x1bc>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 0302 	and.w	r3, r3, #2
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d101      	bne.n	80088f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e067      	b.n	80089c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80088f6:	4b37      	ldr	r3, [pc, #220]	; (80089d4 <HAL_RCC_ClockConfig+0x1bc>)
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f023 0203 	bic.w	r2, r3, #3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	4934      	ldr	r1, [pc, #208]	; (80089d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008904:	4313      	orrs	r3, r2
 8008906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008908:	f7fe fa02 	bl	8006d10 <HAL_GetTick>
 800890c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800890e:	e00a      	b.n	8008926 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008910:	f7fe f9fe 	bl	8006d10 <HAL_GetTick>
 8008914:	4602      	mov	r2, r0
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	f241 3288 	movw	r2, #5000	; 0x1388
 800891e:	4293      	cmp	r3, r2
 8008920:	d901      	bls.n	8008926 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	e04f      	b.n	80089c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008926:	4b2b      	ldr	r3, [pc, #172]	; (80089d4 <HAL_RCC_ClockConfig+0x1bc>)
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	f003 020c 	and.w	r2, r3, #12
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	429a      	cmp	r2, r3
 8008936:	d1eb      	bne.n	8008910 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008938:	4b25      	ldr	r3, [pc, #148]	; (80089d0 <HAL_RCC_ClockConfig+0x1b8>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 0307 	and.w	r3, r3, #7
 8008940:	683a      	ldr	r2, [r7, #0]
 8008942:	429a      	cmp	r2, r3
 8008944:	d20c      	bcs.n	8008960 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008946:	4b22      	ldr	r3, [pc, #136]	; (80089d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008948:	683a      	ldr	r2, [r7, #0]
 800894a:	b2d2      	uxtb	r2, r2
 800894c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800894e:	4b20      	ldr	r3, [pc, #128]	; (80089d0 <HAL_RCC_ClockConfig+0x1b8>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 0307 	and.w	r3, r3, #7
 8008956:	683a      	ldr	r2, [r7, #0]
 8008958:	429a      	cmp	r2, r3
 800895a:	d001      	beq.n	8008960 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	e032      	b.n	80089c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 0304 	and.w	r3, r3, #4
 8008968:	2b00      	cmp	r3, #0
 800896a:	d008      	beq.n	800897e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800896c:	4b19      	ldr	r3, [pc, #100]	; (80089d4 <HAL_RCC_ClockConfig+0x1bc>)
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	4916      	ldr	r1, [pc, #88]	; (80089d4 <HAL_RCC_ClockConfig+0x1bc>)
 800897a:	4313      	orrs	r3, r2
 800897c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 0308 	and.w	r3, r3, #8
 8008986:	2b00      	cmp	r3, #0
 8008988:	d009      	beq.n	800899e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800898a:	4b12      	ldr	r3, [pc, #72]	; (80089d4 <HAL_RCC_ClockConfig+0x1bc>)
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	00db      	lsls	r3, r3, #3
 8008998:	490e      	ldr	r1, [pc, #56]	; (80089d4 <HAL_RCC_ClockConfig+0x1bc>)
 800899a:	4313      	orrs	r3, r2
 800899c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800899e:	f000 f821 	bl	80089e4 <HAL_RCC_GetSysClockFreq>
 80089a2:	4602      	mov	r2, r0
 80089a4:	4b0b      	ldr	r3, [pc, #44]	; (80089d4 <HAL_RCC_ClockConfig+0x1bc>)
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	091b      	lsrs	r3, r3, #4
 80089aa:	f003 030f 	and.w	r3, r3, #15
 80089ae:	490a      	ldr	r1, [pc, #40]	; (80089d8 <HAL_RCC_ClockConfig+0x1c0>)
 80089b0:	5ccb      	ldrb	r3, [r1, r3]
 80089b2:	fa22 f303 	lsr.w	r3, r2, r3
 80089b6:	4a09      	ldr	r2, [pc, #36]	; (80089dc <HAL_RCC_ClockConfig+0x1c4>)
 80089b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80089ba:	4b09      	ldr	r3, [pc, #36]	; (80089e0 <HAL_RCC_ClockConfig+0x1c8>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4618      	mov	r0, r3
 80089c0:	f7fe f962 	bl	8006c88 <HAL_InitTick>

  return HAL_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	40023c00 	.word	0x40023c00
 80089d4:	40023800 	.word	0x40023800
 80089d8:	08011024 	.word	0x08011024
 80089dc:	200000a0 	.word	0x200000a0
 80089e0:	200000a4 	.word	0x200000a4

080089e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089e8:	b094      	sub	sp, #80	; 0x50
 80089ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80089ec:	2300      	movs	r3, #0
 80089ee:	647b      	str	r3, [r7, #68]	; 0x44
 80089f0:	2300      	movs	r3, #0
 80089f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089f4:	2300      	movs	r3, #0
 80089f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80089f8:	2300      	movs	r3, #0
 80089fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089fc:	4b79      	ldr	r3, [pc, #484]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x200>)
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f003 030c 	and.w	r3, r3, #12
 8008a04:	2b08      	cmp	r3, #8
 8008a06:	d00d      	beq.n	8008a24 <HAL_RCC_GetSysClockFreq+0x40>
 8008a08:	2b08      	cmp	r3, #8
 8008a0a:	f200 80e1 	bhi.w	8008bd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d002      	beq.n	8008a18 <HAL_RCC_GetSysClockFreq+0x34>
 8008a12:	2b04      	cmp	r3, #4
 8008a14:	d003      	beq.n	8008a1e <HAL_RCC_GetSysClockFreq+0x3a>
 8008a16:	e0db      	b.n	8008bd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008a18:	4b73      	ldr	r3, [pc, #460]	; (8008be8 <HAL_RCC_GetSysClockFreq+0x204>)
 8008a1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008a1c:	e0db      	b.n	8008bd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008a1e:	4b73      	ldr	r3, [pc, #460]	; (8008bec <HAL_RCC_GetSysClockFreq+0x208>)
 8008a20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008a22:	e0d8      	b.n	8008bd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a24:	4b6f      	ldr	r3, [pc, #444]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008a2e:	4b6d      	ldr	r3, [pc, #436]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d063      	beq.n	8008b02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a3a:	4b6a      	ldr	r3, [pc, #424]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	099b      	lsrs	r3, r3, #6
 8008a40:	2200      	movs	r2, #0
 8008a42:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4c:	633b      	str	r3, [r7, #48]	; 0x30
 8008a4e:	2300      	movs	r3, #0
 8008a50:	637b      	str	r3, [r7, #52]	; 0x34
 8008a52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008a56:	4622      	mov	r2, r4
 8008a58:	462b      	mov	r3, r5
 8008a5a:	f04f 0000 	mov.w	r0, #0
 8008a5e:	f04f 0100 	mov.w	r1, #0
 8008a62:	0159      	lsls	r1, r3, #5
 8008a64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008a68:	0150      	lsls	r0, r2, #5
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	4621      	mov	r1, r4
 8008a70:	1a51      	subs	r1, r2, r1
 8008a72:	6139      	str	r1, [r7, #16]
 8008a74:	4629      	mov	r1, r5
 8008a76:	eb63 0301 	sbc.w	r3, r3, r1
 8008a7a:	617b      	str	r3, [r7, #20]
 8008a7c:	f04f 0200 	mov.w	r2, #0
 8008a80:	f04f 0300 	mov.w	r3, #0
 8008a84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008a88:	4659      	mov	r1, fp
 8008a8a:	018b      	lsls	r3, r1, #6
 8008a8c:	4651      	mov	r1, sl
 8008a8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008a92:	4651      	mov	r1, sl
 8008a94:	018a      	lsls	r2, r1, #6
 8008a96:	4651      	mov	r1, sl
 8008a98:	ebb2 0801 	subs.w	r8, r2, r1
 8008a9c:	4659      	mov	r1, fp
 8008a9e:	eb63 0901 	sbc.w	r9, r3, r1
 8008aa2:	f04f 0200 	mov.w	r2, #0
 8008aa6:	f04f 0300 	mov.w	r3, #0
 8008aaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008aae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ab2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ab6:	4690      	mov	r8, r2
 8008ab8:	4699      	mov	r9, r3
 8008aba:	4623      	mov	r3, r4
 8008abc:	eb18 0303 	adds.w	r3, r8, r3
 8008ac0:	60bb      	str	r3, [r7, #8]
 8008ac2:	462b      	mov	r3, r5
 8008ac4:	eb49 0303 	adc.w	r3, r9, r3
 8008ac8:	60fb      	str	r3, [r7, #12]
 8008aca:	f04f 0200 	mov.w	r2, #0
 8008ace:	f04f 0300 	mov.w	r3, #0
 8008ad2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	024b      	lsls	r3, r1, #9
 8008ada:	4621      	mov	r1, r4
 8008adc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008ae0:	4621      	mov	r1, r4
 8008ae2:	024a      	lsls	r2, r1, #9
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aea:	2200      	movs	r2, #0
 8008aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8008aee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008af0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008af4:	f7f7 fbc4 	bl	8000280 <__aeabi_uldivmod>
 8008af8:	4602      	mov	r2, r0
 8008afa:	460b      	mov	r3, r1
 8008afc:	4613      	mov	r3, r2
 8008afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b00:	e058      	b.n	8008bb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b02:	4b38      	ldr	r3, [pc, #224]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	099b      	lsrs	r3, r3, #6
 8008b08:	2200      	movs	r2, #0
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	4611      	mov	r1, r2
 8008b0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008b12:	623b      	str	r3, [r7, #32]
 8008b14:	2300      	movs	r3, #0
 8008b16:	627b      	str	r3, [r7, #36]	; 0x24
 8008b18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008b1c:	4642      	mov	r2, r8
 8008b1e:	464b      	mov	r3, r9
 8008b20:	f04f 0000 	mov.w	r0, #0
 8008b24:	f04f 0100 	mov.w	r1, #0
 8008b28:	0159      	lsls	r1, r3, #5
 8008b2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b2e:	0150      	lsls	r0, r2, #5
 8008b30:	4602      	mov	r2, r0
 8008b32:	460b      	mov	r3, r1
 8008b34:	4641      	mov	r1, r8
 8008b36:	ebb2 0a01 	subs.w	sl, r2, r1
 8008b3a:	4649      	mov	r1, r9
 8008b3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008b40:	f04f 0200 	mov.w	r2, #0
 8008b44:	f04f 0300 	mov.w	r3, #0
 8008b48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008b4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008b50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008b54:	ebb2 040a 	subs.w	r4, r2, sl
 8008b58:	eb63 050b 	sbc.w	r5, r3, fp
 8008b5c:	f04f 0200 	mov.w	r2, #0
 8008b60:	f04f 0300 	mov.w	r3, #0
 8008b64:	00eb      	lsls	r3, r5, #3
 8008b66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b6a:	00e2      	lsls	r2, r4, #3
 8008b6c:	4614      	mov	r4, r2
 8008b6e:	461d      	mov	r5, r3
 8008b70:	4643      	mov	r3, r8
 8008b72:	18e3      	adds	r3, r4, r3
 8008b74:	603b      	str	r3, [r7, #0]
 8008b76:	464b      	mov	r3, r9
 8008b78:	eb45 0303 	adc.w	r3, r5, r3
 8008b7c:	607b      	str	r3, [r7, #4]
 8008b7e:	f04f 0200 	mov.w	r2, #0
 8008b82:	f04f 0300 	mov.w	r3, #0
 8008b86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008b8a:	4629      	mov	r1, r5
 8008b8c:	028b      	lsls	r3, r1, #10
 8008b8e:	4621      	mov	r1, r4
 8008b90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008b94:	4621      	mov	r1, r4
 8008b96:	028a      	lsls	r2, r1, #10
 8008b98:	4610      	mov	r0, r2
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	61bb      	str	r3, [r7, #24]
 8008ba2:	61fa      	str	r2, [r7, #28]
 8008ba4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ba8:	f7f7 fb6a 	bl	8000280 <__aeabi_uldivmod>
 8008bac:	4602      	mov	r2, r0
 8008bae:	460b      	mov	r3, r1
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008bb4:	4b0b      	ldr	r3, [pc, #44]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	0c1b      	lsrs	r3, r3, #16
 8008bba:	f003 0303 	and.w	r3, r3, #3
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	005b      	lsls	r3, r3, #1
 8008bc2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008bc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008bce:	e002      	b.n	8008bd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008bd0:	4b05      	ldr	r3, [pc, #20]	; (8008be8 <HAL_RCC_GetSysClockFreq+0x204>)
 8008bd2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3750      	adds	r7, #80	; 0x50
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008be2:	bf00      	nop
 8008be4:	40023800 	.word	0x40023800
 8008be8:	00f42400 	.word	0x00f42400
 8008bec:	007a1200 	.word	0x007a1200

08008bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008bf4:	4b03      	ldr	r3, [pc, #12]	; (8008c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	200000a0 	.word	0x200000a0

08008c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008c0c:	f7ff fff0 	bl	8008bf0 <HAL_RCC_GetHCLKFreq>
 8008c10:	4602      	mov	r2, r0
 8008c12:	4b05      	ldr	r3, [pc, #20]	; (8008c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	0a9b      	lsrs	r3, r3, #10
 8008c18:	f003 0307 	and.w	r3, r3, #7
 8008c1c:	4903      	ldr	r1, [pc, #12]	; (8008c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c1e:	5ccb      	ldrb	r3, [r1, r3]
 8008c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	40023800 	.word	0x40023800
 8008c2c:	08011034 	.word	0x08011034

08008c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008c34:	f7ff ffdc 	bl	8008bf0 <HAL_RCC_GetHCLKFreq>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	4b05      	ldr	r3, [pc, #20]	; (8008c50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	0b5b      	lsrs	r3, r3, #13
 8008c40:	f003 0307 	and.w	r3, r3, #7
 8008c44:	4903      	ldr	r1, [pc, #12]	; (8008c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c46:	5ccb      	ldrb	r3, [r1, r3]
 8008c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	40023800 	.word	0x40023800
 8008c54:	08011034 	.word	0x08011034

08008c58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d101      	bne.n	8008c6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e07b      	b.n	8008d62 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d108      	bne.n	8008c84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c7a:	d009      	beq.n	8008c90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	61da      	str	r2, [r3, #28]
 8008c82:	e005      	b.n	8008c90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d106      	bne.n	8008cb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7fc f858 	bl	8004d60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cc6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008cd8:	431a      	orrs	r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ce2:	431a      	orrs	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	f003 0302 	and.w	r3, r3, #2
 8008cec:	431a      	orrs	r2, r3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	f003 0301 	and.w	r3, r3, #1
 8008cf6:	431a      	orrs	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d00:	431a      	orrs	r2, r3
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	69db      	ldr	r3, [r3, #28]
 8008d06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d0a:	431a      	orrs	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a1b      	ldr	r3, [r3, #32]
 8008d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d14:	ea42 0103 	orr.w	r1, r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	430a      	orrs	r2, r1
 8008d26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	0c1b      	lsrs	r3, r3, #16
 8008d2e:	f003 0104 	and.w	r1, r3, #4
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d36:	f003 0210 	and.w	r2, r3, #16
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	430a      	orrs	r2, r1
 8008d40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	69da      	ldr	r2, [r3, #28]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b088      	sub	sp, #32
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	60f8      	str	r0, [r7, #12]
 8008d72:	60b9      	str	r1, [r7, #8]
 8008d74:	603b      	str	r3, [r7, #0]
 8008d76:	4613      	mov	r3, r2
 8008d78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d101      	bne.n	8008d8c <HAL_SPI_Transmit+0x22>
 8008d88:	2302      	movs	r3, #2
 8008d8a:	e126      	b.n	8008fda <HAL_SPI_Transmit+0x270>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d94:	f7fd ffbc 	bl	8006d10 <HAL_GetTick>
 8008d98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008d9a:	88fb      	ldrh	r3, [r7, #6]
 8008d9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d002      	beq.n	8008db0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008daa:	2302      	movs	r3, #2
 8008dac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008dae:	e10b      	b.n	8008fc8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d002      	beq.n	8008dbc <HAL_SPI_Transmit+0x52>
 8008db6:	88fb      	ldrh	r3, [r7, #6]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d102      	bne.n	8008dc2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008dc0:	e102      	b.n	8008fc8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2203      	movs	r2, #3
 8008dc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	68ba      	ldr	r2, [r7, #8]
 8008dd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	88fa      	ldrh	r2, [r7, #6]
 8008dda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	88fa      	ldrh	r2, [r7, #6]
 8008de0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2200      	movs	r2, #0
 8008de6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2200      	movs	r2, #0
 8008df8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e08:	d10f      	bne.n	8008e2a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e34:	2b40      	cmp	r3, #64	; 0x40
 8008e36:	d007      	beq.n	8008e48 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e50:	d14b      	bne.n	8008eea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d002      	beq.n	8008e60 <HAL_SPI_Transmit+0xf6>
 8008e5a:	8afb      	ldrh	r3, [r7, #22]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d13e      	bne.n	8008ede <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e64:	881a      	ldrh	r2, [r3, #0]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e70:	1c9a      	adds	r2, r3, #2
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008e84:	e02b      	b.n	8008ede <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	f003 0302 	and.w	r3, r3, #2
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	d112      	bne.n	8008eba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e98:	881a      	ldrh	r2, [r3, #0]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea4:	1c9a      	adds	r2, r3, #2
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	86da      	strh	r2, [r3, #54]	; 0x36
 8008eb8:	e011      	b.n	8008ede <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008eba:	f7fd ff29 	bl	8006d10 <HAL_GetTick>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	1ad3      	subs	r3, r2, r3
 8008ec4:	683a      	ldr	r2, [r7, #0]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d803      	bhi.n	8008ed2 <HAL_SPI_Transmit+0x168>
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed0:	d102      	bne.n	8008ed8 <HAL_SPI_Transmit+0x16e>
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d102      	bne.n	8008ede <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008ed8:	2303      	movs	r3, #3
 8008eda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008edc:	e074      	b.n	8008fc8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1ce      	bne.n	8008e86 <HAL_SPI_Transmit+0x11c>
 8008ee8:	e04c      	b.n	8008f84 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d002      	beq.n	8008ef8 <HAL_SPI_Transmit+0x18e>
 8008ef2:	8afb      	ldrh	r3, [r7, #22]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d140      	bne.n	8008f7a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	330c      	adds	r3, #12
 8008f02:	7812      	ldrb	r2, [r2, #0]
 8008f04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f0a:	1c5a      	adds	r2, r3, #1
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	3b01      	subs	r3, #1
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008f1e:	e02c      	b.n	8008f7a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	f003 0302 	and.w	r3, r3, #2
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d113      	bne.n	8008f56 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	330c      	adds	r3, #12
 8008f38:	7812      	ldrb	r2, [r2, #0]
 8008f3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f40:	1c5a      	adds	r2, r3, #1
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	86da      	strh	r2, [r3, #54]	; 0x36
 8008f54:	e011      	b.n	8008f7a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f56:	f7fd fedb 	bl	8006d10 <HAL_GetTick>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	1ad3      	subs	r3, r2, r3
 8008f60:	683a      	ldr	r2, [r7, #0]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d803      	bhi.n	8008f6e <HAL_SPI_Transmit+0x204>
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f6c:	d102      	bne.n	8008f74 <HAL_SPI_Transmit+0x20a>
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d102      	bne.n	8008f7a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008f74:	2303      	movs	r3, #3
 8008f76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008f78:	e026      	b.n	8008fc8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1cd      	bne.n	8008f20 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f84:	69ba      	ldr	r2, [r7, #24]
 8008f86:	6839      	ldr	r1, [r7, #0]
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f000 fbcb 	bl	8009724 <SPI_EndRxTxTransaction>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d002      	beq.n	8008f9a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2220      	movs	r2, #32
 8008f98:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10a      	bne.n	8008fb8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	613b      	str	r3, [r7, #16]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	613b      	str	r3, [r7, #16]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	613b      	str	r3, [r7, #16]
 8008fb6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d002      	beq.n	8008fc6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	77fb      	strb	r3, [r7, #31]
 8008fc4:	e000      	b.n	8008fc8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008fc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008fd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3720      	adds	r7, #32
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b088      	sub	sp, #32
 8008fe6:	af02      	add	r7, sp, #8
 8008fe8:	60f8      	str	r0, [r7, #12]
 8008fea:	60b9      	str	r1, [r7, #8]
 8008fec:	603b      	str	r3, [r7, #0]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ffe:	d112      	bne.n	8009026 <HAL_SPI_Receive+0x44>
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d10e      	bne.n	8009026 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2204      	movs	r2, #4
 800900c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009010:	88fa      	ldrh	r2, [r7, #6]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	4613      	mov	r3, r2
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	68b9      	ldr	r1, [r7, #8]
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f000 f8f1 	bl	8009204 <HAL_SPI_TransmitReceive>
 8009022:	4603      	mov	r3, r0
 8009024:	e0ea      	b.n	80091fc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800902c:	2b01      	cmp	r3, #1
 800902e:	d101      	bne.n	8009034 <HAL_SPI_Receive+0x52>
 8009030:	2302      	movs	r3, #2
 8009032:	e0e3      	b.n	80091fc <HAL_SPI_Receive+0x21a>
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800903c:	f7fd fe68 	bl	8006d10 <HAL_GetTick>
 8009040:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009048:	b2db      	uxtb	r3, r3
 800904a:	2b01      	cmp	r3, #1
 800904c:	d002      	beq.n	8009054 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800904e:	2302      	movs	r3, #2
 8009050:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009052:	e0ca      	b.n	80091ea <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d002      	beq.n	8009060 <HAL_SPI_Receive+0x7e>
 800905a:	88fb      	ldrh	r3, [r7, #6]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d102      	bne.n	8009066 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009064:	e0c1      	b.n	80091ea <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2204      	movs	r2, #4
 800906a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	88fa      	ldrh	r2, [r7, #6]
 800907e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	88fa      	ldrh	r2, [r7, #6]
 8009084:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2200      	movs	r2, #0
 8009090:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2200      	movs	r2, #0
 8009096:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2200      	movs	r2, #0
 800909c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090ac:	d10f      	bne.n	80090ce <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80090cc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090d8:	2b40      	cmp	r3, #64	; 0x40
 80090da:	d007      	beq.n	80090ec <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090ea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d162      	bne.n	80091ba <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80090f4:	e02e      	b.n	8009154 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	f003 0301 	and.w	r3, r3, #1
 8009100:	2b01      	cmp	r3, #1
 8009102:	d115      	bne.n	8009130 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f103 020c 	add.w	r2, r3, #12
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009110:	7812      	ldrb	r2, [r2, #0]
 8009112:	b2d2      	uxtb	r2, r2
 8009114:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911a:	1c5a      	adds	r2, r3, #1
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009124:	b29b      	uxth	r3, r3
 8009126:	3b01      	subs	r3, #1
 8009128:	b29a      	uxth	r2, r3
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800912e:	e011      	b.n	8009154 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009130:	f7fd fdee 	bl	8006d10 <HAL_GetTick>
 8009134:	4602      	mov	r2, r0
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	683a      	ldr	r2, [r7, #0]
 800913c:	429a      	cmp	r2, r3
 800913e:	d803      	bhi.n	8009148 <HAL_SPI_Receive+0x166>
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009146:	d102      	bne.n	800914e <HAL_SPI_Receive+0x16c>
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d102      	bne.n	8009154 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800914e:	2303      	movs	r3, #3
 8009150:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009152:	e04a      	b.n	80091ea <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009158:	b29b      	uxth	r3, r3
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1cb      	bne.n	80090f6 <HAL_SPI_Receive+0x114>
 800915e:	e031      	b.n	80091c4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	f003 0301 	and.w	r3, r3, #1
 800916a:	2b01      	cmp	r3, #1
 800916c:	d113      	bne.n	8009196 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	68da      	ldr	r2, [r3, #12]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009178:	b292      	uxth	r2, r2
 800917a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009180:	1c9a      	adds	r2, r3, #2
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800918a:	b29b      	uxth	r3, r3
 800918c:	3b01      	subs	r3, #1
 800918e:	b29a      	uxth	r2, r3
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009194:	e011      	b.n	80091ba <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009196:	f7fd fdbb 	bl	8006d10 <HAL_GetTick>
 800919a:	4602      	mov	r2, r0
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	1ad3      	subs	r3, r2, r3
 80091a0:	683a      	ldr	r2, [r7, #0]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d803      	bhi.n	80091ae <HAL_SPI_Receive+0x1cc>
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ac:	d102      	bne.n	80091b4 <HAL_SPI_Receive+0x1d2>
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d102      	bne.n	80091ba <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80091b4:	2303      	movs	r3, #3
 80091b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80091b8:	e017      	b.n	80091ea <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091be:	b29b      	uxth	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d1cd      	bne.n	8009160 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	6839      	ldr	r1, [r7, #0]
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f000 fa45 	bl	8009658 <SPI_EndRxTransaction>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d002      	beq.n	80091da <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2220      	movs	r2, #32
 80091d8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d002      	beq.n	80091e8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	75fb      	strb	r3, [r7, #23]
 80091e6:	e000      	b.n	80091ea <HAL_SPI_Receive+0x208>
  }

error :
 80091e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80091fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3718      	adds	r7, #24
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b08c      	sub	sp, #48	; 0x30
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	607a      	str	r2, [r7, #4]
 8009210:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009212:	2301      	movs	r3, #1
 8009214:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009216:	2300      	movs	r3, #0
 8009218:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009222:	2b01      	cmp	r3, #1
 8009224:	d101      	bne.n	800922a <HAL_SPI_TransmitReceive+0x26>
 8009226:	2302      	movs	r3, #2
 8009228:	e18a      	b.n	8009540 <HAL_SPI_TransmitReceive+0x33c>
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2201      	movs	r2, #1
 800922e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009232:	f7fd fd6d 	bl	8006d10 <HAL_GetTick>
 8009236:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800923e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009248:	887b      	ldrh	r3, [r7, #2]
 800924a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800924c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009250:	2b01      	cmp	r3, #1
 8009252:	d00f      	beq.n	8009274 <HAL_SPI_TransmitReceive+0x70>
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800925a:	d107      	bne.n	800926c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d103      	bne.n	800926c <HAL_SPI_TransmitReceive+0x68>
 8009264:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009268:	2b04      	cmp	r3, #4
 800926a:	d003      	beq.n	8009274 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800926c:	2302      	movs	r3, #2
 800926e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009272:	e15b      	b.n	800952c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d005      	beq.n	8009286 <HAL_SPI_TransmitReceive+0x82>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d002      	beq.n	8009286 <HAL_SPI_TransmitReceive+0x82>
 8009280:	887b      	ldrh	r3, [r7, #2]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d103      	bne.n	800928e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800928c:	e14e      	b.n	800952c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009294:	b2db      	uxtb	r3, r3
 8009296:	2b04      	cmp	r3, #4
 8009298:	d003      	beq.n	80092a2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2205      	movs	r2, #5
 800929e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2200      	movs	r2, #0
 80092a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	887a      	ldrh	r2, [r7, #2]
 80092b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	887a      	ldrh	r2, [r7, #2]
 80092b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	887a      	ldrh	r2, [r7, #2]
 80092c4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	887a      	ldrh	r2, [r7, #2]
 80092ca:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2200      	movs	r2, #0
 80092d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e2:	2b40      	cmp	r3, #64	; 0x40
 80092e4:	d007      	beq.n	80092f6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092fe:	d178      	bne.n	80093f2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d002      	beq.n	800930e <HAL_SPI_TransmitReceive+0x10a>
 8009308:	8b7b      	ldrh	r3, [r7, #26]
 800930a:	2b01      	cmp	r3, #1
 800930c:	d166      	bne.n	80093dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009312:	881a      	ldrh	r2, [r3, #0]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800931e:	1c9a      	adds	r2, r3, #2
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009328:	b29b      	uxth	r3, r3
 800932a:	3b01      	subs	r3, #1
 800932c:	b29a      	uxth	r2, r3
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009332:	e053      	b.n	80093dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	f003 0302 	and.w	r3, r3, #2
 800933e:	2b02      	cmp	r3, #2
 8009340:	d11b      	bne.n	800937a <HAL_SPI_TransmitReceive+0x176>
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009346:	b29b      	uxth	r3, r3
 8009348:	2b00      	cmp	r3, #0
 800934a:	d016      	beq.n	800937a <HAL_SPI_TransmitReceive+0x176>
 800934c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934e:	2b01      	cmp	r3, #1
 8009350:	d113      	bne.n	800937a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009356:	881a      	ldrh	r2, [r3, #0]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009362:	1c9a      	adds	r2, r3, #2
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800936c:	b29b      	uxth	r3, r3
 800936e:	3b01      	subs	r3, #1
 8009370:	b29a      	uxth	r2, r3
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009376:	2300      	movs	r3, #0
 8009378:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	f003 0301 	and.w	r3, r3, #1
 8009384:	2b01      	cmp	r3, #1
 8009386:	d119      	bne.n	80093bc <HAL_SPI_TransmitReceive+0x1b8>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800938c:	b29b      	uxth	r3, r3
 800938e:	2b00      	cmp	r3, #0
 8009390:	d014      	beq.n	80093bc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68da      	ldr	r2, [r3, #12]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800939c:	b292      	uxth	r2, r2
 800939e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a4:	1c9a      	adds	r2, r3, #2
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	3b01      	subs	r3, #1
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80093b8:	2301      	movs	r3, #1
 80093ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80093bc:	f7fd fca8 	bl	8006d10 <HAL_GetTick>
 80093c0:	4602      	mov	r2, r0
 80093c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d807      	bhi.n	80093dc <HAL_SPI_TransmitReceive+0x1d8>
 80093cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d2:	d003      	beq.n	80093dc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80093d4:	2303      	movs	r3, #3
 80093d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80093da:	e0a7      	b.n	800952c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1a6      	bne.n	8009334 <HAL_SPI_TransmitReceive+0x130>
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1a1      	bne.n	8009334 <HAL_SPI_TransmitReceive+0x130>
 80093f0:	e07c      	b.n	80094ec <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d002      	beq.n	8009400 <HAL_SPI_TransmitReceive+0x1fc>
 80093fa:	8b7b      	ldrh	r3, [r7, #26]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d16b      	bne.n	80094d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	330c      	adds	r3, #12
 800940a:	7812      	ldrb	r2, [r2, #0]
 800940c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009412:	1c5a      	adds	r2, r3, #1
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800941c:	b29b      	uxth	r3, r3
 800941e:	3b01      	subs	r3, #1
 8009420:	b29a      	uxth	r2, r3
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009426:	e057      	b.n	80094d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	f003 0302 	and.w	r3, r3, #2
 8009432:	2b02      	cmp	r3, #2
 8009434:	d11c      	bne.n	8009470 <HAL_SPI_TransmitReceive+0x26c>
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800943a:	b29b      	uxth	r3, r3
 800943c:	2b00      	cmp	r3, #0
 800943e:	d017      	beq.n	8009470 <HAL_SPI_TransmitReceive+0x26c>
 8009440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009442:	2b01      	cmp	r3, #1
 8009444:	d114      	bne.n	8009470 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	330c      	adds	r3, #12
 8009450:	7812      	ldrb	r2, [r2, #0]
 8009452:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009458:	1c5a      	adds	r2, r3, #1
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009462:	b29b      	uxth	r3, r3
 8009464:	3b01      	subs	r3, #1
 8009466:	b29a      	uxth	r2, r3
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800946c:	2300      	movs	r3, #0
 800946e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	f003 0301 	and.w	r3, r3, #1
 800947a:	2b01      	cmp	r3, #1
 800947c:	d119      	bne.n	80094b2 <HAL_SPI_TransmitReceive+0x2ae>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009482:	b29b      	uxth	r3, r3
 8009484:	2b00      	cmp	r3, #0
 8009486:	d014      	beq.n	80094b2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68da      	ldr	r2, [r3, #12]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009492:	b2d2      	uxtb	r2, r2
 8009494:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800949a:	1c5a      	adds	r2, r3, #1
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	3b01      	subs	r3, #1
 80094a8:	b29a      	uxth	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80094ae:	2301      	movs	r3, #1
 80094b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80094b2:	f7fd fc2d 	bl	8006d10 <HAL_GetTick>
 80094b6:	4602      	mov	r2, r0
 80094b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ba:	1ad3      	subs	r3, r2, r3
 80094bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094be:	429a      	cmp	r2, r3
 80094c0:	d803      	bhi.n	80094ca <HAL_SPI_TransmitReceive+0x2c6>
 80094c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c8:	d102      	bne.n	80094d0 <HAL_SPI_TransmitReceive+0x2cc>
 80094ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d103      	bne.n	80094d8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80094d0:	2303      	movs	r3, #3
 80094d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80094d6:	e029      	b.n	800952c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094dc:	b29b      	uxth	r3, r3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1a2      	bne.n	8009428 <HAL_SPI_TransmitReceive+0x224>
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d19d      	bne.n	8009428 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80094ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f000 f917 	bl	8009724 <SPI_EndRxTxTransaction>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d006      	beq.n	800950a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2220      	movs	r2, #32
 8009506:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009508:	e010      	b.n	800952c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d10b      	bne.n	800952a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009512:	2300      	movs	r3, #0
 8009514:	617b      	str	r3, [r7, #20]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	617b      	str	r3, [r7, #20]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	617b      	str	r3, [r7, #20]
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	e000      	b.n	800952c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800952a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2200      	movs	r2, #0
 8009538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800953c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009540:	4618      	mov	r0, r3
 8009542:	3730      	adds	r7, #48	; 0x30
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b088      	sub	sp, #32
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	603b      	str	r3, [r7, #0]
 8009554:	4613      	mov	r3, r2
 8009556:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009558:	f7fd fbda 	bl	8006d10 <HAL_GetTick>
 800955c:	4602      	mov	r2, r0
 800955e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009560:	1a9b      	subs	r3, r3, r2
 8009562:	683a      	ldr	r2, [r7, #0]
 8009564:	4413      	add	r3, r2
 8009566:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009568:	f7fd fbd2 	bl	8006d10 <HAL_GetTick>
 800956c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800956e:	4b39      	ldr	r3, [pc, #228]	; (8009654 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	015b      	lsls	r3, r3, #5
 8009574:	0d1b      	lsrs	r3, r3, #20
 8009576:	69fa      	ldr	r2, [r7, #28]
 8009578:	fb02 f303 	mul.w	r3, r2, r3
 800957c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800957e:	e054      	b.n	800962a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009586:	d050      	beq.n	800962a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009588:	f7fd fbc2 	bl	8006d10 <HAL_GetTick>
 800958c:	4602      	mov	r2, r0
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	1ad3      	subs	r3, r2, r3
 8009592:	69fa      	ldr	r2, [r7, #28]
 8009594:	429a      	cmp	r2, r3
 8009596:	d902      	bls.n	800959e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d13d      	bne.n	800961a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	685a      	ldr	r2, [r3, #4]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80095ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095b6:	d111      	bne.n	80095dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095c0:	d004      	beq.n	80095cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095ca:	d107      	bne.n	80095dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095e4:	d10f      	bne.n	8009606 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095f4:	601a      	str	r2, [r3, #0]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009604:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2200      	movs	r2, #0
 8009612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009616:	2303      	movs	r3, #3
 8009618:	e017      	b.n	800964a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d101      	bne.n	8009624 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009620:	2300      	movs	r3, #0
 8009622:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	3b01      	subs	r3, #1
 8009628:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	689a      	ldr	r2, [r3, #8]
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	4013      	ands	r3, r2
 8009634:	68ba      	ldr	r2, [r7, #8]
 8009636:	429a      	cmp	r2, r3
 8009638:	bf0c      	ite	eq
 800963a:	2301      	moveq	r3, #1
 800963c:	2300      	movne	r3, #0
 800963e:	b2db      	uxtb	r3, r3
 8009640:	461a      	mov	r2, r3
 8009642:	79fb      	ldrb	r3, [r7, #7]
 8009644:	429a      	cmp	r2, r3
 8009646:	d19b      	bne.n	8009580 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3720      	adds	r7, #32
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	200000a0 	.word	0x200000a0

08009658 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af02      	add	r7, sp, #8
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800966c:	d111      	bne.n	8009692 <SPI_EndRxTransaction+0x3a>
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009676:	d004      	beq.n	8009682 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009680:	d107      	bne.n	8009692 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009690:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800969a:	d12a      	bne.n	80096f2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096a4:	d012      	beq.n	80096cc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	9300      	str	r3, [sp, #0]
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	2200      	movs	r2, #0
 80096ae:	2180      	movs	r1, #128	; 0x80
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f7ff ff49 	bl	8009548 <SPI_WaitFlagStateUntilTimeout>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d02d      	beq.n	8009718 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096c0:	f043 0220 	orr.w	r2, r3, #32
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80096c8:	2303      	movs	r3, #3
 80096ca:	e026      	b.n	800971a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	2200      	movs	r2, #0
 80096d4:	2101      	movs	r1, #1
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f7ff ff36 	bl	8009548 <SPI_WaitFlagStateUntilTimeout>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d01a      	beq.n	8009718 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096e6:	f043 0220 	orr.w	r2, r3, #32
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80096ee:	2303      	movs	r3, #3
 80096f0:	e013      	b.n	800971a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	9300      	str	r3, [sp, #0]
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	2200      	movs	r2, #0
 80096fa:	2101      	movs	r1, #1
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	f7ff ff23 	bl	8009548 <SPI_WaitFlagStateUntilTimeout>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d007      	beq.n	8009718 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800970c:	f043 0220 	orr.w	r2, r3, #32
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009714:	2303      	movs	r3, #3
 8009716:	e000      	b.n	800971a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
	...

08009724 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b088      	sub	sp, #32
 8009728:	af02      	add	r7, sp, #8
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009730:	4b1b      	ldr	r3, [pc, #108]	; (80097a0 <SPI_EndRxTxTransaction+0x7c>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a1b      	ldr	r2, [pc, #108]	; (80097a4 <SPI_EndRxTxTransaction+0x80>)
 8009736:	fba2 2303 	umull	r2, r3, r2, r3
 800973a:	0d5b      	lsrs	r3, r3, #21
 800973c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009740:	fb02 f303 	mul.w	r3, r2, r3
 8009744:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800974e:	d112      	bne.n	8009776 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	2200      	movs	r2, #0
 8009758:	2180      	movs	r1, #128	; 0x80
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f7ff fef4 	bl	8009548 <SPI_WaitFlagStateUntilTimeout>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d016      	beq.n	8009794 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800976a:	f043 0220 	orr.w	r2, r3, #32
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009772:	2303      	movs	r3, #3
 8009774:	e00f      	b.n	8009796 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00a      	beq.n	8009792 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	3b01      	subs	r3, #1
 8009780:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800978c:	2b80      	cmp	r3, #128	; 0x80
 800978e:	d0f2      	beq.n	8009776 <SPI_EndRxTxTransaction+0x52>
 8009790:	e000      	b.n	8009794 <SPI_EndRxTxTransaction+0x70>
        break;
 8009792:	bf00      	nop
  }

  return HAL_OK;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	3718      	adds	r7, #24
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	200000a0 	.word	0x200000a0
 80097a4:	165e9f81 	.word	0x165e9f81

080097a8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d101      	bne.n	80097be <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e038      	b.n	8009830 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d106      	bne.n	80097d8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f7f7 fd9e 	bl	8001314 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	3308      	adds	r3, #8
 80097e0:	4619      	mov	r1, r3
 80097e2:	4610      	mov	r0, r2
 80097e4:	f001 ffee 	bl	800b7c4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6818      	ldr	r0, [r3, #0]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	461a      	mov	r2, r3
 80097f2:	68b9      	ldr	r1, [r7, #8]
 80097f4:	f002 f850 	bl	800b898 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6858      	ldr	r0, [r3, #4]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	689a      	ldr	r2, [r3, #8]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009804:	6879      	ldr	r1, [r7, #4]
 8009806:	f002 f87d 	bl	800b904 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	6892      	ldr	r2, [r2, #8]
 8009812:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	6892      	ldr	r2, [r2, #8]
 800981e:	f041 0101 	orr.w	r1, r1, #1
 8009822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2201      	movs	r2, #1
 800982a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800982e:	2300      	movs	r3, #0
}
 8009830:	4618      	mov	r0, r3
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d101      	bne.n	800984a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	e041      	b.n	80098ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009850:	b2db      	uxtb	r3, r3
 8009852:	2b00      	cmp	r3, #0
 8009854:	d106      	bne.n	8009864 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f7fc fd86 	bl	8006370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2202      	movs	r2, #2
 8009868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	3304      	adds	r3, #4
 8009874:	4619      	mov	r1, r3
 8009876:	4610      	mov	r0, r2
 8009878:	f000 fbb2 	bl	8009fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2201      	movs	r2, #1
 8009880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2201      	movs	r2, #1
 80098a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2201      	movs	r2, #1
 80098a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2201      	movs	r2, #1
 80098b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3708      	adds	r7, #8
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
	...

080098d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d001      	beq.n	80098f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80098ec:	2301      	movs	r3, #1
 80098ee:	e04e      	b.n	800998e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2202      	movs	r2, #2
 80098f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	68da      	ldr	r2, [r3, #12]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f042 0201 	orr.w	r2, r2, #1
 8009906:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a23      	ldr	r2, [pc, #140]	; (800999c <HAL_TIM_Base_Start_IT+0xc4>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d022      	beq.n	8009958 <HAL_TIM_Base_Start_IT+0x80>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800991a:	d01d      	beq.n	8009958 <HAL_TIM_Base_Start_IT+0x80>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a1f      	ldr	r2, [pc, #124]	; (80099a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d018      	beq.n	8009958 <HAL_TIM_Base_Start_IT+0x80>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a1e      	ldr	r2, [pc, #120]	; (80099a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d013      	beq.n	8009958 <HAL_TIM_Base_Start_IT+0x80>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a1c      	ldr	r2, [pc, #112]	; (80099a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d00e      	beq.n	8009958 <HAL_TIM_Base_Start_IT+0x80>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a1b      	ldr	r2, [pc, #108]	; (80099ac <HAL_TIM_Base_Start_IT+0xd4>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d009      	beq.n	8009958 <HAL_TIM_Base_Start_IT+0x80>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a19      	ldr	r2, [pc, #100]	; (80099b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d004      	beq.n	8009958 <HAL_TIM_Base_Start_IT+0x80>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a18      	ldr	r2, [pc, #96]	; (80099b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d111      	bne.n	800997c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	f003 0307 	and.w	r3, r3, #7
 8009962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2b06      	cmp	r3, #6
 8009968:	d010      	beq.n	800998c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f042 0201 	orr.w	r2, r2, #1
 8009978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800997a:	e007      	b.n	800998c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f042 0201 	orr.w	r2, r2, #1
 800998a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3714      	adds	r7, #20
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	40010000 	.word	0x40010000
 80099a0:	40000400 	.word	0x40000400
 80099a4:	40000800 	.word	0x40000800
 80099a8:	40000c00 	.word	0x40000c00
 80099ac:	40010400 	.word	0x40010400
 80099b0:	40014000 	.word	0x40014000
 80099b4:	40001800 	.word	0x40001800

080099b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d101      	bne.n	80099ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	e041      	b.n	8009a4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d106      	bne.n	80099e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f839 	bl	8009a56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2202      	movs	r2, #2
 80099e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	3304      	adds	r3, #4
 80099f4:	4619      	mov	r1, r3
 80099f6:	4610      	mov	r0, r2
 80099f8:	f000 faf2 	bl	8009fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2201      	movs	r2, #1
 8009a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2201      	movs	r2, #1
 8009a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2201      	movs	r2, #1
 8009a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009a56:	b480      	push	{r7}
 8009a58:	b083      	sub	sp, #12
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009a5e:	bf00      	nop
 8009a60:	370c      	adds	r7, #12
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr

08009a6a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b082      	sub	sp, #8
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	f003 0302 	and.w	r3, r3, #2
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d122      	bne.n	8009ac6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	f003 0302 	and.w	r3, r3, #2
 8009a8a:	2b02      	cmp	r3, #2
 8009a8c:	d11b      	bne.n	8009ac6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f06f 0202 	mvn.w	r2, #2
 8009a96:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	699b      	ldr	r3, [r3, #24]
 8009aa4:	f003 0303 	and.w	r3, r3, #3
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d003      	beq.n	8009ab4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 fa78 	bl	8009fa2 <HAL_TIM_IC_CaptureCallback>
 8009ab2:	e005      	b.n	8009ac0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fa6a 	bl	8009f8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 fa7b 	bl	8009fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	f003 0304 	and.w	r3, r3, #4
 8009ad0:	2b04      	cmp	r3, #4
 8009ad2:	d122      	bne.n	8009b1a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	f003 0304 	and.w	r3, r3, #4
 8009ade:	2b04      	cmp	r3, #4
 8009ae0:	d11b      	bne.n	8009b1a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f06f 0204 	mvn.w	r2, #4
 8009aea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2202      	movs	r2, #2
 8009af0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	699b      	ldr	r3, [r3, #24]
 8009af8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d003      	beq.n	8009b08 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fa4e 	bl	8009fa2 <HAL_TIM_IC_CaptureCallback>
 8009b06:	e005      	b.n	8009b14 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 fa40 	bl	8009f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fa51 	bl	8009fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	f003 0308 	and.w	r3, r3, #8
 8009b24:	2b08      	cmp	r3, #8
 8009b26:	d122      	bne.n	8009b6e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	f003 0308 	and.w	r3, r3, #8
 8009b32:	2b08      	cmp	r3, #8
 8009b34:	d11b      	bne.n	8009b6e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f06f 0208 	mvn.w	r2, #8
 8009b3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2204      	movs	r2, #4
 8009b44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	69db      	ldr	r3, [r3, #28]
 8009b4c:	f003 0303 	and.w	r3, r3, #3
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d003      	beq.n	8009b5c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fa24 	bl	8009fa2 <HAL_TIM_IC_CaptureCallback>
 8009b5a:	e005      	b.n	8009b68 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 fa16 	bl	8009f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fa27 	bl	8009fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	691b      	ldr	r3, [r3, #16]
 8009b74:	f003 0310 	and.w	r3, r3, #16
 8009b78:	2b10      	cmp	r3, #16
 8009b7a:	d122      	bne.n	8009bc2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	f003 0310 	and.w	r3, r3, #16
 8009b86:	2b10      	cmp	r3, #16
 8009b88:	d11b      	bne.n	8009bc2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f06f 0210 	mvn.w	r2, #16
 8009b92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2208      	movs	r2, #8
 8009b98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	69db      	ldr	r3, [r3, #28]
 8009ba0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d003      	beq.n	8009bb0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f9fa 	bl	8009fa2 <HAL_TIM_IC_CaptureCallback>
 8009bae:	e005      	b.n	8009bbc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 f9ec 	bl	8009f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f9fd 	bl	8009fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	691b      	ldr	r3, [r3, #16]
 8009bc8:	f003 0301 	and.w	r3, r3, #1
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d10e      	bne.n	8009bee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	f003 0301 	and.w	r3, r3, #1
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d107      	bne.n	8009bee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f06f 0201 	mvn.w	r2, #1
 8009be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f7fa ffc3 	bl	8004b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bf8:	2b80      	cmp	r3, #128	; 0x80
 8009bfa:	d10e      	bne.n	8009c1a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c06:	2b80      	cmp	r3, #128	; 0x80
 8009c08:	d107      	bne.n	8009c1a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fd53 	bl	800a6c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c24:	2b40      	cmp	r3, #64	; 0x40
 8009c26:	d10e      	bne.n	8009c46 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c32:	2b40      	cmp	r3, #64	; 0x40
 8009c34:	d107      	bne.n	8009c46 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 f9c2 	bl	8009fca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	f003 0320 	and.w	r3, r3, #32
 8009c50:	2b20      	cmp	r3, #32
 8009c52:	d10e      	bne.n	8009c72 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	f003 0320 	and.w	r3, r3, #32
 8009c5e:	2b20      	cmp	r3, #32
 8009c60:	d107      	bne.n	8009c72 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f06f 0220 	mvn.w	r2, #32
 8009c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 fd1d 	bl	800a6ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c72:	bf00      	nop
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
	...

08009c7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b086      	sub	sp, #24
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d101      	bne.n	8009c9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009c96:	2302      	movs	r3, #2
 8009c98:	e0ae      	b.n	8009df8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2b0c      	cmp	r3, #12
 8009ca6:	f200 809f 	bhi.w	8009de8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009caa:	a201      	add	r2, pc, #4	; (adr r2, 8009cb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb0:	08009ce5 	.word	0x08009ce5
 8009cb4:	08009de9 	.word	0x08009de9
 8009cb8:	08009de9 	.word	0x08009de9
 8009cbc:	08009de9 	.word	0x08009de9
 8009cc0:	08009d25 	.word	0x08009d25
 8009cc4:	08009de9 	.word	0x08009de9
 8009cc8:	08009de9 	.word	0x08009de9
 8009ccc:	08009de9 	.word	0x08009de9
 8009cd0:	08009d67 	.word	0x08009d67
 8009cd4:	08009de9 	.word	0x08009de9
 8009cd8:	08009de9 	.word	0x08009de9
 8009cdc:	08009de9 	.word	0x08009de9
 8009ce0:	08009da7 	.word	0x08009da7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	68b9      	ldr	r1, [r7, #8]
 8009cea:	4618      	mov	r0, r3
 8009cec:	f000 fa18 	bl	800a120 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	699a      	ldr	r2, [r3, #24]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f042 0208 	orr.w	r2, r2, #8
 8009cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	699a      	ldr	r2, [r3, #24]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f022 0204 	bic.w	r2, r2, #4
 8009d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	6999      	ldr	r1, [r3, #24]
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	691a      	ldr	r2, [r3, #16]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	430a      	orrs	r2, r1
 8009d20:	619a      	str	r2, [r3, #24]
      break;
 8009d22:	e064      	b.n	8009dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	68b9      	ldr	r1, [r7, #8]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f000 fa68 	bl	800a200 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	699a      	ldr	r2, [r3, #24]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	699a      	ldr	r2, [r3, #24]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6999      	ldr	r1, [r3, #24]
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	691b      	ldr	r3, [r3, #16]
 8009d5a:	021a      	lsls	r2, r3, #8
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	430a      	orrs	r2, r1
 8009d62:	619a      	str	r2, [r3, #24]
      break;
 8009d64:	e043      	b.n	8009dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68b9      	ldr	r1, [r7, #8]
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f000 fabd 	bl	800a2ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	69da      	ldr	r2, [r3, #28]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f042 0208 	orr.w	r2, r2, #8
 8009d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	69da      	ldr	r2, [r3, #28]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f022 0204 	bic.w	r2, r2, #4
 8009d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	69d9      	ldr	r1, [r3, #28]
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	691a      	ldr	r2, [r3, #16]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	430a      	orrs	r2, r1
 8009da2:	61da      	str	r2, [r3, #28]
      break;
 8009da4:	e023      	b.n	8009dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	68b9      	ldr	r1, [r7, #8]
 8009dac:	4618      	mov	r0, r3
 8009dae:	f000 fb11 	bl	800a3d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	69da      	ldr	r2, [r3, #28]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	69da      	ldr	r2, [r3, #28]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	69d9      	ldr	r1, [r3, #28]
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	691b      	ldr	r3, [r3, #16]
 8009ddc:	021a      	lsls	r2, r3, #8
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	430a      	orrs	r2, r1
 8009de4:	61da      	str	r2, [r3, #28]
      break;
 8009de6:	e002      	b.n	8009dee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009de8:	2301      	movs	r3, #1
 8009dea:	75fb      	strb	r3, [r7, #23]
      break;
 8009dec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2200      	movs	r2, #0
 8009df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3718      	adds	r7, #24
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d101      	bne.n	8009e1c <HAL_TIM_ConfigClockSource+0x1c>
 8009e18:	2302      	movs	r3, #2
 8009e1a:	e0b4      	b.n	8009f86 <HAL_TIM_ConfigClockSource+0x186>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2202      	movs	r2, #2
 8009e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68ba      	ldr	r2, [r7, #8]
 8009e4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e54:	d03e      	beq.n	8009ed4 <HAL_TIM_ConfigClockSource+0xd4>
 8009e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e5a:	f200 8087 	bhi.w	8009f6c <HAL_TIM_ConfigClockSource+0x16c>
 8009e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e62:	f000 8086 	beq.w	8009f72 <HAL_TIM_ConfigClockSource+0x172>
 8009e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e6a:	d87f      	bhi.n	8009f6c <HAL_TIM_ConfigClockSource+0x16c>
 8009e6c:	2b70      	cmp	r3, #112	; 0x70
 8009e6e:	d01a      	beq.n	8009ea6 <HAL_TIM_ConfigClockSource+0xa6>
 8009e70:	2b70      	cmp	r3, #112	; 0x70
 8009e72:	d87b      	bhi.n	8009f6c <HAL_TIM_ConfigClockSource+0x16c>
 8009e74:	2b60      	cmp	r3, #96	; 0x60
 8009e76:	d050      	beq.n	8009f1a <HAL_TIM_ConfigClockSource+0x11a>
 8009e78:	2b60      	cmp	r3, #96	; 0x60
 8009e7a:	d877      	bhi.n	8009f6c <HAL_TIM_ConfigClockSource+0x16c>
 8009e7c:	2b50      	cmp	r3, #80	; 0x50
 8009e7e:	d03c      	beq.n	8009efa <HAL_TIM_ConfigClockSource+0xfa>
 8009e80:	2b50      	cmp	r3, #80	; 0x50
 8009e82:	d873      	bhi.n	8009f6c <HAL_TIM_ConfigClockSource+0x16c>
 8009e84:	2b40      	cmp	r3, #64	; 0x40
 8009e86:	d058      	beq.n	8009f3a <HAL_TIM_ConfigClockSource+0x13a>
 8009e88:	2b40      	cmp	r3, #64	; 0x40
 8009e8a:	d86f      	bhi.n	8009f6c <HAL_TIM_ConfigClockSource+0x16c>
 8009e8c:	2b30      	cmp	r3, #48	; 0x30
 8009e8e:	d064      	beq.n	8009f5a <HAL_TIM_ConfigClockSource+0x15a>
 8009e90:	2b30      	cmp	r3, #48	; 0x30
 8009e92:	d86b      	bhi.n	8009f6c <HAL_TIM_ConfigClockSource+0x16c>
 8009e94:	2b20      	cmp	r3, #32
 8009e96:	d060      	beq.n	8009f5a <HAL_TIM_ConfigClockSource+0x15a>
 8009e98:	2b20      	cmp	r3, #32
 8009e9a:	d867      	bhi.n	8009f6c <HAL_TIM_ConfigClockSource+0x16c>
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d05c      	beq.n	8009f5a <HAL_TIM_ConfigClockSource+0x15a>
 8009ea0:	2b10      	cmp	r3, #16
 8009ea2:	d05a      	beq.n	8009f5a <HAL_TIM_ConfigClockSource+0x15a>
 8009ea4:	e062      	b.n	8009f6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6818      	ldr	r0, [r3, #0]
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	6899      	ldr	r1, [r3, #8]
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	685a      	ldr	r2, [r3, #4]
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	f000 fb5d 	bl	800a574 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009ec8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	68ba      	ldr	r2, [r7, #8]
 8009ed0:	609a      	str	r2, [r3, #8]
      break;
 8009ed2:	e04f      	b.n	8009f74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6818      	ldr	r0, [r3, #0]
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	6899      	ldr	r1, [r3, #8]
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	685a      	ldr	r2, [r3, #4]
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	f000 fb46 	bl	800a574 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	689a      	ldr	r2, [r3, #8]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ef6:	609a      	str	r2, [r3, #8]
      break;
 8009ef8:	e03c      	b.n	8009f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6818      	ldr	r0, [r3, #0]
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	6859      	ldr	r1, [r3, #4]
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	461a      	mov	r2, r3
 8009f08:	f000 faba 	bl	800a480 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2150      	movs	r1, #80	; 0x50
 8009f12:	4618      	mov	r0, r3
 8009f14:	f000 fb13 	bl	800a53e <TIM_ITRx_SetConfig>
      break;
 8009f18:	e02c      	b.n	8009f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6818      	ldr	r0, [r3, #0]
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	6859      	ldr	r1, [r3, #4]
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	461a      	mov	r2, r3
 8009f28:	f000 fad9 	bl	800a4de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2160      	movs	r1, #96	; 0x60
 8009f32:	4618      	mov	r0, r3
 8009f34:	f000 fb03 	bl	800a53e <TIM_ITRx_SetConfig>
      break;
 8009f38:	e01c      	b.n	8009f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6818      	ldr	r0, [r3, #0]
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	6859      	ldr	r1, [r3, #4]
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	461a      	mov	r2, r3
 8009f48:	f000 fa9a 	bl	800a480 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2140      	movs	r1, #64	; 0x40
 8009f52:	4618      	mov	r0, r3
 8009f54:	f000 faf3 	bl	800a53e <TIM_ITRx_SetConfig>
      break;
 8009f58:	e00c      	b.n	8009f74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4619      	mov	r1, r3
 8009f64:	4610      	mov	r0, r2
 8009f66:	f000 faea 	bl	800a53e <TIM_ITRx_SetConfig>
      break;
 8009f6a:	e003      	b.n	8009f74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8009f70:	e000      	b.n	8009f74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009f72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2201      	movs	r2, #1
 8009f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3710      	adds	r7, #16
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f8e:	b480      	push	{r7}
 8009f90:	b083      	sub	sp, #12
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f96:	bf00      	nop
 8009f98:	370c      	adds	r7, #12
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr

08009fa2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009fa2:	b480      	push	{r7}
 8009fa4:	b083      	sub	sp, #12
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009faa:	bf00      	nop
 8009fac:	370c      	adds	r7, #12
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr

08009fb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009fb6:	b480      	push	{r7}
 8009fb8:	b083      	sub	sp, #12
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009fbe:	bf00      	nop
 8009fc0:	370c      	adds	r7, #12
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr

08009fca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009fca:	b480      	push	{r7}
 8009fcc:	b083      	sub	sp, #12
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009fd2:	bf00      	nop
 8009fd4:	370c      	adds	r7, #12
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr
	...

08009fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4a40      	ldr	r2, [pc, #256]	; (800a0f4 <TIM_Base_SetConfig+0x114>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d013      	beq.n	800a020 <TIM_Base_SetConfig+0x40>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ffe:	d00f      	beq.n	800a020 <TIM_Base_SetConfig+0x40>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4a3d      	ldr	r2, [pc, #244]	; (800a0f8 <TIM_Base_SetConfig+0x118>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d00b      	beq.n	800a020 <TIM_Base_SetConfig+0x40>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a3c      	ldr	r2, [pc, #240]	; (800a0fc <TIM_Base_SetConfig+0x11c>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d007      	beq.n	800a020 <TIM_Base_SetConfig+0x40>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4a3b      	ldr	r2, [pc, #236]	; (800a100 <TIM_Base_SetConfig+0x120>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d003      	beq.n	800a020 <TIM_Base_SetConfig+0x40>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	4a3a      	ldr	r2, [pc, #232]	; (800a104 <TIM_Base_SetConfig+0x124>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d108      	bne.n	800a032 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	68fa      	ldr	r2, [r7, #12]
 800a02e:	4313      	orrs	r3, r2
 800a030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	4a2f      	ldr	r2, [pc, #188]	; (800a0f4 <TIM_Base_SetConfig+0x114>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d02b      	beq.n	800a092 <TIM_Base_SetConfig+0xb2>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a040:	d027      	beq.n	800a092 <TIM_Base_SetConfig+0xb2>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	4a2c      	ldr	r2, [pc, #176]	; (800a0f8 <TIM_Base_SetConfig+0x118>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d023      	beq.n	800a092 <TIM_Base_SetConfig+0xb2>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4a2b      	ldr	r2, [pc, #172]	; (800a0fc <TIM_Base_SetConfig+0x11c>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d01f      	beq.n	800a092 <TIM_Base_SetConfig+0xb2>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a2a      	ldr	r2, [pc, #168]	; (800a100 <TIM_Base_SetConfig+0x120>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d01b      	beq.n	800a092 <TIM_Base_SetConfig+0xb2>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a29      	ldr	r2, [pc, #164]	; (800a104 <TIM_Base_SetConfig+0x124>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d017      	beq.n	800a092 <TIM_Base_SetConfig+0xb2>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4a28      	ldr	r2, [pc, #160]	; (800a108 <TIM_Base_SetConfig+0x128>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d013      	beq.n	800a092 <TIM_Base_SetConfig+0xb2>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4a27      	ldr	r2, [pc, #156]	; (800a10c <TIM_Base_SetConfig+0x12c>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d00f      	beq.n	800a092 <TIM_Base_SetConfig+0xb2>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	4a26      	ldr	r2, [pc, #152]	; (800a110 <TIM_Base_SetConfig+0x130>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d00b      	beq.n	800a092 <TIM_Base_SetConfig+0xb2>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4a25      	ldr	r2, [pc, #148]	; (800a114 <TIM_Base_SetConfig+0x134>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d007      	beq.n	800a092 <TIM_Base_SetConfig+0xb2>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	4a24      	ldr	r2, [pc, #144]	; (800a118 <TIM_Base_SetConfig+0x138>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d003      	beq.n	800a092 <TIM_Base_SetConfig+0xb2>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4a23      	ldr	r2, [pc, #140]	; (800a11c <TIM_Base_SetConfig+0x13c>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d108      	bne.n	800a0a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	695b      	ldr	r3, [r3, #20]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	689a      	ldr	r2, [r3, #8]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4a0a      	ldr	r2, [pc, #40]	; (800a0f4 <TIM_Base_SetConfig+0x114>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d003      	beq.n	800a0d8 <TIM_Base_SetConfig+0xf8>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4a0c      	ldr	r2, [pc, #48]	; (800a104 <TIM_Base_SetConfig+0x124>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d103      	bne.n	800a0e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	691a      	ldr	r2, [r3, #16]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	615a      	str	r2, [r3, #20]
}
 800a0e6:	bf00      	nop
 800a0e8:	3714      	adds	r7, #20
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr
 800a0f2:	bf00      	nop
 800a0f4:	40010000 	.word	0x40010000
 800a0f8:	40000400 	.word	0x40000400
 800a0fc:	40000800 	.word	0x40000800
 800a100:	40000c00 	.word	0x40000c00
 800a104:	40010400 	.word	0x40010400
 800a108:	40014000 	.word	0x40014000
 800a10c:	40014400 	.word	0x40014400
 800a110:	40014800 	.word	0x40014800
 800a114:	40001800 	.word	0x40001800
 800a118:	40001c00 	.word	0x40001c00
 800a11c:	40002000 	.word	0x40002000

0800a120 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a120:	b480      	push	{r7}
 800a122:	b087      	sub	sp, #28
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a1b      	ldr	r3, [r3, #32]
 800a12e:	f023 0201 	bic.w	r2, r3, #1
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a1b      	ldr	r3, [r3, #32]
 800a13a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a14e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f023 0303 	bic.w	r3, r3, #3
 800a156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68fa      	ldr	r2, [r7, #12]
 800a15e:	4313      	orrs	r3, r2
 800a160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	f023 0302 	bic.w	r3, r3, #2
 800a168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	697a      	ldr	r2, [r7, #20]
 800a170:	4313      	orrs	r3, r2
 800a172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a20      	ldr	r2, [pc, #128]	; (800a1f8 <TIM_OC1_SetConfig+0xd8>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d003      	beq.n	800a184 <TIM_OC1_SetConfig+0x64>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a1f      	ldr	r2, [pc, #124]	; (800a1fc <TIM_OC1_SetConfig+0xdc>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d10c      	bne.n	800a19e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	f023 0308 	bic.w	r3, r3, #8
 800a18a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	697a      	ldr	r2, [r7, #20]
 800a192:	4313      	orrs	r3, r2
 800a194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	f023 0304 	bic.w	r3, r3, #4
 800a19c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a15      	ldr	r2, [pc, #84]	; (800a1f8 <TIM_OC1_SetConfig+0xd8>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d003      	beq.n	800a1ae <TIM_OC1_SetConfig+0x8e>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4a14      	ldr	r2, [pc, #80]	; (800a1fc <TIM_OC1_SetConfig+0xdc>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d111      	bne.n	800a1d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	695b      	ldr	r3, [r3, #20]
 800a1c2:	693a      	ldr	r2, [r7, #16]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	693a      	ldr	r2, [r7, #16]
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	693a      	ldr	r2, [r7, #16]
 800a1d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	685a      	ldr	r2, [r3, #4]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	697a      	ldr	r2, [r7, #20]
 800a1ea:	621a      	str	r2, [r3, #32]
}
 800a1ec:	bf00      	nop
 800a1ee:	371c      	adds	r7, #28
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr
 800a1f8:	40010000 	.word	0x40010000
 800a1fc:	40010400 	.word	0x40010400

0800a200 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a200:	b480      	push	{r7}
 800a202:	b087      	sub	sp, #28
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	f023 0210 	bic.w	r2, r3, #16
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a1b      	ldr	r3, [r3, #32]
 800a21a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	699b      	ldr	r3, [r3, #24]
 800a226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a22e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	021b      	lsls	r3, r3, #8
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	4313      	orrs	r3, r2
 800a242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	f023 0320 	bic.w	r3, r3, #32
 800a24a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	689b      	ldr	r3, [r3, #8]
 800a250:	011b      	lsls	r3, r3, #4
 800a252:	697a      	ldr	r2, [r7, #20]
 800a254:	4313      	orrs	r3, r2
 800a256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	4a22      	ldr	r2, [pc, #136]	; (800a2e4 <TIM_OC2_SetConfig+0xe4>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d003      	beq.n	800a268 <TIM_OC2_SetConfig+0x68>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	4a21      	ldr	r2, [pc, #132]	; (800a2e8 <TIM_OC2_SetConfig+0xe8>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d10d      	bne.n	800a284 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a26e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	011b      	lsls	r3, r3, #4
 800a276:	697a      	ldr	r2, [r7, #20]
 800a278:	4313      	orrs	r3, r2
 800a27a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a282:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4a17      	ldr	r2, [pc, #92]	; (800a2e4 <TIM_OC2_SetConfig+0xe4>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d003      	beq.n	800a294 <TIM_OC2_SetConfig+0x94>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	4a16      	ldr	r2, [pc, #88]	; (800a2e8 <TIM_OC2_SetConfig+0xe8>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d113      	bne.n	800a2bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a29a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	695b      	ldr	r3, [r3, #20]
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	693a      	ldr	r2, [r7, #16]
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	699b      	ldr	r3, [r3, #24]
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	693a      	ldr	r2, [r7, #16]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	693a      	ldr	r2, [r7, #16]
 800a2c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	685a      	ldr	r2, [r3, #4]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	697a      	ldr	r2, [r7, #20]
 800a2d4:	621a      	str	r2, [r3, #32]
}
 800a2d6:	bf00      	nop
 800a2d8:	371c      	adds	r7, #28
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop
 800a2e4:	40010000 	.word	0x40010000
 800a2e8:	40010400 	.word	0x40010400

0800a2ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b087      	sub	sp, #28
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a1b      	ldr	r3, [r3, #32]
 800a2fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a1b      	ldr	r3, [r3, #32]
 800a306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	69db      	ldr	r3, [r3, #28]
 800a312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a31a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f023 0303 	bic.w	r3, r3, #3
 800a322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	021b      	lsls	r3, r3, #8
 800a33c:	697a      	ldr	r2, [r7, #20]
 800a33e:	4313      	orrs	r3, r2
 800a340:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4a21      	ldr	r2, [pc, #132]	; (800a3cc <TIM_OC3_SetConfig+0xe0>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d003      	beq.n	800a352 <TIM_OC3_SetConfig+0x66>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4a20      	ldr	r2, [pc, #128]	; (800a3d0 <TIM_OC3_SetConfig+0xe4>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d10d      	bne.n	800a36e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a358:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	021b      	lsls	r3, r3, #8
 800a360:	697a      	ldr	r2, [r7, #20]
 800a362:	4313      	orrs	r3, r2
 800a364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a36c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	4a16      	ldr	r2, [pc, #88]	; (800a3cc <TIM_OC3_SetConfig+0xe0>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d003      	beq.n	800a37e <TIM_OC3_SetConfig+0x92>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	4a15      	ldr	r2, [pc, #84]	; (800a3d0 <TIM_OC3_SetConfig+0xe4>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d113      	bne.n	800a3a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a38c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	695b      	ldr	r3, [r3, #20]
 800a392:	011b      	lsls	r3, r3, #4
 800a394:	693a      	ldr	r2, [r7, #16]
 800a396:	4313      	orrs	r3, r2
 800a398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	699b      	ldr	r3, [r3, #24]
 800a39e:	011b      	lsls	r3, r3, #4
 800a3a0:	693a      	ldr	r2, [r7, #16]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	693a      	ldr	r2, [r7, #16]
 800a3aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	68fa      	ldr	r2, [r7, #12]
 800a3b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	685a      	ldr	r2, [r3, #4]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	697a      	ldr	r2, [r7, #20]
 800a3be:	621a      	str	r2, [r3, #32]
}
 800a3c0:	bf00      	nop
 800a3c2:	371c      	adds	r7, #28
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr
 800a3cc:	40010000 	.word	0x40010000
 800a3d0:	40010400 	.word	0x40010400

0800a3d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b087      	sub	sp, #28
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a1b      	ldr	r3, [r3, #32]
 800a3e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a1b      	ldr	r3, [r3, #32]
 800a3ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	69db      	ldr	r3, [r3, #28]
 800a3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a40a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	021b      	lsls	r3, r3, #8
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	4313      	orrs	r3, r2
 800a416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a41e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	031b      	lsls	r3, r3, #12
 800a426:	693a      	ldr	r2, [r7, #16]
 800a428:	4313      	orrs	r3, r2
 800a42a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4a12      	ldr	r2, [pc, #72]	; (800a478 <TIM_OC4_SetConfig+0xa4>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d003      	beq.n	800a43c <TIM_OC4_SetConfig+0x68>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	4a11      	ldr	r2, [pc, #68]	; (800a47c <TIM_OC4_SetConfig+0xa8>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d109      	bne.n	800a450 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a442:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	695b      	ldr	r3, [r3, #20]
 800a448:	019b      	lsls	r3, r3, #6
 800a44a:	697a      	ldr	r2, [r7, #20]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	697a      	ldr	r2, [r7, #20]
 800a454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	685a      	ldr	r2, [r3, #4]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	693a      	ldr	r2, [r7, #16]
 800a468:	621a      	str	r2, [r3, #32]
}
 800a46a:	bf00      	nop
 800a46c:	371c      	adds	r7, #28
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop
 800a478:	40010000 	.word	0x40010000
 800a47c:	40010400 	.word	0x40010400

0800a480 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a480:	b480      	push	{r7}
 800a482:	b087      	sub	sp, #28
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	6a1b      	ldr	r3, [r3, #32]
 800a490:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	6a1b      	ldr	r3, [r3, #32]
 800a496:	f023 0201 	bic.w	r2, r3, #1
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	699b      	ldr	r3, [r3, #24]
 800a4a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a4aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	011b      	lsls	r3, r3, #4
 800a4b0:	693a      	ldr	r2, [r7, #16]
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	f023 030a 	bic.w	r3, r3, #10
 800a4bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a4be:	697a      	ldr	r2, [r7, #20]
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	693a      	ldr	r2, [r7, #16]
 800a4ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	697a      	ldr	r2, [r7, #20]
 800a4d0:	621a      	str	r2, [r3, #32]
}
 800a4d2:	bf00      	nop
 800a4d4:	371c      	adds	r7, #28
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr

0800a4de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4de:	b480      	push	{r7}
 800a4e0:	b087      	sub	sp, #28
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	60f8      	str	r0, [r7, #12]
 800a4e6:	60b9      	str	r1, [r7, #8]
 800a4e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	6a1b      	ldr	r3, [r3, #32]
 800a4ee:	f023 0210 	bic.w	r2, r3, #16
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	699b      	ldr	r3, [r3, #24]
 800a4fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6a1b      	ldr	r3, [r3, #32]
 800a500:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a508:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	031b      	lsls	r3, r3, #12
 800a50e:	697a      	ldr	r2, [r7, #20]
 800a510:	4313      	orrs	r3, r2
 800a512:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a51a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	011b      	lsls	r3, r3, #4
 800a520:	693a      	ldr	r2, [r7, #16]
 800a522:	4313      	orrs	r3, r2
 800a524:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	697a      	ldr	r2, [r7, #20]
 800a52a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	693a      	ldr	r2, [r7, #16]
 800a530:	621a      	str	r2, [r3, #32]
}
 800a532:	bf00      	nop
 800a534:	371c      	adds	r7, #28
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr

0800a53e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a53e:	b480      	push	{r7}
 800a540:	b085      	sub	sp, #20
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
 800a546:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a554:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a556:	683a      	ldr	r2, [r7, #0]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	4313      	orrs	r3, r2
 800a55c:	f043 0307 	orr.w	r3, r3, #7
 800a560:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	68fa      	ldr	r2, [r7, #12]
 800a566:	609a      	str	r2, [r3, #8]
}
 800a568:	bf00      	nop
 800a56a:	3714      	adds	r7, #20
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a574:	b480      	push	{r7}
 800a576:	b087      	sub	sp, #28
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	607a      	str	r2, [r7, #4]
 800a580:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a58e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	021a      	lsls	r2, r3, #8
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	431a      	orrs	r2, r3
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	4313      	orrs	r3, r2
 800a59c:	697a      	ldr	r2, [r7, #20]
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	697a      	ldr	r2, [r7, #20]
 800a5a6:	609a      	str	r2, [r3, #8]
}
 800a5a8:	bf00      	nop
 800a5aa:	371c      	adds	r7, #28
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d101      	bne.n	800a5cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	e05a      	b.n	800a682 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2202      	movs	r2, #2
 800a5d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	68fa      	ldr	r2, [r7, #12]
 800a604:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a21      	ldr	r2, [pc, #132]	; (800a690 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d022      	beq.n	800a656 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a618:	d01d      	beq.n	800a656 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a1d      	ldr	r2, [pc, #116]	; (800a694 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d018      	beq.n	800a656 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a1b      	ldr	r2, [pc, #108]	; (800a698 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d013      	beq.n	800a656 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a1a      	ldr	r2, [pc, #104]	; (800a69c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d00e      	beq.n	800a656 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a18      	ldr	r2, [pc, #96]	; (800a6a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d009      	beq.n	800a656 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a17      	ldr	r2, [pc, #92]	; (800a6a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d004      	beq.n	800a656 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a15      	ldr	r2, [pc, #84]	; (800a6a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d10c      	bne.n	800a670 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a65c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	68ba      	ldr	r2, [r7, #8]
 800a664:	4313      	orrs	r3, r2
 800a666:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	68ba      	ldr	r2, [r7, #8]
 800a66e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	3714      	adds	r7, #20
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop
 800a690:	40010000 	.word	0x40010000
 800a694:	40000400 	.word	0x40000400
 800a698:	40000800 	.word	0x40000800
 800a69c:	40000c00 	.word	0x40000c00
 800a6a0:	40010400 	.word	0x40010400
 800a6a4:	40014000 	.word	0x40014000
 800a6a8:	40001800 	.word	0x40001800

0800a6ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a6b4:	bf00      	nop
 800a6b6:	370c      	adds	r7, #12
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr

0800a6c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a6c8:	bf00      	nop
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr

0800a6d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d101      	bne.n	800a6e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e03f      	b.n	800a766 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d106      	bne.n	800a700 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f7fc fa28 	bl	8006b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2224      	movs	r2, #36	; 0x24
 800a704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68da      	ldr	r2, [r3, #12]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a716:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 fddf 	bl	800b2dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	691a      	ldr	r2, [r3, #16]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a72c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	695a      	ldr	r2, [r3, #20]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a73c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	68da      	ldr	r2, [r3, #12]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a74c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2220      	movs	r2, #32
 800a758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2220      	movs	r2, #32
 800a760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3708      	adds	r7, #8
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}

0800a76e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a76e:	b580      	push	{r7, lr}
 800a770:	b08a      	sub	sp, #40	; 0x28
 800a772:	af02      	add	r7, sp, #8
 800a774:	60f8      	str	r0, [r7, #12]
 800a776:	60b9      	str	r1, [r7, #8]
 800a778:	603b      	str	r3, [r7, #0]
 800a77a:	4613      	mov	r3, r2
 800a77c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a77e:	2300      	movs	r3, #0
 800a780:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	2b20      	cmp	r3, #32
 800a78c:	d17c      	bne.n	800a888 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d002      	beq.n	800a79a <HAL_UART_Transmit+0x2c>
 800a794:	88fb      	ldrh	r3, [r7, #6]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d101      	bne.n	800a79e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	e075      	b.n	800a88a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d101      	bne.n	800a7ac <HAL_UART_Transmit+0x3e>
 800a7a8:	2302      	movs	r3, #2
 800a7aa:	e06e      	b.n	800a88a <HAL_UART_Transmit+0x11c>
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2221      	movs	r2, #33	; 0x21
 800a7be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a7c2:	f7fc faa5 	bl	8006d10 <HAL_GetTick>
 800a7c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	88fa      	ldrh	r2, [r7, #6]
 800a7cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	88fa      	ldrh	r2, [r7, #6]
 800a7d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7dc:	d108      	bne.n	800a7f0 <HAL_UART_Transmit+0x82>
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d104      	bne.n	800a7f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	61bb      	str	r3, [r7, #24]
 800a7ee:	e003      	b.n	800a7f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a800:	e02a      	b.n	800a858 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	2200      	movs	r2, #0
 800a80a:	2180      	movs	r1, #128	; 0x80
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	f000 fb1f 	bl	800ae50 <UART_WaitOnFlagUntilTimeout>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d001      	beq.n	800a81c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a818:	2303      	movs	r3, #3
 800a81a:	e036      	b.n	800a88a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d10b      	bne.n	800a83a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a822:	69bb      	ldr	r3, [r7, #24]
 800a824:	881b      	ldrh	r3, [r3, #0]
 800a826:	461a      	mov	r2, r3
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a830:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	3302      	adds	r3, #2
 800a836:	61bb      	str	r3, [r7, #24]
 800a838:	e007      	b.n	800a84a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a83a:	69fb      	ldr	r3, [r7, #28]
 800a83c:	781a      	ldrb	r2, [r3, #0]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	3301      	adds	r3, #1
 800a848:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a84e:	b29b      	uxth	r3, r3
 800a850:	3b01      	subs	r3, #1
 800a852:	b29a      	uxth	r2, r3
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d1cf      	bne.n	800a802 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	9300      	str	r3, [sp, #0]
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	2200      	movs	r2, #0
 800a86a:	2140      	movs	r1, #64	; 0x40
 800a86c:	68f8      	ldr	r0, [r7, #12]
 800a86e:	f000 faef 	bl	800ae50 <UART_WaitOnFlagUntilTimeout>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d001      	beq.n	800a87c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a878:	2303      	movs	r3, #3
 800a87a:	e006      	b.n	800a88a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2220      	movs	r2, #32
 800a880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a884:	2300      	movs	r3, #0
 800a886:	e000      	b.n	800a88a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a888:	2302      	movs	r3, #2
  }
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3720      	adds	r7, #32
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}

0800a892 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a892:	b580      	push	{r7, lr}
 800a894:	b084      	sub	sp, #16
 800a896:	af00      	add	r7, sp, #0
 800a898:	60f8      	str	r0, [r7, #12]
 800a89a:	60b9      	str	r1, [r7, #8]
 800a89c:	4613      	mov	r3, r2
 800a89e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	2b20      	cmp	r3, #32
 800a8aa:	d11d      	bne.n	800a8e8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d002      	beq.n	800a8b8 <HAL_UART_Receive_IT+0x26>
 800a8b2:	88fb      	ldrh	r3, [r7, #6]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d101      	bne.n	800a8bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e016      	b.n	800a8ea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d101      	bne.n	800a8ca <HAL_UART_Receive_IT+0x38>
 800a8c6:	2302      	movs	r3, #2
 800a8c8:	e00f      	b.n	800a8ea <HAL_UART_Receive_IT+0x58>
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a8d8:	88fb      	ldrh	r3, [r7, #6]
 800a8da:	461a      	mov	r2, r3
 800a8dc:	68b9      	ldr	r1, [r7, #8]
 800a8de:	68f8      	ldr	r0, [r7, #12]
 800a8e0:	f000 fb24 	bl	800af2c <UART_Start_Receive_IT>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	e000      	b.n	800a8ea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a8e8:	2302      	movs	r3, #2
  }
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
	...

0800a8f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b0ba      	sub	sp, #232	; 0xe8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	695b      	ldr	r3, [r3, #20]
 800a916:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a91a:	2300      	movs	r3, #0
 800a91c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a920:	2300      	movs	r3, #0
 800a922:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a92a:	f003 030f 	and.w	r3, r3, #15
 800a92e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a932:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a936:	2b00      	cmp	r3, #0
 800a938:	d10f      	bne.n	800a95a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a93a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a93e:	f003 0320 	and.w	r3, r3, #32
 800a942:	2b00      	cmp	r3, #0
 800a944:	d009      	beq.n	800a95a <HAL_UART_IRQHandler+0x66>
 800a946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a94a:	f003 0320 	and.w	r3, r3, #32
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d003      	beq.n	800a95a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 fc07 	bl	800b166 <UART_Receive_IT>
      return;
 800a958:	e256      	b.n	800ae08 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a95a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f000 80de 	beq.w	800ab20 <HAL_UART_IRQHandler+0x22c>
 800a964:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a968:	f003 0301 	and.w	r3, r3, #1
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d106      	bne.n	800a97e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a974:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a978:	2b00      	cmp	r3, #0
 800a97a:	f000 80d1 	beq.w	800ab20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a97e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a982:	f003 0301 	and.w	r3, r3, #1
 800a986:	2b00      	cmp	r3, #0
 800a988:	d00b      	beq.n	800a9a2 <HAL_UART_IRQHandler+0xae>
 800a98a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a98e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a992:	2b00      	cmp	r3, #0
 800a994:	d005      	beq.n	800a9a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a99a:	f043 0201 	orr.w	r2, r3, #1
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a9a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9a6:	f003 0304 	and.w	r3, r3, #4
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00b      	beq.n	800a9c6 <HAL_UART_IRQHandler+0xd2>
 800a9ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9b2:	f003 0301 	and.w	r3, r3, #1
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d005      	beq.n	800a9c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9be:	f043 0202 	orr.w	r2, r3, #2
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a9c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9ca:	f003 0302 	and.w	r3, r3, #2
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d00b      	beq.n	800a9ea <HAL_UART_IRQHandler+0xf6>
 800a9d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9d6:	f003 0301 	and.w	r3, r3, #1
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d005      	beq.n	800a9ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e2:	f043 0204 	orr.w	r2, r3, #4
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a9ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9ee:	f003 0308 	and.w	r3, r3, #8
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d011      	beq.n	800aa1a <HAL_UART_IRQHandler+0x126>
 800a9f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9fa:	f003 0320 	and.w	r3, r3, #32
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d105      	bne.n	800aa0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800aa02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa06:	f003 0301 	and.w	r3, r3, #1
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d005      	beq.n	800aa1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa12:	f043 0208 	orr.w	r2, r3, #8
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f000 81ed 	beq.w	800adfe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aa24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa28:	f003 0320 	and.w	r3, r3, #32
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d008      	beq.n	800aa42 <HAL_UART_IRQHandler+0x14e>
 800aa30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa34:	f003 0320 	and.w	r3, r3, #32
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d002      	beq.n	800aa42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 fb92 	bl	800b166 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	695b      	ldr	r3, [r3, #20]
 800aa48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa4c:	2b40      	cmp	r3, #64	; 0x40
 800aa4e:	bf0c      	ite	eq
 800aa50:	2301      	moveq	r3, #1
 800aa52:	2300      	movne	r3, #0
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa5e:	f003 0308 	and.w	r3, r3, #8
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d103      	bne.n	800aa6e <HAL_UART_IRQHandler+0x17a>
 800aa66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d04f      	beq.n	800ab0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 fa9a 	bl	800afa8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	695b      	ldr	r3, [r3, #20]
 800aa7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa7e:	2b40      	cmp	r3, #64	; 0x40
 800aa80:	d141      	bne.n	800ab06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	3314      	adds	r3, #20
 800aa88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aa90:	e853 3f00 	ldrex	r3, [r3]
 800aa94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800aa98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aa9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	3314      	adds	r3, #20
 800aaaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800aaae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800aab2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800aaba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800aabe:	e841 2300 	strex	r3, r2, [r1]
 800aac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800aac6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1d9      	bne.n	800aa82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d013      	beq.n	800aafe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aada:	4a7d      	ldr	r2, [pc, #500]	; (800acd0 <HAL_UART_IRQHandler+0x3dc>)
 800aadc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7fc ffde 	bl	8007aa4 <HAL_DMA_Abort_IT>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d016      	beq.n	800ab1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800aaf8:	4610      	mov	r0, r2
 800aafa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aafc:	e00e      	b.n	800ab1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 f990 	bl	800ae24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab04:	e00a      	b.n	800ab1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 f98c 	bl	800ae24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab0c:	e006      	b.n	800ab1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 f988 	bl	800ae24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ab1a:	e170      	b.n	800adfe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab1c:	bf00      	nop
    return;
 800ab1e:	e16e      	b.n	800adfe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	f040 814a 	bne.w	800adbe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ab2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab2e:	f003 0310 	and.w	r3, r3, #16
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	f000 8143 	beq.w	800adbe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ab38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab3c:	f003 0310 	and.w	r3, r3, #16
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	f000 813c 	beq.w	800adbe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ab46:	2300      	movs	r3, #0
 800ab48:	60bb      	str	r3, [r7, #8]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	60bb      	str	r3, [r7, #8]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	60bb      	str	r3, [r7, #8]
 800ab5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	695b      	ldr	r3, [r3, #20]
 800ab62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab66:	2b40      	cmp	r3, #64	; 0x40
 800ab68:	f040 80b4 	bne.w	800acd4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ab78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	f000 8140 	beq.w	800ae02 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ab86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	f080 8139 	bcs.w	800ae02 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ab96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab9c:	69db      	ldr	r3, [r3, #28]
 800ab9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aba2:	f000 8088 	beq.w	800acb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	330c      	adds	r3, #12
 800abac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800abb4:	e853 3f00 	ldrex	r3, [r3]
 800abb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800abbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800abc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	330c      	adds	r3, #12
 800abce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800abd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800abd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800abde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800abe2:	e841 2300 	strex	r3, r2, [r1]
 800abe6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800abea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1d9      	bne.n	800aba6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	3314      	adds	r3, #20
 800abf8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800abfc:	e853 3f00 	ldrex	r3, [r3]
 800ac00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ac02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac04:	f023 0301 	bic.w	r3, r3, #1
 800ac08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	3314      	adds	r3, #20
 800ac12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ac16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ac1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ac1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ac22:	e841 2300 	strex	r3, r2, [r1]
 800ac26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ac28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d1e1      	bne.n	800abf2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	3314      	adds	r3, #20
 800ac34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac38:	e853 3f00 	ldrex	r3, [r3]
 800ac3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ac3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	3314      	adds	r3, #20
 800ac4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ac52:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ac54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ac58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ac5a:	e841 2300 	strex	r3, r2, [r1]
 800ac5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ac60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d1e3      	bne.n	800ac2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2220      	movs	r2, #32
 800ac6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	330c      	adds	r3, #12
 800ac7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac7e:	e853 3f00 	ldrex	r3, [r3]
 800ac82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ac84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac86:	f023 0310 	bic.w	r3, r3, #16
 800ac8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	330c      	adds	r3, #12
 800ac94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ac98:	65ba      	str	r2, [r7, #88]	; 0x58
 800ac9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ac9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aca0:	e841 2300 	strex	r3, r2, [r1]
 800aca4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d1e3      	bne.n	800ac74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7fc fe87 	bl	80079c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	1ad3      	subs	r3, r2, r3
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	4619      	mov	r1, r3
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 f8b6 	bl	800ae38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800accc:	e099      	b.n	800ae02 <HAL_UART_IRQHandler+0x50e>
 800acce:	bf00      	nop
 800acd0:	0800b06f 	.word	0x0800b06f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800acdc:	b29b      	uxth	r3, r3
 800acde:	1ad3      	subs	r3, r2, r3
 800ace0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ace8:	b29b      	uxth	r3, r3
 800acea:	2b00      	cmp	r3, #0
 800acec:	f000 808b 	beq.w	800ae06 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800acf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	f000 8086 	beq.w	800ae06 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	330c      	adds	r3, #12
 800ad00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad04:	e853 3f00 	ldrex	r3, [r3]
 800ad08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	330c      	adds	r3, #12
 800ad1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ad1e:	647a      	str	r2, [r7, #68]	; 0x44
 800ad20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ad24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad26:	e841 2300 	strex	r3, r2, [r1]
 800ad2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ad2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d1e3      	bne.n	800acfa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	3314      	adds	r3, #20
 800ad38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3c:	e853 3f00 	ldrex	r3, [r3]
 800ad40:	623b      	str	r3, [r7, #32]
   return(result);
 800ad42:	6a3b      	ldr	r3, [r7, #32]
 800ad44:	f023 0301 	bic.w	r3, r3, #1
 800ad48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	3314      	adds	r3, #20
 800ad52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ad56:	633a      	str	r2, [r7, #48]	; 0x30
 800ad58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad5e:	e841 2300 	strex	r3, r2, [r1]
 800ad62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d1e3      	bne.n	800ad32 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2220      	movs	r2, #32
 800ad6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2200      	movs	r2, #0
 800ad76:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	330c      	adds	r3, #12
 800ad7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	e853 3f00 	ldrex	r3, [r3]
 800ad86:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f023 0310 	bic.w	r3, r3, #16
 800ad8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	330c      	adds	r3, #12
 800ad98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ad9c:	61fa      	str	r2, [r7, #28]
 800ad9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada0:	69b9      	ldr	r1, [r7, #24]
 800ada2:	69fa      	ldr	r2, [r7, #28]
 800ada4:	e841 2300 	strex	r3, r2, [r1]
 800ada8:	617b      	str	r3, [r7, #20]
   return(result);
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d1e3      	bne.n	800ad78 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800adb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800adb4:	4619      	mov	r1, r3
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 f83e 	bl	800ae38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800adbc:	e023      	b.n	800ae06 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800adbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d009      	beq.n	800adde <HAL_UART_IRQHandler+0x4ea>
 800adca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800add2:	2b00      	cmp	r3, #0
 800add4:	d003      	beq.n	800adde <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 f95d 	bl	800b096 <UART_Transmit_IT>
    return;
 800addc:	e014      	b.n	800ae08 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800adde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ade2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d00e      	beq.n	800ae08 <HAL_UART_IRQHandler+0x514>
 800adea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d008      	beq.n	800ae08 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 f99d 	bl	800b136 <UART_EndTransmit_IT>
    return;
 800adfc:	e004      	b.n	800ae08 <HAL_UART_IRQHandler+0x514>
    return;
 800adfe:	bf00      	nop
 800ae00:	e002      	b.n	800ae08 <HAL_UART_IRQHandler+0x514>
      return;
 800ae02:	bf00      	nop
 800ae04:	e000      	b.n	800ae08 <HAL_UART_IRQHandler+0x514>
      return;
 800ae06:	bf00      	nop
  }
}
 800ae08:	37e8      	adds	r7, #232	; 0xe8
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
 800ae0e:	bf00      	nop

0800ae10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b083      	sub	sp, #12
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ae18:	bf00      	nop
 800ae1a:	370c      	adds	r7, #12
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ae2c:	bf00      	nop
 800ae2e:	370c      	adds	r7, #12
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr

0800ae38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
 800ae40:	460b      	mov	r3, r1
 800ae42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ae44:	bf00      	nop
 800ae46:	370c      	adds	r7, #12
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b090      	sub	sp, #64	; 0x40
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	603b      	str	r3, [r7, #0]
 800ae5c:	4613      	mov	r3, r2
 800ae5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae60:	e050      	b.n	800af04 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae68:	d04c      	beq.n	800af04 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ae6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d007      	beq.n	800ae80 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae70:	f7fb ff4e 	bl	8006d10 <HAL_GetTick>
 800ae74:	4602      	mov	r2, r0
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	1ad3      	subs	r3, r2, r3
 800ae7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d241      	bcs.n	800af04 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	330c      	adds	r3, #12
 800ae86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae8a:	e853 3f00 	ldrex	r3, [r3]
 800ae8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	330c      	adds	r3, #12
 800ae9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aea0:	637a      	str	r2, [r7, #52]	; 0x34
 800aea2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aea8:	e841 2300 	strex	r3, r2, [r1]
 800aeac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aeae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d1e5      	bne.n	800ae80 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	3314      	adds	r3, #20
 800aeba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	e853 3f00 	ldrex	r3, [r3]
 800aec2:	613b      	str	r3, [r7, #16]
   return(result);
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	f023 0301 	bic.w	r3, r3, #1
 800aeca:	63bb      	str	r3, [r7, #56]	; 0x38
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	3314      	adds	r3, #20
 800aed2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aed4:	623a      	str	r2, [r7, #32]
 800aed6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed8:	69f9      	ldr	r1, [r7, #28]
 800aeda:	6a3a      	ldr	r2, [r7, #32]
 800aedc:	e841 2300 	strex	r3, r2, [r1]
 800aee0:	61bb      	str	r3, [r7, #24]
   return(result);
 800aee2:	69bb      	ldr	r3, [r7, #24]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d1e5      	bne.n	800aeb4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2220      	movs	r2, #32
 800aeec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2220      	movs	r2, #32
 800aef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800af00:	2303      	movs	r3, #3
 800af02:	e00f      	b.n	800af24 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	4013      	ands	r3, r2
 800af0e:	68ba      	ldr	r2, [r7, #8]
 800af10:	429a      	cmp	r2, r3
 800af12:	bf0c      	ite	eq
 800af14:	2301      	moveq	r3, #1
 800af16:	2300      	movne	r3, #0
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	461a      	mov	r2, r3
 800af1c:	79fb      	ldrb	r3, [r7, #7]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d09f      	beq.n	800ae62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800af22:	2300      	movs	r3, #0
}
 800af24:	4618      	mov	r0, r3
 800af26:	3740      	adds	r7, #64	; 0x40
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b085      	sub	sp, #20
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	4613      	mov	r3, r2
 800af38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	68ba      	ldr	r2, [r7, #8]
 800af3e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	88fa      	ldrh	r2, [r7, #6]
 800af44:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	88fa      	ldrh	r2, [r7, #6]
 800af4a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2200      	movs	r2, #0
 800af50:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2222      	movs	r2, #34	; 0x22
 800af56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d007      	beq.n	800af7a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	68da      	ldr	r2, [r3, #12]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af78:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	695a      	ldr	r2, [r3, #20]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f042 0201 	orr.w	r2, r2, #1
 800af88:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	68da      	ldr	r2, [r3, #12]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f042 0220 	orr.w	r2, r2, #32
 800af98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800af9a:	2300      	movs	r3, #0
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3714      	adds	r7, #20
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr

0800afa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b095      	sub	sp, #84	; 0x54
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	330c      	adds	r3, #12
 800afb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afba:	e853 3f00 	ldrex	r3, [r3]
 800afbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800afc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800afc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	330c      	adds	r3, #12
 800afce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800afd0:	643a      	str	r2, [r7, #64]	; 0x40
 800afd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800afd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800afd8:	e841 2300 	strex	r3, r2, [r1]
 800afdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800afde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d1e5      	bne.n	800afb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	3314      	adds	r3, #20
 800afea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afec:	6a3b      	ldr	r3, [r7, #32]
 800afee:	e853 3f00 	ldrex	r3, [r3]
 800aff2:	61fb      	str	r3, [r7, #28]
   return(result);
 800aff4:	69fb      	ldr	r3, [r7, #28]
 800aff6:	f023 0301 	bic.w	r3, r3, #1
 800affa:	64bb      	str	r3, [r7, #72]	; 0x48
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	3314      	adds	r3, #20
 800b002:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b004:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b006:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b008:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b00a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b00c:	e841 2300 	strex	r3, r2, [r1]
 800b010:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b014:	2b00      	cmp	r3, #0
 800b016:	d1e5      	bne.n	800afe4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d119      	bne.n	800b054 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	330c      	adds	r3, #12
 800b026:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	e853 3f00 	ldrex	r3, [r3]
 800b02e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	f023 0310 	bic.w	r3, r3, #16
 800b036:	647b      	str	r3, [r7, #68]	; 0x44
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	330c      	adds	r3, #12
 800b03e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b040:	61ba      	str	r2, [r7, #24]
 800b042:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b044:	6979      	ldr	r1, [r7, #20]
 800b046:	69ba      	ldr	r2, [r7, #24]
 800b048:	e841 2300 	strex	r3, r2, [r1]
 800b04c:	613b      	str	r3, [r7, #16]
   return(result);
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d1e5      	bne.n	800b020 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2220      	movs	r2, #32
 800b058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b062:	bf00      	nop
 800b064:	3754      	adds	r7, #84	; 0x54
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr

0800b06e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b06e:	b580      	push	{r7, lr}
 800b070:	b084      	sub	sp, #16
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b07a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2200      	movs	r2, #0
 800b080:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2200      	movs	r2, #0
 800b086:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b088:	68f8      	ldr	r0, [r7, #12]
 800b08a:	f7ff fecb 	bl	800ae24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b08e:	bf00      	nop
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b096:	b480      	push	{r7}
 800b098:	b085      	sub	sp, #20
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	2b21      	cmp	r3, #33	; 0x21
 800b0a8:	d13e      	bne.n	800b128 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0b2:	d114      	bne.n	800b0de <UART_Transmit_IT+0x48>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	691b      	ldr	r3, [r3, #16]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d110      	bne.n	800b0de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6a1b      	ldr	r3, [r3, #32]
 800b0c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	881b      	ldrh	r3, [r3, #0]
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b0d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a1b      	ldr	r3, [r3, #32]
 800b0d6:	1c9a      	adds	r2, r3, #2
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	621a      	str	r2, [r3, #32]
 800b0dc:	e008      	b.n	800b0f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6a1b      	ldr	r3, [r3, #32]
 800b0e2:	1c59      	adds	r1, r3, #1
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	6211      	str	r1, [r2, #32]
 800b0e8:	781a      	ldrb	r2, [r3, #0]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b100:	2b00      	cmp	r3, #0
 800b102:	d10f      	bne.n	800b124 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	68da      	ldr	r2, [r3, #12]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b112:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	68da      	ldr	r2, [r3, #12]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b122:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b124:	2300      	movs	r3, #0
 800b126:	e000      	b.n	800b12a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b128:	2302      	movs	r3, #2
  }
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3714      	adds	r7, #20
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr

0800b136 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b082      	sub	sp, #8
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	68da      	ldr	r2, [r3, #12]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b14c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2220      	movs	r2, #32
 800b152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f7ff fe5a 	bl	800ae10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b15c:	2300      	movs	r3, #0
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3708      	adds	r7, #8
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b08c      	sub	sp, #48	; 0x30
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b174:	b2db      	uxtb	r3, r3
 800b176:	2b22      	cmp	r3, #34	; 0x22
 800b178:	f040 80ab 	bne.w	800b2d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b184:	d117      	bne.n	800b1b6 <UART_Receive_IT+0x50>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	691b      	ldr	r3, [r3, #16]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d113      	bne.n	800b1b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b18e:	2300      	movs	r3, #0
 800b190:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b196:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1a4:	b29a      	uxth	r2, r3
 800b1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ae:	1c9a      	adds	r2, r3, #2
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	629a      	str	r2, [r3, #40]	; 0x28
 800b1b4:	e026      	b.n	800b204 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	689b      	ldr	r3, [r3, #8]
 800b1c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1c8:	d007      	beq.n	800b1da <UART_Receive_IT+0x74>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d10a      	bne.n	800b1e8 <UART_Receive_IT+0x82>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	691b      	ldr	r3, [r3, #16]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d106      	bne.n	800b1e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	b2da      	uxtb	r2, r3
 800b1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e4:	701a      	strb	r2, [r3, #0]
 800b1e6:	e008      	b.n	800b1fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	b2db      	uxtb	r3, r3
 800b1f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1f4:	b2da      	uxtb	r2, r3
 800b1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1fe:	1c5a      	adds	r2, r3, #1
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b208:	b29b      	uxth	r3, r3
 800b20a:	3b01      	subs	r3, #1
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	4619      	mov	r1, r3
 800b212:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b214:	2b00      	cmp	r3, #0
 800b216:	d15a      	bne.n	800b2ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	68da      	ldr	r2, [r3, #12]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f022 0220 	bic.w	r2, r2, #32
 800b226:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	68da      	ldr	r2, [r3, #12]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b236:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	695a      	ldr	r2, [r3, #20]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f022 0201 	bic.w	r2, r2, #1
 800b246:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2220      	movs	r2, #32
 800b24c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b254:	2b01      	cmp	r3, #1
 800b256:	d135      	bne.n	800b2c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2200      	movs	r2, #0
 800b25c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	330c      	adds	r3, #12
 800b264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	e853 3f00 	ldrex	r3, [r3]
 800b26c:	613b      	str	r3, [r7, #16]
   return(result);
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	f023 0310 	bic.w	r3, r3, #16
 800b274:	627b      	str	r3, [r7, #36]	; 0x24
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	330c      	adds	r3, #12
 800b27c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b27e:	623a      	str	r2, [r7, #32]
 800b280:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b282:	69f9      	ldr	r1, [r7, #28]
 800b284:	6a3a      	ldr	r2, [r7, #32]
 800b286:	e841 2300 	strex	r3, r2, [r1]
 800b28a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b28c:	69bb      	ldr	r3, [r7, #24]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d1e5      	bne.n	800b25e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f003 0310 	and.w	r3, r3, #16
 800b29c:	2b10      	cmp	r3, #16
 800b29e:	d10a      	bne.n	800b2b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	60fb      	str	r3, [r7, #12]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	60fb      	str	r3, [r7, #12]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	60fb      	str	r3, [r7, #12]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f7ff fdbb 	bl	800ae38 <HAL_UARTEx_RxEventCallback>
 800b2c2:	e002      	b.n	800b2ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f7fb fa73 	bl	80067b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	e002      	b.n	800b2d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	e000      	b.n	800b2d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b2d2:	2302      	movs	r3, #2
  }
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3730      	adds	r7, #48	; 0x30
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2e0:	b0c0      	sub	sp, #256	; 0x100
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b2f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2f8:	68d9      	ldr	r1, [r3, #12]
 800b2fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	ea40 0301 	orr.w	r3, r0, r1
 800b304:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b30a:	689a      	ldr	r2, [r3, #8]
 800b30c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b310:	691b      	ldr	r3, [r3, #16]
 800b312:	431a      	orrs	r2, r3
 800b314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b318:	695b      	ldr	r3, [r3, #20]
 800b31a:	431a      	orrs	r2, r3
 800b31c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b320:	69db      	ldr	r3, [r3, #28]
 800b322:	4313      	orrs	r3, r2
 800b324:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b334:	f021 010c 	bic.w	r1, r1, #12
 800b338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b342:	430b      	orrs	r3, r1
 800b344:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	695b      	ldr	r3, [r3, #20]
 800b34e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b356:	6999      	ldr	r1, [r3, #24]
 800b358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	ea40 0301 	orr.w	r3, r0, r1
 800b362:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	4b8f      	ldr	r3, [pc, #572]	; (800b5a8 <UART_SetConfig+0x2cc>)
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d005      	beq.n	800b37c <UART_SetConfig+0xa0>
 800b370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	4b8d      	ldr	r3, [pc, #564]	; (800b5ac <UART_SetConfig+0x2d0>)
 800b378:	429a      	cmp	r2, r3
 800b37a:	d104      	bne.n	800b386 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b37c:	f7fd fc58 	bl	8008c30 <HAL_RCC_GetPCLK2Freq>
 800b380:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b384:	e003      	b.n	800b38e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b386:	f7fd fc3f 	bl	8008c08 <HAL_RCC_GetPCLK1Freq>
 800b38a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b38e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b392:	69db      	ldr	r3, [r3, #28]
 800b394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b398:	f040 810c 	bne.w	800b5b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b39c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b3a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b3aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b3ae:	4622      	mov	r2, r4
 800b3b0:	462b      	mov	r3, r5
 800b3b2:	1891      	adds	r1, r2, r2
 800b3b4:	65b9      	str	r1, [r7, #88]	; 0x58
 800b3b6:	415b      	adcs	r3, r3
 800b3b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b3ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b3be:	4621      	mov	r1, r4
 800b3c0:	eb12 0801 	adds.w	r8, r2, r1
 800b3c4:	4629      	mov	r1, r5
 800b3c6:	eb43 0901 	adc.w	r9, r3, r1
 800b3ca:	f04f 0200 	mov.w	r2, #0
 800b3ce:	f04f 0300 	mov.w	r3, #0
 800b3d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b3d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b3da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b3de:	4690      	mov	r8, r2
 800b3e0:	4699      	mov	r9, r3
 800b3e2:	4623      	mov	r3, r4
 800b3e4:	eb18 0303 	adds.w	r3, r8, r3
 800b3e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b3ec:	462b      	mov	r3, r5
 800b3ee:	eb49 0303 	adc.w	r3, r9, r3
 800b3f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b3f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b402:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b406:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b40a:	460b      	mov	r3, r1
 800b40c:	18db      	adds	r3, r3, r3
 800b40e:	653b      	str	r3, [r7, #80]	; 0x50
 800b410:	4613      	mov	r3, r2
 800b412:	eb42 0303 	adc.w	r3, r2, r3
 800b416:	657b      	str	r3, [r7, #84]	; 0x54
 800b418:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b41c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b420:	f7f4 ff2e 	bl	8000280 <__aeabi_uldivmod>
 800b424:	4602      	mov	r2, r0
 800b426:	460b      	mov	r3, r1
 800b428:	4b61      	ldr	r3, [pc, #388]	; (800b5b0 <UART_SetConfig+0x2d4>)
 800b42a:	fba3 2302 	umull	r2, r3, r3, r2
 800b42e:	095b      	lsrs	r3, r3, #5
 800b430:	011c      	lsls	r4, r3, #4
 800b432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b436:	2200      	movs	r2, #0
 800b438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b43c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b440:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b444:	4642      	mov	r2, r8
 800b446:	464b      	mov	r3, r9
 800b448:	1891      	adds	r1, r2, r2
 800b44a:	64b9      	str	r1, [r7, #72]	; 0x48
 800b44c:	415b      	adcs	r3, r3
 800b44e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b450:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b454:	4641      	mov	r1, r8
 800b456:	eb12 0a01 	adds.w	sl, r2, r1
 800b45a:	4649      	mov	r1, r9
 800b45c:	eb43 0b01 	adc.w	fp, r3, r1
 800b460:	f04f 0200 	mov.w	r2, #0
 800b464:	f04f 0300 	mov.w	r3, #0
 800b468:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b46c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b470:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b474:	4692      	mov	sl, r2
 800b476:	469b      	mov	fp, r3
 800b478:	4643      	mov	r3, r8
 800b47a:	eb1a 0303 	adds.w	r3, sl, r3
 800b47e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b482:	464b      	mov	r3, r9
 800b484:	eb4b 0303 	adc.w	r3, fp, r3
 800b488:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b48c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b498:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b49c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	18db      	adds	r3, r3, r3
 800b4a4:	643b      	str	r3, [r7, #64]	; 0x40
 800b4a6:	4613      	mov	r3, r2
 800b4a8:	eb42 0303 	adc.w	r3, r2, r3
 800b4ac:	647b      	str	r3, [r7, #68]	; 0x44
 800b4ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b4b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b4b6:	f7f4 fee3 	bl	8000280 <__aeabi_uldivmod>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	460b      	mov	r3, r1
 800b4be:	4611      	mov	r1, r2
 800b4c0:	4b3b      	ldr	r3, [pc, #236]	; (800b5b0 <UART_SetConfig+0x2d4>)
 800b4c2:	fba3 2301 	umull	r2, r3, r3, r1
 800b4c6:	095b      	lsrs	r3, r3, #5
 800b4c8:	2264      	movs	r2, #100	; 0x64
 800b4ca:	fb02 f303 	mul.w	r3, r2, r3
 800b4ce:	1acb      	subs	r3, r1, r3
 800b4d0:	00db      	lsls	r3, r3, #3
 800b4d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b4d6:	4b36      	ldr	r3, [pc, #216]	; (800b5b0 <UART_SetConfig+0x2d4>)
 800b4d8:	fba3 2302 	umull	r2, r3, r3, r2
 800b4dc:	095b      	lsrs	r3, r3, #5
 800b4de:	005b      	lsls	r3, r3, #1
 800b4e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b4e4:	441c      	add	r4, r3
 800b4e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b4f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b4f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b4f8:	4642      	mov	r2, r8
 800b4fa:	464b      	mov	r3, r9
 800b4fc:	1891      	adds	r1, r2, r2
 800b4fe:	63b9      	str	r1, [r7, #56]	; 0x38
 800b500:	415b      	adcs	r3, r3
 800b502:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b504:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b508:	4641      	mov	r1, r8
 800b50a:	1851      	adds	r1, r2, r1
 800b50c:	6339      	str	r1, [r7, #48]	; 0x30
 800b50e:	4649      	mov	r1, r9
 800b510:	414b      	adcs	r3, r1
 800b512:	637b      	str	r3, [r7, #52]	; 0x34
 800b514:	f04f 0200 	mov.w	r2, #0
 800b518:	f04f 0300 	mov.w	r3, #0
 800b51c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b520:	4659      	mov	r1, fp
 800b522:	00cb      	lsls	r3, r1, #3
 800b524:	4651      	mov	r1, sl
 800b526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b52a:	4651      	mov	r1, sl
 800b52c:	00ca      	lsls	r2, r1, #3
 800b52e:	4610      	mov	r0, r2
 800b530:	4619      	mov	r1, r3
 800b532:	4603      	mov	r3, r0
 800b534:	4642      	mov	r2, r8
 800b536:	189b      	adds	r3, r3, r2
 800b538:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b53c:	464b      	mov	r3, r9
 800b53e:	460a      	mov	r2, r1
 800b540:	eb42 0303 	adc.w	r3, r2, r3
 800b544:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	2200      	movs	r2, #0
 800b550:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b554:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b558:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b55c:	460b      	mov	r3, r1
 800b55e:	18db      	adds	r3, r3, r3
 800b560:	62bb      	str	r3, [r7, #40]	; 0x28
 800b562:	4613      	mov	r3, r2
 800b564:	eb42 0303 	adc.w	r3, r2, r3
 800b568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b56a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b56e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b572:	f7f4 fe85 	bl	8000280 <__aeabi_uldivmod>
 800b576:	4602      	mov	r2, r0
 800b578:	460b      	mov	r3, r1
 800b57a:	4b0d      	ldr	r3, [pc, #52]	; (800b5b0 <UART_SetConfig+0x2d4>)
 800b57c:	fba3 1302 	umull	r1, r3, r3, r2
 800b580:	095b      	lsrs	r3, r3, #5
 800b582:	2164      	movs	r1, #100	; 0x64
 800b584:	fb01 f303 	mul.w	r3, r1, r3
 800b588:	1ad3      	subs	r3, r2, r3
 800b58a:	00db      	lsls	r3, r3, #3
 800b58c:	3332      	adds	r3, #50	; 0x32
 800b58e:	4a08      	ldr	r2, [pc, #32]	; (800b5b0 <UART_SetConfig+0x2d4>)
 800b590:	fba2 2303 	umull	r2, r3, r2, r3
 800b594:	095b      	lsrs	r3, r3, #5
 800b596:	f003 0207 	and.w	r2, r3, #7
 800b59a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4422      	add	r2, r4
 800b5a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b5a4:	e105      	b.n	800b7b2 <UART_SetConfig+0x4d6>
 800b5a6:	bf00      	nop
 800b5a8:	40011000 	.word	0x40011000
 800b5ac:	40011400 	.word	0x40011400
 800b5b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b5b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b5be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b5c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b5c6:	4642      	mov	r2, r8
 800b5c8:	464b      	mov	r3, r9
 800b5ca:	1891      	adds	r1, r2, r2
 800b5cc:	6239      	str	r1, [r7, #32]
 800b5ce:	415b      	adcs	r3, r3
 800b5d0:	627b      	str	r3, [r7, #36]	; 0x24
 800b5d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b5d6:	4641      	mov	r1, r8
 800b5d8:	1854      	adds	r4, r2, r1
 800b5da:	4649      	mov	r1, r9
 800b5dc:	eb43 0501 	adc.w	r5, r3, r1
 800b5e0:	f04f 0200 	mov.w	r2, #0
 800b5e4:	f04f 0300 	mov.w	r3, #0
 800b5e8:	00eb      	lsls	r3, r5, #3
 800b5ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b5ee:	00e2      	lsls	r2, r4, #3
 800b5f0:	4614      	mov	r4, r2
 800b5f2:	461d      	mov	r5, r3
 800b5f4:	4643      	mov	r3, r8
 800b5f6:	18e3      	adds	r3, r4, r3
 800b5f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b5fc:	464b      	mov	r3, r9
 800b5fe:	eb45 0303 	adc.w	r3, r5, r3
 800b602:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	2200      	movs	r2, #0
 800b60e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b612:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b616:	f04f 0200 	mov.w	r2, #0
 800b61a:	f04f 0300 	mov.w	r3, #0
 800b61e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b622:	4629      	mov	r1, r5
 800b624:	008b      	lsls	r3, r1, #2
 800b626:	4621      	mov	r1, r4
 800b628:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b62c:	4621      	mov	r1, r4
 800b62e:	008a      	lsls	r2, r1, #2
 800b630:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b634:	f7f4 fe24 	bl	8000280 <__aeabi_uldivmod>
 800b638:	4602      	mov	r2, r0
 800b63a:	460b      	mov	r3, r1
 800b63c:	4b60      	ldr	r3, [pc, #384]	; (800b7c0 <UART_SetConfig+0x4e4>)
 800b63e:	fba3 2302 	umull	r2, r3, r3, r2
 800b642:	095b      	lsrs	r3, r3, #5
 800b644:	011c      	lsls	r4, r3, #4
 800b646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b64a:	2200      	movs	r2, #0
 800b64c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b650:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b654:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b658:	4642      	mov	r2, r8
 800b65a:	464b      	mov	r3, r9
 800b65c:	1891      	adds	r1, r2, r2
 800b65e:	61b9      	str	r1, [r7, #24]
 800b660:	415b      	adcs	r3, r3
 800b662:	61fb      	str	r3, [r7, #28]
 800b664:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b668:	4641      	mov	r1, r8
 800b66a:	1851      	adds	r1, r2, r1
 800b66c:	6139      	str	r1, [r7, #16]
 800b66e:	4649      	mov	r1, r9
 800b670:	414b      	adcs	r3, r1
 800b672:	617b      	str	r3, [r7, #20]
 800b674:	f04f 0200 	mov.w	r2, #0
 800b678:	f04f 0300 	mov.w	r3, #0
 800b67c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b680:	4659      	mov	r1, fp
 800b682:	00cb      	lsls	r3, r1, #3
 800b684:	4651      	mov	r1, sl
 800b686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b68a:	4651      	mov	r1, sl
 800b68c:	00ca      	lsls	r2, r1, #3
 800b68e:	4610      	mov	r0, r2
 800b690:	4619      	mov	r1, r3
 800b692:	4603      	mov	r3, r0
 800b694:	4642      	mov	r2, r8
 800b696:	189b      	adds	r3, r3, r2
 800b698:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b69c:	464b      	mov	r3, r9
 800b69e:	460a      	mov	r2, r1
 800b6a0:	eb42 0303 	adc.w	r3, r2, r3
 800b6a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b6a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	67bb      	str	r3, [r7, #120]	; 0x78
 800b6b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b6b4:	f04f 0200 	mov.w	r2, #0
 800b6b8:	f04f 0300 	mov.w	r3, #0
 800b6bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b6c0:	4649      	mov	r1, r9
 800b6c2:	008b      	lsls	r3, r1, #2
 800b6c4:	4641      	mov	r1, r8
 800b6c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b6ca:	4641      	mov	r1, r8
 800b6cc:	008a      	lsls	r2, r1, #2
 800b6ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b6d2:	f7f4 fdd5 	bl	8000280 <__aeabi_uldivmod>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	460b      	mov	r3, r1
 800b6da:	4b39      	ldr	r3, [pc, #228]	; (800b7c0 <UART_SetConfig+0x4e4>)
 800b6dc:	fba3 1302 	umull	r1, r3, r3, r2
 800b6e0:	095b      	lsrs	r3, r3, #5
 800b6e2:	2164      	movs	r1, #100	; 0x64
 800b6e4:	fb01 f303 	mul.w	r3, r1, r3
 800b6e8:	1ad3      	subs	r3, r2, r3
 800b6ea:	011b      	lsls	r3, r3, #4
 800b6ec:	3332      	adds	r3, #50	; 0x32
 800b6ee:	4a34      	ldr	r2, [pc, #208]	; (800b7c0 <UART_SetConfig+0x4e4>)
 800b6f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b6f4:	095b      	lsrs	r3, r3, #5
 800b6f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b6fa:	441c      	add	r4, r3
 800b6fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b700:	2200      	movs	r2, #0
 800b702:	673b      	str	r3, [r7, #112]	; 0x70
 800b704:	677a      	str	r2, [r7, #116]	; 0x74
 800b706:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b70a:	4642      	mov	r2, r8
 800b70c:	464b      	mov	r3, r9
 800b70e:	1891      	adds	r1, r2, r2
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	415b      	adcs	r3, r3
 800b714:	60fb      	str	r3, [r7, #12]
 800b716:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b71a:	4641      	mov	r1, r8
 800b71c:	1851      	adds	r1, r2, r1
 800b71e:	6039      	str	r1, [r7, #0]
 800b720:	4649      	mov	r1, r9
 800b722:	414b      	adcs	r3, r1
 800b724:	607b      	str	r3, [r7, #4]
 800b726:	f04f 0200 	mov.w	r2, #0
 800b72a:	f04f 0300 	mov.w	r3, #0
 800b72e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b732:	4659      	mov	r1, fp
 800b734:	00cb      	lsls	r3, r1, #3
 800b736:	4651      	mov	r1, sl
 800b738:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b73c:	4651      	mov	r1, sl
 800b73e:	00ca      	lsls	r2, r1, #3
 800b740:	4610      	mov	r0, r2
 800b742:	4619      	mov	r1, r3
 800b744:	4603      	mov	r3, r0
 800b746:	4642      	mov	r2, r8
 800b748:	189b      	adds	r3, r3, r2
 800b74a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b74c:	464b      	mov	r3, r9
 800b74e:	460a      	mov	r2, r1
 800b750:	eb42 0303 	adc.w	r3, r2, r3
 800b754:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	2200      	movs	r2, #0
 800b75e:	663b      	str	r3, [r7, #96]	; 0x60
 800b760:	667a      	str	r2, [r7, #100]	; 0x64
 800b762:	f04f 0200 	mov.w	r2, #0
 800b766:	f04f 0300 	mov.w	r3, #0
 800b76a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b76e:	4649      	mov	r1, r9
 800b770:	008b      	lsls	r3, r1, #2
 800b772:	4641      	mov	r1, r8
 800b774:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b778:	4641      	mov	r1, r8
 800b77a:	008a      	lsls	r2, r1, #2
 800b77c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b780:	f7f4 fd7e 	bl	8000280 <__aeabi_uldivmod>
 800b784:	4602      	mov	r2, r0
 800b786:	460b      	mov	r3, r1
 800b788:	4b0d      	ldr	r3, [pc, #52]	; (800b7c0 <UART_SetConfig+0x4e4>)
 800b78a:	fba3 1302 	umull	r1, r3, r3, r2
 800b78e:	095b      	lsrs	r3, r3, #5
 800b790:	2164      	movs	r1, #100	; 0x64
 800b792:	fb01 f303 	mul.w	r3, r1, r3
 800b796:	1ad3      	subs	r3, r2, r3
 800b798:	011b      	lsls	r3, r3, #4
 800b79a:	3332      	adds	r3, #50	; 0x32
 800b79c:	4a08      	ldr	r2, [pc, #32]	; (800b7c0 <UART_SetConfig+0x4e4>)
 800b79e:	fba2 2303 	umull	r2, r3, r2, r3
 800b7a2:	095b      	lsrs	r3, r3, #5
 800b7a4:	f003 020f 	and.w	r2, r3, #15
 800b7a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4422      	add	r2, r4
 800b7b0:	609a      	str	r2, [r3, #8]
}
 800b7b2:	bf00      	nop
 800b7b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b7be:	bf00      	nop
 800b7c0:	51eb851f 	.word	0x51eb851f

0800b7c4 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b087      	sub	sp, #28
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	681a      	ldr	r2, [r3, #0]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7d8:	683a      	ldr	r2, [r7, #0]
 800b7da:	6812      	ldr	r2, [r2, #0]
 800b7dc:	f023 0101 	bic.w	r1, r3, #1
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	2b08      	cmp	r3, #8
 800b7ec:	d102      	bne.n	800b7f4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800b7ee:	2340      	movs	r3, #64	; 0x40
 800b7f0:	617b      	str	r3, [r7, #20]
 800b7f2:	e001      	b.n	800b7f8 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800b804:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800b80a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800b810:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800b816:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800b81c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800b822:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 800b828:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800b82e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800b834:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800b83a:	4313      	orrs	r3, r2
 800b83c:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	699b      	ldr	r3, [r3, #24]
 800b842:	693a      	ldr	r2, [r7, #16]
 800b844:	4313      	orrs	r3, r2
 800b846:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b84c:	693a      	ldr	r2, [r7, #16]
 800b84e:	4313      	orrs	r3, r2
 800b850:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800b852:	4b10      	ldr	r3, [pc, #64]	; (800b894 <FSMC_NORSRAM_Init+0xd0>)
 800b854:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b85c:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800b864:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	43db      	mvns	r3, r3
 800b874:	ea02 0103 	and.w	r1, r2, r3
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	4319      	orrs	r1, r3
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800b886:	2300      	movs	r3, #0
}
 800b888:	4618      	mov	r0, r3
 800b88a:	371c      	adds	r7, #28
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr
 800b894:	0008fb7f 	.word	0x0008fb7f

0800b898 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b898:	b480      	push	{r7}
 800b89a:	b085      	sub	sp, #20
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	1c5a      	adds	r2, r3, #1
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ae:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	681a      	ldr	r2, [r3, #0]
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	011b      	lsls	r3, r3, #4
 800b8bc:	431a      	orrs	r2, r3
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	021b      	lsls	r3, r3, #8
 800b8c4:	431a      	orrs	r2, r3
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	68db      	ldr	r3, [r3, #12]
 800b8ca:	041b      	lsls	r3, r3, #16
 800b8cc:	431a      	orrs	r2, r3
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	691b      	ldr	r3, [r3, #16]
 800b8d2:	3b01      	subs	r3, #1
 800b8d4:	051b      	lsls	r3, r3, #20
 800b8d6:	431a      	orrs	r2, r3
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	695b      	ldr	r3, [r3, #20]
 800b8dc:	3b02      	subs	r3, #2
 800b8de:	061b      	lsls	r3, r3, #24
 800b8e0:	431a      	orrs	r2, r3
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	699b      	ldr	r3, [r3, #24]
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	3201      	adds	r2, #1
 800b8ec:	4319      	orrs	r1, r3
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3714      	adds	r7, #20
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr
	...

0800b904 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	607a      	str	r2, [r7, #4]
 800b910:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b918:	d11d      	bne.n	800b956 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b922:	4b13      	ldr	r3, [pc, #76]	; (800b970 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800b924:	4013      	ands	r3, r2
 800b926:	68ba      	ldr	r2, [r7, #8]
 800b928:	6811      	ldr	r1, [r2, #0]
 800b92a:	68ba      	ldr	r2, [r7, #8]
 800b92c:	6852      	ldr	r2, [r2, #4]
 800b92e:	0112      	lsls	r2, r2, #4
 800b930:	4311      	orrs	r1, r2
 800b932:	68ba      	ldr	r2, [r7, #8]
 800b934:	6892      	ldr	r2, [r2, #8]
 800b936:	0212      	lsls	r2, r2, #8
 800b938:	4311      	orrs	r1, r2
 800b93a:	68ba      	ldr	r2, [r7, #8]
 800b93c:	6992      	ldr	r2, [r2, #24]
 800b93e:	4311      	orrs	r1, r2
 800b940:	68ba      	ldr	r2, [r7, #8]
 800b942:	68d2      	ldr	r2, [r2, #12]
 800b944:	0412      	lsls	r2, r2, #16
 800b946:	430a      	orrs	r2, r1
 800b948:	ea43 0102 	orr.w	r1, r3, r2
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b954:	e005      	b.n	800b962 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b95e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800b962:	2300      	movs	r3, #0
}
 800b964:	4618      	mov	r0, r3
 800b966:	3714      	adds	r7, #20
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr
 800b970:	cff00000 	.word	0xcff00000

0800b974 <__errno>:
 800b974:	4b01      	ldr	r3, [pc, #4]	; (800b97c <__errno+0x8>)
 800b976:	6818      	ldr	r0, [r3, #0]
 800b978:	4770      	bx	lr
 800b97a:	bf00      	nop
 800b97c:	200000ac 	.word	0x200000ac

0800b980 <__libc_init_array>:
 800b980:	b570      	push	{r4, r5, r6, lr}
 800b982:	4d0d      	ldr	r5, [pc, #52]	; (800b9b8 <__libc_init_array+0x38>)
 800b984:	4c0d      	ldr	r4, [pc, #52]	; (800b9bc <__libc_init_array+0x3c>)
 800b986:	1b64      	subs	r4, r4, r5
 800b988:	10a4      	asrs	r4, r4, #2
 800b98a:	2600      	movs	r6, #0
 800b98c:	42a6      	cmp	r6, r4
 800b98e:	d109      	bne.n	800b9a4 <__libc_init_array+0x24>
 800b990:	4d0b      	ldr	r5, [pc, #44]	; (800b9c0 <__libc_init_array+0x40>)
 800b992:	4c0c      	ldr	r4, [pc, #48]	; (800b9c4 <__libc_init_array+0x44>)
 800b994:	f001 faa4 	bl	800cee0 <_init>
 800b998:	1b64      	subs	r4, r4, r5
 800b99a:	10a4      	asrs	r4, r4, #2
 800b99c:	2600      	movs	r6, #0
 800b99e:	42a6      	cmp	r6, r4
 800b9a0:	d105      	bne.n	800b9ae <__libc_init_array+0x2e>
 800b9a2:	bd70      	pop	{r4, r5, r6, pc}
 800b9a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9a8:	4798      	blx	r3
 800b9aa:	3601      	adds	r6, #1
 800b9ac:	e7ee      	b.n	800b98c <__libc_init_array+0xc>
 800b9ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9b2:	4798      	blx	r3
 800b9b4:	3601      	adds	r6, #1
 800b9b6:	e7f2      	b.n	800b99e <__libc_init_array+0x1e>
 800b9b8:	08011194 	.word	0x08011194
 800b9bc:	08011194 	.word	0x08011194
 800b9c0:	08011194 	.word	0x08011194
 800b9c4:	08011198 	.word	0x08011198

0800b9c8 <memset>:
 800b9c8:	4402      	add	r2, r0
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d100      	bne.n	800b9d2 <memset+0xa>
 800b9d0:	4770      	bx	lr
 800b9d2:	f803 1b01 	strb.w	r1, [r3], #1
 800b9d6:	e7f9      	b.n	800b9cc <memset+0x4>

0800b9d8 <srand>:
 800b9d8:	b538      	push	{r3, r4, r5, lr}
 800b9da:	4b10      	ldr	r3, [pc, #64]	; (800ba1c <srand+0x44>)
 800b9dc:	681d      	ldr	r5, [r3, #0]
 800b9de:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800b9e0:	4604      	mov	r4, r0
 800b9e2:	b9b3      	cbnz	r3, 800ba12 <srand+0x3a>
 800b9e4:	2018      	movs	r0, #24
 800b9e6:	f000 f8f5 	bl	800bbd4 <malloc>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	63a8      	str	r0, [r5, #56]	; 0x38
 800b9ee:	b920      	cbnz	r0, 800b9fa <srand+0x22>
 800b9f0:	4b0b      	ldr	r3, [pc, #44]	; (800ba20 <srand+0x48>)
 800b9f2:	480c      	ldr	r0, [pc, #48]	; (800ba24 <srand+0x4c>)
 800b9f4:	2142      	movs	r1, #66	; 0x42
 800b9f6:	f000 f8bd 	bl	800bb74 <__assert_func>
 800b9fa:	490b      	ldr	r1, [pc, #44]	; (800ba28 <srand+0x50>)
 800b9fc:	4b0b      	ldr	r3, [pc, #44]	; (800ba2c <srand+0x54>)
 800b9fe:	e9c0 1300 	strd	r1, r3, [r0]
 800ba02:	4b0b      	ldr	r3, [pc, #44]	; (800ba30 <srand+0x58>)
 800ba04:	6083      	str	r3, [r0, #8]
 800ba06:	230b      	movs	r3, #11
 800ba08:	8183      	strh	r3, [r0, #12]
 800ba0a:	2100      	movs	r1, #0
 800ba0c:	2001      	movs	r0, #1
 800ba0e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ba12:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800ba14:	2200      	movs	r2, #0
 800ba16:	611c      	str	r4, [r3, #16]
 800ba18:	615a      	str	r2, [r3, #20]
 800ba1a:	bd38      	pop	{r3, r4, r5, pc}
 800ba1c:	200000ac 	.word	0x200000ac
 800ba20:	08011048 	.word	0x08011048
 800ba24:	0801105f 	.word	0x0801105f
 800ba28:	abcd330e 	.word	0xabcd330e
 800ba2c:	e66d1234 	.word	0xe66d1234
 800ba30:	0005deec 	.word	0x0005deec

0800ba34 <rand>:
 800ba34:	4b16      	ldr	r3, [pc, #88]	; (800ba90 <rand+0x5c>)
 800ba36:	b510      	push	{r4, lr}
 800ba38:	681c      	ldr	r4, [r3, #0]
 800ba3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ba3c:	b9b3      	cbnz	r3, 800ba6c <rand+0x38>
 800ba3e:	2018      	movs	r0, #24
 800ba40:	f000 f8c8 	bl	800bbd4 <malloc>
 800ba44:	63a0      	str	r0, [r4, #56]	; 0x38
 800ba46:	b928      	cbnz	r0, 800ba54 <rand+0x20>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	4b12      	ldr	r3, [pc, #72]	; (800ba94 <rand+0x60>)
 800ba4c:	4812      	ldr	r0, [pc, #72]	; (800ba98 <rand+0x64>)
 800ba4e:	214e      	movs	r1, #78	; 0x4e
 800ba50:	f000 f890 	bl	800bb74 <__assert_func>
 800ba54:	4a11      	ldr	r2, [pc, #68]	; (800ba9c <rand+0x68>)
 800ba56:	4b12      	ldr	r3, [pc, #72]	; (800baa0 <rand+0x6c>)
 800ba58:	e9c0 2300 	strd	r2, r3, [r0]
 800ba5c:	4b11      	ldr	r3, [pc, #68]	; (800baa4 <rand+0x70>)
 800ba5e:	6083      	str	r3, [r0, #8]
 800ba60:	230b      	movs	r3, #11
 800ba62:	8183      	strh	r3, [r0, #12]
 800ba64:	2201      	movs	r2, #1
 800ba66:	2300      	movs	r3, #0
 800ba68:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ba6c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800ba6e:	4a0e      	ldr	r2, [pc, #56]	; (800baa8 <rand+0x74>)
 800ba70:	6920      	ldr	r0, [r4, #16]
 800ba72:	6963      	ldr	r3, [r4, #20]
 800ba74:	490d      	ldr	r1, [pc, #52]	; (800baac <rand+0x78>)
 800ba76:	4342      	muls	r2, r0
 800ba78:	fb01 2203 	mla	r2, r1, r3, r2
 800ba7c:	fba0 0101 	umull	r0, r1, r0, r1
 800ba80:	1c43      	adds	r3, r0, #1
 800ba82:	eb42 0001 	adc.w	r0, r2, r1
 800ba86:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800ba8a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ba8e:	bd10      	pop	{r4, pc}
 800ba90:	200000ac 	.word	0x200000ac
 800ba94:	08011048 	.word	0x08011048
 800ba98:	0801105f 	.word	0x0801105f
 800ba9c:	abcd330e 	.word	0xabcd330e
 800baa0:	e66d1234 	.word	0xe66d1234
 800baa4:	0005deec 	.word	0x0005deec
 800baa8:	5851f42d 	.word	0x5851f42d
 800baac:	4c957f2d 	.word	0x4c957f2d

0800bab0 <sniprintf>:
 800bab0:	b40c      	push	{r2, r3}
 800bab2:	b530      	push	{r4, r5, lr}
 800bab4:	4b17      	ldr	r3, [pc, #92]	; (800bb14 <sniprintf+0x64>)
 800bab6:	1e0c      	subs	r4, r1, #0
 800bab8:	681d      	ldr	r5, [r3, #0]
 800baba:	b09d      	sub	sp, #116	; 0x74
 800babc:	da08      	bge.n	800bad0 <sniprintf+0x20>
 800babe:	238b      	movs	r3, #139	; 0x8b
 800bac0:	602b      	str	r3, [r5, #0]
 800bac2:	f04f 30ff 	mov.w	r0, #4294967295
 800bac6:	b01d      	add	sp, #116	; 0x74
 800bac8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bacc:	b002      	add	sp, #8
 800bace:	4770      	bx	lr
 800bad0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bad4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bad8:	bf14      	ite	ne
 800bada:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bade:	4623      	moveq	r3, r4
 800bae0:	9304      	str	r3, [sp, #16]
 800bae2:	9307      	str	r3, [sp, #28]
 800bae4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bae8:	9002      	str	r0, [sp, #8]
 800baea:	9006      	str	r0, [sp, #24]
 800baec:	f8ad 3016 	strh.w	r3, [sp, #22]
 800baf0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800baf2:	ab21      	add	r3, sp, #132	; 0x84
 800baf4:	a902      	add	r1, sp, #8
 800baf6:	4628      	mov	r0, r5
 800baf8:	9301      	str	r3, [sp, #4]
 800bafa:	f000 f9bd 	bl	800be78 <_svfiprintf_r>
 800bafe:	1c43      	adds	r3, r0, #1
 800bb00:	bfbc      	itt	lt
 800bb02:	238b      	movlt	r3, #139	; 0x8b
 800bb04:	602b      	strlt	r3, [r5, #0]
 800bb06:	2c00      	cmp	r4, #0
 800bb08:	d0dd      	beq.n	800bac6 <sniprintf+0x16>
 800bb0a:	9b02      	ldr	r3, [sp, #8]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	701a      	strb	r2, [r3, #0]
 800bb10:	e7d9      	b.n	800bac6 <sniprintf+0x16>
 800bb12:	bf00      	nop
 800bb14:	200000ac 	.word	0x200000ac

0800bb18 <strcat>:
 800bb18:	b510      	push	{r4, lr}
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	7814      	ldrb	r4, [r2, #0]
 800bb1e:	4613      	mov	r3, r2
 800bb20:	3201      	adds	r2, #1
 800bb22:	2c00      	cmp	r4, #0
 800bb24:	d1fa      	bne.n	800bb1c <strcat+0x4>
 800bb26:	3b01      	subs	r3, #1
 800bb28:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb2c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb30:	2a00      	cmp	r2, #0
 800bb32:	d1f9      	bne.n	800bb28 <strcat+0x10>
 800bb34:	bd10      	pop	{r4, pc}
	...

0800bb38 <strdup>:
 800bb38:	4b02      	ldr	r3, [pc, #8]	; (800bb44 <strdup+0xc>)
 800bb3a:	4601      	mov	r1, r0
 800bb3c:	6818      	ldr	r0, [r3, #0]
 800bb3e:	f000 b803 	b.w	800bb48 <_strdup_r>
 800bb42:	bf00      	nop
 800bb44:	200000ac 	.word	0x200000ac

0800bb48 <_strdup_r>:
 800bb48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	4608      	mov	r0, r1
 800bb4e:	460d      	mov	r5, r1
 800bb50:	f7f4 fb3e 	bl	80001d0 <strlen>
 800bb54:	1c42      	adds	r2, r0, #1
 800bb56:	4611      	mov	r1, r2
 800bb58:	4620      	mov	r0, r4
 800bb5a:	9201      	str	r2, [sp, #4]
 800bb5c:	f000 f8bc 	bl	800bcd8 <_malloc_r>
 800bb60:	4604      	mov	r4, r0
 800bb62:	b118      	cbz	r0, 800bb6c <_strdup_r+0x24>
 800bb64:	9a01      	ldr	r2, [sp, #4]
 800bb66:	4629      	mov	r1, r5
 800bb68:	f000 f83c 	bl	800bbe4 <memcpy>
 800bb6c:	4620      	mov	r0, r4
 800bb6e:	b003      	add	sp, #12
 800bb70:	bd30      	pop	{r4, r5, pc}
	...

0800bb74 <__assert_func>:
 800bb74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb76:	4614      	mov	r4, r2
 800bb78:	461a      	mov	r2, r3
 800bb7a:	4b09      	ldr	r3, [pc, #36]	; (800bba0 <__assert_func+0x2c>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4605      	mov	r5, r0
 800bb80:	68d8      	ldr	r0, [r3, #12]
 800bb82:	b14c      	cbz	r4, 800bb98 <__assert_func+0x24>
 800bb84:	4b07      	ldr	r3, [pc, #28]	; (800bba4 <__assert_func+0x30>)
 800bb86:	9100      	str	r1, [sp, #0]
 800bb88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb8c:	4906      	ldr	r1, [pc, #24]	; (800bba8 <__assert_func+0x34>)
 800bb8e:	462b      	mov	r3, r5
 800bb90:	f000 f80e 	bl	800bbb0 <fiprintf>
 800bb94:	f000 fe2e 	bl	800c7f4 <abort>
 800bb98:	4b04      	ldr	r3, [pc, #16]	; (800bbac <__assert_func+0x38>)
 800bb9a:	461c      	mov	r4, r3
 800bb9c:	e7f3      	b.n	800bb86 <__assert_func+0x12>
 800bb9e:	bf00      	nop
 800bba0:	200000ac 	.word	0x200000ac
 800bba4:	080110ba 	.word	0x080110ba
 800bba8:	080110c7 	.word	0x080110c7
 800bbac:	080110f5 	.word	0x080110f5

0800bbb0 <fiprintf>:
 800bbb0:	b40e      	push	{r1, r2, r3}
 800bbb2:	b503      	push	{r0, r1, lr}
 800bbb4:	4601      	mov	r1, r0
 800bbb6:	ab03      	add	r3, sp, #12
 800bbb8:	4805      	ldr	r0, [pc, #20]	; (800bbd0 <fiprintf+0x20>)
 800bbba:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbbe:	6800      	ldr	r0, [r0, #0]
 800bbc0:	9301      	str	r3, [sp, #4]
 800bbc2:	f000 fa83 	bl	800c0cc <_vfiprintf_r>
 800bbc6:	b002      	add	sp, #8
 800bbc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbcc:	b003      	add	sp, #12
 800bbce:	4770      	bx	lr
 800bbd0:	200000ac 	.word	0x200000ac

0800bbd4 <malloc>:
 800bbd4:	4b02      	ldr	r3, [pc, #8]	; (800bbe0 <malloc+0xc>)
 800bbd6:	4601      	mov	r1, r0
 800bbd8:	6818      	ldr	r0, [r3, #0]
 800bbda:	f000 b87d 	b.w	800bcd8 <_malloc_r>
 800bbde:	bf00      	nop
 800bbe0:	200000ac 	.word	0x200000ac

0800bbe4 <memcpy>:
 800bbe4:	440a      	add	r2, r1
 800bbe6:	4291      	cmp	r1, r2
 800bbe8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bbec:	d100      	bne.n	800bbf0 <memcpy+0xc>
 800bbee:	4770      	bx	lr
 800bbf0:	b510      	push	{r4, lr}
 800bbf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbfa:	4291      	cmp	r1, r2
 800bbfc:	d1f9      	bne.n	800bbf2 <memcpy+0xe>
 800bbfe:	bd10      	pop	{r4, pc}

0800bc00 <_free_r>:
 800bc00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc02:	2900      	cmp	r1, #0
 800bc04:	d044      	beq.n	800bc90 <_free_r+0x90>
 800bc06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc0a:	9001      	str	r0, [sp, #4]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	f1a1 0404 	sub.w	r4, r1, #4
 800bc12:	bfb8      	it	lt
 800bc14:	18e4      	addlt	r4, r4, r3
 800bc16:	f001 f82f 	bl	800cc78 <__malloc_lock>
 800bc1a:	4a1e      	ldr	r2, [pc, #120]	; (800bc94 <_free_r+0x94>)
 800bc1c:	9801      	ldr	r0, [sp, #4]
 800bc1e:	6813      	ldr	r3, [r2, #0]
 800bc20:	b933      	cbnz	r3, 800bc30 <_free_r+0x30>
 800bc22:	6063      	str	r3, [r4, #4]
 800bc24:	6014      	str	r4, [r2, #0]
 800bc26:	b003      	add	sp, #12
 800bc28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc2c:	f001 b82a 	b.w	800cc84 <__malloc_unlock>
 800bc30:	42a3      	cmp	r3, r4
 800bc32:	d908      	bls.n	800bc46 <_free_r+0x46>
 800bc34:	6825      	ldr	r5, [r4, #0]
 800bc36:	1961      	adds	r1, r4, r5
 800bc38:	428b      	cmp	r3, r1
 800bc3a:	bf01      	itttt	eq
 800bc3c:	6819      	ldreq	r1, [r3, #0]
 800bc3e:	685b      	ldreq	r3, [r3, #4]
 800bc40:	1949      	addeq	r1, r1, r5
 800bc42:	6021      	streq	r1, [r4, #0]
 800bc44:	e7ed      	b.n	800bc22 <_free_r+0x22>
 800bc46:	461a      	mov	r2, r3
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	b10b      	cbz	r3, 800bc50 <_free_r+0x50>
 800bc4c:	42a3      	cmp	r3, r4
 800bc4e:	d9fa      	bls.n	800bc46 <_free_r+0x46>
 800bc50:	6811      	ldr	r1, [r2, #0]
 800bc52:	1855      	adds	r5, r2, r1
 800bc54:	42a5      	cmp	r5, r4
 800bc56:	d10b      	bne.n	800bc70 <_free_r+0x70>
 800bc58:	6824      	ldr	r4, [r4, #0]
 800bc5a:	4421      	add	r1, r4
 800bc5c:	1854      	adds	r4, r2, r1
 800bc5e:	42a3      	cmp	r3, r4
 800bc60:	6011      	str	r1, [r2, #0]
 800bc62:	d1e0      	bne.n	800bc26 <_free_r+0x26>
 800bc64:	681c      	ldr	r4, [r3, #0]
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	6053      	str	r3, [r2, #4]
 800bc6a:	4421      	add	r1, r4
 800bc6c:	6011      	str	r1, [r2, #0]
 800bc6e:	e7da      	b.n	800bc26 <_free_r+0x26>
 800bc70:	d902      	bls.n	800bc78 <_free_r+0x78>
 800bc72:	230c      	movs	r3, #12
 800bc74:	6003      	str	r3, [r0, #0]
 800bc76:	e7d6      	b.n	800bc26 <_free_r+0x26>
 800bc78:	6825      	ldr	r5, [r4, #0]
 800bc7a:	1961      	adds	r1, r4, r5
 800bc7c:	428b      	cmp	r3, r1
 800bc7e:	bf04      	itt	eq
 800bc80:	6819      	ldreq	r1, [r3, #0]
 800bc82:	685b      	ldreq	r3, [r3, #4]
 800bc84:	6063      	str	r3, [r4, #4]
 800bc86:	bf04      	itt	eq
 800bc88:	1949      	addeq	r1, r1, r5
 800bc8a:	6021      	streq	r1, [r4, #0]
 800bc8c:	6054      	str	r4, [r2, #4]
 800bc8e:	e7ca      	b.n	800bc26 <_free_r+0x26>
 800bc90:	b003      	add	sp, #12
 800bc92:	bd30      	pop	{r4, r5, pc}
 800bc94:	20002b60 	.word	0x20002b60

0800bc98 <sbrk_aligned>:
 800bc98:	b570      	push	{r4, r5, r6, lr}
 800bc9a:	4e0e      	ldr	r6, [pc, #56]	; (800bcd4 <sbrk_aligned+0x3c>)
 800bc9c:	460c      	mov	r4, r1
 800bc9e:	6831      	ldr	r1, [r6, #0]
 800bca0:	4605      	mov	r5, r0
 800bca2:	b911      	cbnz	r1, 800bcaa <sbrk_aligned+0x12>
 800bca4:	f000 fcd6 	bl	800c654 <_sbrk_r>
 800bca8:	6030      	str	r0, [r6, #0]
 800bcaa:	4621      	mov	r1, r4
 800bcac:	4628      	mov	r0, r5
 800bcae:	f000 fcd1 	bl	800c654 <_sbrk_r>
 800bcb2:	1c43      	adds	r3, r0, #1
 800bcb4:	d00a      	beq.n	800bccc <sbrk_aligned+0x34>
 800bcb6:	1cc4      	adds	r4, r0, #3
 800bcb8:	f024 0403 	bic.w	r4, r4, #3
 800bcbc:	42a0      	cmp	r0, r4
 800bcbe:	d007      	beq.n	800bcd0 <sbrk_aligned+0x38>
 800bcc0:	1a21      	subs	r1, r4, r0
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	f000 fcc6 	bl	800c654 <_sbrk_r>
 800bcc8:	3001      	adds	r0, #1
 800bcca:	d101      	bne.n	800bcd0 <sbrk_aligned+0x38>
 800bccc:	f04f 34ff 	mov.w	r4, #4294967295
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	bd70      	pop	{r4, r5, r6, pc}
 800bcd4:	20002b64 	.word	0x20002b64

0800bcd8 <_malloc_r>:
 800bcd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcdc:	1ccd      	adds	r5, r1, #3
 800bcde:	f025 0503 	bic.w	r5, r5, #3
 800bce2:	3508      	adds	r5, #8
 800bce4:	2d0c      	cmp	r5, #12
 800bce6:	bf38      	it	cc
 800bce8:	250c      	movcc	r5, #12
 800bcea:	2d00      	cmp	r5, #0
 800bcec:	4607      	mov	r7, r0
 800bcee:	db01      	blt.n	800bcf4 <_malloc_r+0x1c>
 800bcf0:	42a9      	cmp	r1, r5
 800bcf2:	d905      	bls.n	800bd00 <_malloc_r+0x28>
 800bcf4:	230c      	movs	r3, #12
 800bcf6:	603b      	str	r3, [r7, #0]
 800bcf8:	2600      	movs	r6, #0
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd00:	4e2e      	ldr	r6, [pc, #184]	; (800bdbc <_malloc_r+0xe4>)
 800bd02:	f000 ffb9 	bl	800cc78 <__malloc_lock>
 800bd06:	6833      	ldr	r3, [r6, #0]
 800bd08:	461c      	mov	r4, r3
 800bd0a:	bb34      	cbnz	r4, 800bd5a <_malloc_r+0x82>
 800bd0c:	4629      	mov	r1, r5
 800bd0e:	4638      	mov	r0, r7
 800bd10:	f7ff ffc2 	bl	800bc98 <sbrk_aligned>
 800bd14:	1c43      	adds	r3, r0, #1
 800bd16:	4604      	mov	r4, r0
 800bd18:	d14d      	bne.n	800bdb6 <_malloc_r+0xde>
 800bd1a:	6834      	ldr	r4, [r6, #0]
 800bd1c:	4626      	mov	r6, r4
 800bd1e:	2e00      	cmp	r6, #0
 800bd20:	d140      	bne.n	800bda4 <_malloc_r+0xcc>
 800bd22:	6823      	ldr	r3, [r4, #0]
 800bd24:	4631      	mov	r1, r6
 800bd26:	4638      	mov	r0, r7
 800bd28:	eb04 0803 	add.w	r8, r4, r3
 800bd2c:	f000 fc92 	bl	800c654 <_sbrk_r>
 800bd30:	4580      	cmp	r8, r0
 800bd32:	d13a      	bne.n	800bdaa <_malloc_r+0xd2>
 800bd34:	6821      	ldr	r1, [r4, #0]
 800bd36:	3503      	adds	r5, #3
 800bd38:	1a6d      	subs	r5, r5, r1
 800bd3a:	f025 0503 	bic.w	r5, r5, #3
 800bd3e:	3508      	adds	r5, #8
 800bd40:	2d0c      	cmp	r5, #12
 800bd42:	bf38      	it	cc
 800bd44:	250c      	movcc	r5, #12
 800bd46:	4629      	mov	r1, r5
 800bd48:	4638      	mov	r0, r7
 800bd4a:	f7ff ffa5 	bl	800bc98 <sbrk_aligned>
 800bd4e:	3001      	adds	r0, #1
 800bd50:	d02b      	beq.n	800bdaa <_malloc_r+0xd2>
 800bd52:	6823      	ldr	r3, [r4, #0]
 800bd54:	442b      	add	r3, r5
 800bd56:	6023      	str	r3, [r4, #0]
 800bd58:	e00e      	b.n	800bd78 <_malloc_r+0xa0>
 800bd5a:	6822      	ldr	r2, [r4, #0]
 800bd5c:	1b52      	subs	r2, r2, r5
 800bd5e:	d41e      	bmi.n	800bd9e <_malloc_r+0xc6>
 800bd60:	2a0b      	cmp	r2, #11
 800bd62:	d916      	bls.n	800bd92 <_malloc_r+0xba>
 800bd64:	1961      	adds	r1, r4, r5
 800bd66:	42a3      	cmp	r3, r4
 800bd68:	6025      	str	r5, [r4, #0]
 800bd6a:	bf18      	it	ne
 800bd6c:	6059      	strne	r1, [r3, #4]
 800bd6e:	6863      	ldr	r3, [r4, #4]
 800bd70:	bf08      	it	eq
 800bd72:	6031      	streq	r1, [r6, #0]
 800bd74:	5162      	str	r2, [r4, r5]
 800bd76:	604b      	str	r3, [r1, #4]
 800bd78:	4638      	mov	r0, r7
 800bd7a:	f104 060b 	add.w	r6, r4, #11
 800bd7e:	f000 ff81 	bl	800cc84 <__malloc_unlock>
 800bd82:	f026 0607 	bic.w	r6, r6, #7
 800bd86:	1d23      	adds	r3, r4, #4
 800bd88:	1af2      	subs	r2, r6, r3
 800bd8a:	d0b6      	beq.n	800bcfa <_malloc_r+0x22>
 800bd8c:	1b9b      	subs	r3, r3, r6
 800bd8e:	50a3      	str	r3, [r4, r2]
 800bd90:	e7b3      	b.n	800bcfa <_malloc_r+0x22>
 800bd92:	6862      	ldr	r2, [r4, #4]
 800bd94:	42a3      	cmp	r3, r4
 800bd96:	bf0c      	ite	eq
 800bd98:	6032      	streq	r2, [r6, #0]
 800bd9a:	605a      	strne	r2, [r3, #4]
 800bd9c:	e7ec      	b.n	800bd78 <_malloc_r+0xa0>
 800bd9e:	4623      	mov	r3, r4
 800bda0:	6864      	ldr	r4, [r4, #4]
 800bda2:	e7b2      	b.n	800bd0a <_malloc_r+0x32>
 800bda4:	4634      	mov	r4, r6
 800bda6:	6876      	ldr	r6, [r6, #4]
 800bda8:	e7b9      	b.n	800bd1e <_malloc_r+0x46>
 800bdaa:	230c      	movs	r3, #12
 800bdac:	603b      	str	r3, [r7, #0]
 800bdae:	4638      	mov	r0, r7
 800bdb0:	f000 ff68 	bl	800cc84 <__malloc_unlock>
 800bdb4:	e7a1      	b.n	800bcfa <_malloc_r+0x22>
 800bdb6:	6025      	str	r5, [r4, #0]
 800bdb8:	e7de      	b.n	800bd78 <_malloc_r+0xa0>
 800bdba:	bf00      	nop
 800bdbc:	20002b60 	.word	0x20002b60

0800bdc0 <__ssputs_r>:
 800bdc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdc4:	688e      	ldr	r6, [r1, #8]
 800bdc6:	429e      	cmp	r6, r3
 800bdc8:	4682      	mov	sl, r0
 800bdca:	460c      	mov	r4, r1
 800bdcc:	4690      	mov	r8, r2
 800bdce:	461f      	mov	r7, r3
 800bdd0:	d838      	bhi.n	800be44 <__ssputs_r+0x84>
 800bdd2:	898a      	ldrh	r2, [r1, #12]
 800bdd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bdd8:	d032      	beq.n	800be40 <__ssputs_r+0x80>
 800bdda:	6825      	ldr	r5, [r4, #0]
 800bddc:	6909      	ldr	r1, [r1, #16]
 800bdde:	eba5 0901 	sub.w	r9, r5, r1
 800bde2:	6965      	ldr	r5, [r4, #20]
 800bde4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bde8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bdec:	3301      	adds	r3, #1
 800bdee:	444b      	add	r3, r9
 800bdf0:	106d      	asrs	r5, r5, #1
 800bdf2:	429d      	cmp	r5, r3
 800bdf4:	bf38      	it	cc
 800bdf6:	461d      	movcc	r5, r3
 800bdf8:	0553      	lsls	r3, r2, #21
 800bdfa:	d531      	bpl.n	800be60 <__ssputs_r+0xa0>
 800bdfc:	4629      	mov	r1, r5
 800bdfe:	f7ff ff6b 	bl	800bcd8 <_malloc_r>
 800be02:	4606      	mov	r6, r0
 800be04:	b950      	cbnz	r0, 800be1c <__ssputs_r+0x5c>
 800be06:	230c      	movs	r3, #12
 800be08:	f8ca 3000 	str.w	r3, [sl]
 800be0c:	89a3      	ldrh	r3, [r4, #12]
 800be0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be12:	81a3      	strh	r3, [r4, #12]
 800be14:	f04f 30ff 	mov.w	r0, #4294967295
 800be18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be1c:	6921      	ldr	r1, [r4, #16]
 800be1e:	464a      	mov	r2, r9
 800be20:	f7ff fee0 	bl	800bbe4 <memcpy>
 800be24:	89a3      	ldrh	r3, [r4, #12]
 800be26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be2e:	81a3      	strh	r3, [r4, #12]
 800be30:	6126      	str	r6, [r4, #16]
 800be32:	6165      	str	r5, [r4, #20]
 800be34:	444e      	add	r6, r9
 800be36:	eba5 0509 	sub.w	r5, r5, r9
 800be3a:	6026      	str	r6, [r4, #0]
 800be3c:	60a5      	str	r5, [r4, #8]
 800be3e:	463e      	mov	r6, r7
 800be40:	42be      	cmp	r6, r7
 800be42:	d900      	bls.n	800be46 <__ssputs_r+0x86>
 800be44:	463e      	mov	r6, r7
 800be46:	6820      	ldr	r0, [r4, #0]
 800be48:	4632      	mov	r2, r6
 800be4a:	4641      	mov	r1, r8
 800be4c:	f000 fefa 	bl	800cc44 <memmove>
 800be50:	68a3      	ldr	r3, [r4, #8]
 800be52:	1b9b      	subs	r3, r3, r6
 800be54:	60a3      	str	r3, [r4, #8]
 800be56:	6823      	ldr	r3, [r4, #0]
 800be58:	4433      	add	r3, r6
 800be5a:	6023      	str	r3, [r4, #0]
 800be5c:	2000      	movs	r0, #0
 800be5e:	e7db      	b.n	800be18 <__ssputs_r+0x58>
 800be60:	462a      	mov	r2, r5
 800be62:	f000 ff15 	bl	800cc90 <_realloc_r>
 800be66:	4606      	mov	r6, r0
 800be68:	2800      	cmp	r0, #0
 800be6a:	d1e1      	bne.n	800be30 <__ssputs_r+0x70>
 800be6c:	6921      	ldr	r1, [r4, #16]
 800be6e:	4650      	mov	r0, sl
 800be70:	f7ff fec6 	bl	800bc00 <_free_r>
 800be74:	e7c7      	b.n	800be06 <__ssputs_r+0x46>
	...

0800be78 <_svfiprintf_r>:
 800be78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be7c:	4698      	mov	r8, r3
 800be7e:	898b      	ldrh	r3, [r1, #12]
 800be80:	061b      	lsls	r3, r3, #24
 800be82:	b09d      	sub	sp, #116	; 0x74
 800be84:	4607      	mov	r7, r0
 800be86:	460d      	mov	r5, r1
 800be88:	4614      	mov	r4, r2
 800be8a:	d50e      	bpl.n	800beaa <_svfiprintf_r+0x32>
 800be8c:	690b      	ldr	r3, [r1, #16]
 800be8e:	b963      	cbnz	r3, 800beaa <_svfiprintf_r+0x32>
 800be90:	2140      	movs	r1, #64	; 0x40
 800be92:	f7ff ff21 	bl	800bcd8 <_malloc_r>
 800be96:	6028      	str	r0, [r5, #0]
 800be98:	6128      	str	r0, [r5, #16]
 800be9a:	b920      	cbnz	r0, 800bea6 <_svfiprintf_r+0x2e>
 800be9c:	230c      	movs	r3, #12
 800be9e:	603b      	str	r3, [r7, #0]
 800bea0:	f04f 30ff 	mov.w	r0, #4294967295
 800bea4:	e0d1      	b.n	800c04a <_svfiprintf_r+0x1d2>
 800bea6:	2340      	movs	r3, #64	; 0x40
 800bea8:	616b      	str	r3, [r5, #20]
 800beaa:	2300      	movs	r3, #0
 800beac:	9309      	str	r3, [sp, #36]	; 0x24
 800beae:	2320      	movs	r3, #32
 800beb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800beb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800beb8:	2330      	movs	r3, #48	; 0x30
 800beba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c064 <_svfiprintf_r+0x1ec>
 800bebe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bec2:	f04f 0901 	mov.w	r9, #1
 800bec6:	4623      	mov	r3, r4
 800bec8:	469a      	mov	sl, r3
 800beca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bece:	b10a      	cbz	r2, 800bed4 <_svfiprintf_r+0x5c>
 800bed0:	2a25      	cmp	r2, #37	; 0x25
 800bed2:	d1f9      	bne.n	800bec8 <_svfiprintf_r+0x50>
 800bed4:	ebba 0b04 	subs.w	fp, sl, r4
 800bed8:	d00b      	beq.n	800bef2 <_svfiprintf_r+0x7a>
 800beda:	465b      	mov	r3, fp
 800bedc:	4622      	mov	r2, r4
 800bede:	4629      	mov	r1, r5
 800bee0:	4638      	mov	r0, r7
 800bee2:	f7ff ff6d 	bl	800bdc0 <__ssputs_r>
 800bee6:	3001      	adds	r0, #1
 800bee8:	f000 80aa 	beq.w	800c040 <_svfiprintf_r+0x1c8>
 800beec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800beee:	445a      	add	r2, fp
 800bef0:	9209      	str	r2, [sp, #36]	; 0x24
 800bef2:	f89a 3000 	ldrb.w	r3, [sl]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f000 80a2 	beq.w	800c040 <_svfiprintf_r+0x1c8>
 800befc:	2300      	movs	r3, #0
 800befe:	f04f 32ff 	mov.w	r2, #4294967295
 800bf02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf06:	f10a 0a01 	add.w	sl, sl, #1
 800bf0a:	9304      	str	r3, [sp, #16]
 800bf0c:	9307      	str	r3, [sp, #28]
 800bf0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf12:	931a      	str	r3, [sp, #104]	; 0x68
 800bf14:	4654      	mov	r4, sl
 800bf16:	2205      	movs	r2, #5
 800bf18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf1c:	4851      	ldr	r0, [pc, #324]	; (800c064 <_svfiprintf_r+0x1ec>)
 800bf1e:	f7f4 f95f 	bl	80001e0 <memchr>
 800bf22:	9a04      	ldr	r2, [sp, #16]
 800bf24:	b9d8      	cbnz	r0, 800bf5e <_svfiprintf_r+0xe6>
 800bf26:	06d0      	lsls	r0, r2, #27
 800bf28:	bf44      	itt	mi
 800bf2a:	2320      	movmi	r3, #32
 800bf2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf30:	0711      	lsls	r1, r2, #28
 800bf32:	bf44      	itt	mi
 800bf34:	232b      	movmi	r3, #43	; 0x2b
 800bf36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf3a:	f89a 3000 	ldrb.w	r3, [sl]
 800bf3e:	2b2a      	cmp	r3, #42	; 0x2a
 800bf40:	d015      	beq.n	800bf6e <_svfiprintf_r+0xf6>
 800bf42:	9a07      	ldr	r2, [sp, #28]
 800bf44:	4654      	mov	r4, sl
 800bf46:	2000      	movs	r0, #0
 800bf48:	f04f 0c0a 	mov.w	ip, #10
 800bf4c:	4621      	mov	r1, r4
 800bf4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf52:	3b30      	subs	r3, #48	; 0x30
 800bf54:	2b09      	cmp	r3, #9
 800bf56:	d94e      	bls.n	800bff6 <_svfiprintf_r+0x17e>
 800bf58:	b1b0      	cbz	r0, 800bf88 <_svfiprintf_r+0x110>
 800bf5a:	9207      	str	r2, [sp, #28]
 800bf5c:	e014      	b.n	800bf88 <_svfiprintf_r+0x110>
 800bf5e:	eba0 0308 	sub.w	r3, r0, r8
 800bf62:	fa09 f303 	lsl.w	r3, r9, r3
 800bf66:	4313      	orrs	r3, r2
 800bf68:	9304      	str	r3, [sp, #16]
 800bf6a:	46a2      	mov	sl, r4
 800bf6c:	e7d2      	b.n	800bf14 <_svfiprintf_r+0x9c>
 800bf6e:	9b03      	ldr	r3, [sp, #12]
 800bf70:	1d19      	adds	r1, r3, #4
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	9103      	str	r1, [sp, #12]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	bfbb      	ittet	lt
 800bf7a:	425b      	neglt	r3, r3
 800bf7c:	f042 0202 	orrlt.w	r2, r2, #2
 800bf80:	9307      	strge	r3, [sp, #28]
 800bf82:	9307      	strlt	r3, [sp, #28]
 800bf84:	bfb8      	it	lt
 800bf86:	9204      	strlt	r2, [sp, #16]
 800bf88:	7823      	ldrb	r3, [r4, #0]
 800bf8a:	2b2e      	cmp	r3, #46	; 0x2e
 800bf8c:	d10c      	bne.n	800bfa8 <_svfiprintf_r+0x130>
 800bf8e:	7863      	ldrb	r3, [r4, #1]
 800bf90:	2b2a      	cmp	r3, #42	; 0x2a
 800bf92:	d135      	bne.n	800c000 <_svfiprintf_r+0x188>
 800bf94:	9b03      	ldr	r3, [sp, #12]
 800bf96:	1d1a      	adds	r2, r3, #4
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	9203      	str	r2, [sp, #12]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	bfb8      	it	lt
 800bfa0:	f04f 33ff 	movlt.w	r3, #4294967295
 800bfa4:	3402      	adds	r4, #2
 800bfa6:	9305      	str	r3, [sp, #20]
 800bfa8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c074 <_svfiprintf_r+0x1fc>
 800bfac:	7821      	ldrb	r1, [r4, #0]
 800bfae:	2203      	movs	r2, #3
 800bfb0:	4650      	mov	r0, sl
 800bfb2:	f7f4 f915 	bl	80001e0 <memchr>
 800bfb6:	b140      	cbz	r0, 800bfca <_svfiprintf_r+0x152>
 800bfb8:	2340      	movs	r3, #64	; 0x40
 800bfba:	eba0 000a 	sub.w	r0, r0, sl
 800bfbe:	fa03 f000 	lsl.w	r0, r3, r0
 800bfc2:	9b04      	ldr	r3, [sp, #16]
 800bfc4:	4303      	orrs	r3, r0
 800bfc6:	3401      	adds	r4, #1
 800bfc8:	9304      	str	r3, [sp, #16]
 800bfca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfce:	4826      	ldr	r0, [pc, #152]	; (800c068 <_svfiprintf_r+0x1f0>)
 800bfd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfd4:	2206      	movs	r2, #6
 800bfd6:	f7f4 f903 	bl	80001e0 <memchr>
 800bfda:	2800      	cmp	r0, #0
 800bfdc:	d038      	beq.n	800c050 <_svfiprintf_r+0x1d8>
 800bfde:	4b23      	ldr	r3, [pc, #140]	; (800c06c <_svfiprintf_r+0x1f4>)
 800bfe0:	bb1b      	cbnz	r3, 800c02a <_svfiprintf_r+0x1b2>
 800bfe2:	9b03      	ldr	r3, [sp, #12]
 800bfe4:	3307      	adds	r3, #7
 800bfe6:	f023 0307 	bic.w	r3, r3, #7
 800bfea:	3308      	adds	r3, #8
 800bfec:	9303      	str	r3, [sp, #12]
 800bfee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bff0:	4433      	add	r3, r6
 800bff2:	9309      	str	r3, [sp, #36]	; 0x24
 800bff4:	e767      	b.n	800bec6 <_svfiprintf_r+0x4e>
 800bff6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bffa:	460c      	mov	r4, r1
 800bffc:	2001      	movs	r0, #1
 800bffe:	e7a5      	b.n	800bf4c <_svfiprintf_r+0xd4>
 800c000:	2300      	movs	r3, #0
 800c002:	3401      	adds	r4, #1
 800c004:	9305      	str	r3, [sp, #20]
 800c006:	4619      	mov	r1, r3
 800c008:	f04f 0c0a 	mov.w	ip, #10
 800c00c:	4620      	mov	r0, r4
 800c00e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c012:	3a30      	subs	r2, #48	; 0x30
 800c014:	2a09      	cmp	r2, #9
 800c016:	d903      	bls.n	800c020 <_svfiprintf_r+0x1a8>
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d0c5      	beq.n	800bfa8 <_svfiprintf_r+0x130>
 800c01c:	9105      	str	r1, [sp, #20]
 800c01e:	e7c3      	b.n	800bfa8 <_svfiprintf_r+0x130>
 800c020:	fb0c 2101 	mla	r1, ip, r1, r2
 800c024:	4604      	mov	r4, r0
 800c026:	2301      	movs	r3, #1
 800c028:	e7f0      	b.n	800c00c <_svfiprintf_r+0x194>
 800c02a:	ab03      	add	r3, sp, #12
 800c02c:	9300      	str	r3, [sp, #0]
 800c02e:	462a      	mov	r2, r5
 800c030:	4b0f      	ldr	r3, [pc, #60]	; (800c070 <_svfiprintf_r+0x1f8>)
 800c032:	a904      	add	r1, sp, #16
 800c034:	4638      	mov	r0, r7
 800c036:	f3af 8000 	nop.w
 800c03a:	1c42      	adds	r2, r0, #1
 800c03c:	4606      	mov	r6, r0
 800c03e:	d1d6      	bne.n	800bfee <_svfiprintf_r+0x176>
 800c040:	89ab      	ldrh	r3, [r5, #12]
 800c042:	065b      	lsls	r3, r3, #25
 800c044:	f53f af2c 	bmi.w	800bea0 <_svfiprintf_r+0x28>
 800c048:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c04a:	b01d      	add	sp, #116	; 0x74
 800c04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c050:	ab03      	add	r3, sp, #12
 800c052:	9300      	str	r3, [sp, #0]
 800c054:	462a      	mov	r2, r5
 800c056:	4b06      	ldr	r3, [pc, #24]	; (800c070 <_svfiprintf_r+0x1f8>)
 800c058:	a904      	add	r1, sp, #16
 800c05a:	4638      	mov	r0, r7
 800c05c:	f000 f9d4 	bl	800c408 <_printf_i>
 800c060:	e7eb      	b.n	800c03a <_svfiprintf_r+0x1c2>
 800c062:	bf00      	nop
 800c064:	080110f6 	.word	0x080110f6
 800c068:	08011100 	.word	0x08011100
 800c06c:	00000000 	.word	0x00000000
 800c070:	0800bdc1 	.word	0x0800bdc1
 800c074:	080110fc 	.word	0x080110fc

0800c078 <__sfputc_r>:
 800c078:	6893      	ldr	r3, [r2, #8]
 800c07a:	3b01      	subs	r3, #1
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	b410      	push	{r4}
 800c080:	6093      	str	r3, [r2, #8]
 800c082:	da08      	bge.n	800c096 <__sfputc_r+0x1e>
 800c084:	6994      	ldr	r4, [r2, #24]
 800c086:	42a3      	cmp	r3, r4
 800c088:	db01      	blt.n	800c08e <__sfputc_r+0x16>
 800c08a:	290a      	cmp	r1, #10
 800c08c:	d103      	bne.n	800c096 <__sfputc_r+0x1e>
 800c08e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c092:	f000 baef 	b.w	800c674 <__swbuf_r>
 800c096:	6813      	ldr	r3, [r2, #0]
 800c098:	1c58      	adds	r0, r3, #1
 800c09a:	6010      	str	r0, [r2, #0]
 800c09c:	7019      	strb	r1, [r3, #0]
 800c09e:	4608      	mov	r0, r1
 800c0a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0a4:	4770      	bx	lr

0800c0a6 <__sfputs_r>:
 800c0a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0a8:	4606      	mov	r6, r0
 800c0aa:	460f      	mov	r7, r1
 800c0ac:	4614      	mov	r4, r2
 800c0ae:	18d5      	adds	r5, r2, r3
 800c0b0:	42ac      	cmp	r4, r5
 800c0b2:	d101      	bne.n	800c0b8 <__sfputs_r+0x12>
 800c0b4:	2000      	movs	r0, #0
 800c0b6:	e007      	b.n	800c0c8 <__sfputs_r+0x22>
 800c0b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0bc:	463a      	mov	r2, r7
 800c0be:	4630      	mov	r0, r6
 800c0c0:	f7ff ffda 	bl	800c078 <__sfputc_r>
 800c0c4:	1c43      	adds	r3, r0, #1
 800c0c6:	d1f3      	bne.n	800c0b0 <__sfputs_r+0xa>
 800c0c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c0cc <_vfiprintf_r>:
 800c0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d0:	460d      	mov	r5, r1
 800c0d2:	b09d      	sub	sp, #116	; 0x74
 800c0d4:	4614      	mov	r4, r2
 800c0d6:	4698      	mov	r8, r3
 800c0d8:	4606      	mov	r6, r0
 800c0da:	b118      	cbz	r0, 800c0e4 <_vfiprintf_r+0x18>
 800c0dc:	6983      	ldr	r3, [r0, #24]
 800c0de:	b90b      	cbnz	r3, 800c0e4 <_vfiprintf_r+0x18>
 800c0e0:	f000 fcaa 	bl	800ca38 <__sinit>
 800c0e4:	4b89      	ldr	r3, [pc, #548]	; (800c30c <_vfiprintf_r+0x240>)
 800c0e6:	429d      	cmp	r5, r3
 800c0e8:	d11b      	bne.n	800c122 <_vfiprintf_r+0x56>
 800c0ea:	6875      	ldr	r5, [r6, #4]
 800c0ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0ee:	07d9      	lsls	r1, r3, #31
 800c0f0:	d405      	bmi.n	800c0fe <_vfiprintf_r+0x32>
 800c0f2:	89ab      	ldrh	r3, [r5, #12]
 800c0f4:	059a      	lsls	r2, r3, #22
 800c0f6:	d402      	bmi.n	800c0fe <_vfiprintf_r+0x32>
 800c0f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0fa:	f000 fd3b 	bl	800cb74 <__retarget_lock_acquire_recursive>
 800c0fe:	89ab      	ldrh	r3, [r5, #12]
 800c100:	071b      	lsls	r3, r3, #28
 800c102:	d501      	bpl.n	800c108 <_vfiprintf_r+0x3c>
 800c104:	692b      	ldr	r3, [r5, #16]
 800c106:	b9eb      	cbnz	r3, 800c144 <_vfiprintf_r+0x78>
 800c108:	4629      	mov	r1, r5
 800c10a:	4630      	mov	r0, r6
 800c10c:	f000 fb04 	bl	800c718 <__swsetup_r>
 800c110:	b1c0      	cbz	r0, 800c144 <_vfiprintf_r+0x78>
 800c112:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c114:	07dc      	lsls	r4, r3, #31
 800c116:	d50e      	bpl.n	800c136 <_vfiprintf_r+0x6a>
 800c118:	f04f 30ff 	mov.w	r0, #4294967295
 800c11c:	b01d      	add	sp, #116	; 0x74
 800c11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c122:	4b7b      	ldr	r3, [pc, #492]	; (800c310 <_vfiprintf_r+0x244>)
 800c124:	429d      	cmp	r5, r3
 800c126:	d101      	bne.n	800c12c <_vfiprintf_r+0x60>
 800c128:	68b5      	ldr	r5, [r6, #8]
 800c12a:	e7df      	b.n	800c0ec <_vfiprintf_r+0x20>
 800c12c:	4b79      	ldr	r3, [pc, #484]	; (800c314 <_vfiprintf_r+0x248>)
 800c12e:	429d      	cmp	r5, r3
 800c130:	bf08      	it	eq
 800c132:	68f5      	ldreq	r5, [r6, #12]
 800c134:	e7da      	b.n	800c0ec <_vfiprintf_r+0x20>
 800c136:	89ab      	ldrh	r3, [r5, #12]
 800c138:	0598      	lsls	r0, r3, #22
 800c13a:	d4ed      	bmi.n	800c118 <_vfiprintf_r+0x4c>
 800c13c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c13e:	f000 fd1a 	bl	800cb76 <__retarget_lock_release_recursive>
 800c142:	e7e9      	b.n	800c118 <_vfiprintf_r+0x4c>
 800c144:	2300      	movs	r3, #0
 800c146:	9309      	str	r3, [sp, #36]	; 0x24
 800c148:	2320      	movs	r3, #32
 800c14a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c14e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c152:	2330      	movs	r3, #48	; 0x30
 800c154:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c318 <_vfiprintf_r+0x24c>
 800c158:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c15c:	f04f 0901 	mov.w	r9, #1
 800c160:	4623      	mov	r3, r4
 800c162:	469a      	mov	sl, r3
 800c164:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c168:	b10a      	cbz	r2, 800c16e <_vfiprintf_r+0xa2>
 800c16a:	2a25      	cmp	r2, #37	; 0x25
 800c16c:	d1f9      	bne.n	800c162 <_vfiprintf_r+0x96>
 800c16e:	ebba 0b04 	subs.w	fp, sl, r4
 800c172:	d00b      	beq.n	800c18c <_vfiprintf_r+0xc0>
 800c174:	465b      	mov	r3, fp
 800c176:	4622      	mov	r2, r4
 800c178:	4629      	mov	r1, r5
 800c17a:	4630      	mov	r0, r6
 800c17c:	f7ff ff93 	bl	800c0a6 <__sfputs_r>
 800c180:	3001      	adds	r0, #1
 800c182:	f000 80aa 	beq.w	800c2da <_vfiprintf_r+0x20e>
 800c186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c188:	445a      	add	r2, fp
 800c18a:	9209      	str	r2, [sp, #36]	; 0x24
 800c18c:	f89a 3000 	ldrb.w	r3, [sl]
 800c190:	2b00      	cmp	r3, #0
 800c192:	f000 80a2 	beq.w	800c2da <_vfiprintf_r+0x20e>
 800c196:	2300      	movs	r3, #0
 800c198:	f04f 32ff 	mov.w	r2, #4294967295
 800c19c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1a0:	f10a 0a01 	add.w	sl, sl, #1
 800c1a4:	9304      	str	r3, [sp, #16]
 800c1a6:	9307      	str	r3, [sp, #28]
 800c1a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1ac:	931a      	str	r3, [sp, #104]	; 0x68
 800c1ae:	4654      	mov	r4, sl
 800c1b0:	2205      	movs	r2, #5
 800c1b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1b6:	4858      	ldr	r0, [pc, #352]	; (800c318 <_vfiprintf_r+0x24c>)
 800c1b8:	f7f4 f812 	bl	80001e0 <memchr>
 800c1bc:	9a04      	ldr	r2, [sp, #16]
 800c1be:	b9d8      	cbnz	r0, 800c1f8 <_vfiprintf_r+0x12c>
 800c1c0:	06d1      	lsls	r1, r2, #27
 800c1c2:	bf44      	itt	mi
 800c1c4:	2320      	movmi	r3, #32
 800c1c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1ca:	0713      	lsls	r3, r2, #28
 800c1cc:	bf44      	itt	mi
 800c1ce:	232b      	movmi	r3, #43	; 0x2b
 800c1d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1d4:	f89a 3000 	ldrb.w	r3, [sl]
 800c1d8:	2b2a      	cmp	r3, #42	; 0x2a
 800c1da:	d015      	beq.n	800c208 <_vfiprintf_r+0x13c>
 800c1dc:	9a07      	ldr	r2, [sp, #28]
 800c1de:	4654      	mov	r4, sl
 800c1e0:	2000      	movs	r0, #0
 800c1e2:	f04f 0c0a 	mov.w	ip, #10
 800c1e6:	4621      	mov	r1, r4
 800c1e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1ec:	3b30      	subs	r3, #48	; 0x30
 800c1ee:	2b09      	cmp	r3, #9
 800c1f0:	d94e      	bls.n	800c290 <_vfiprintf_r+0x1c4>
 800c1f2:	b1b0      	cbz	r0, 800c222 <_vfiprintf_r+0x156>
 800c1f4:	9207      	str	r2, [sp, #28]
 800c1f6:	e014      	b.n	800c222 <_vfiprintf_r+0x156>
 800c1f8:	eba0 0308 	sub.w	r3, r0, r8
 800c1fc:	fa09 f303 	lsl.w	r3, r9, r3
 800c200:	4313      	orrs	r3, r2
 800c202:	9304      	str	r3, [sp, #16]
 800c204:	46a2      	mov	sl, r4
 800c206:	e7d2      	b.n	800c1ae <_vfiprintf_r+0xe2>
 800c208:	9b03      	ldr	r3, [sp, #12]
 800c20a:	1d19      	adds	r1, r3, #4
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	9103      	str	r1, [sp, #12]
 800c210:	2b00      	cmp	r3, #0
 800c212:	bfbb      	ittet	lt
 800c214:	425b      	neglt	r3, r3
 800c216:	f042 0202 	orrlt.w	r2, r2, #2
 800c21a:	9307      	strge	r3, [sp, #28]
 800c21c:	9307      	strlt	r3, [sp, #28]
 800c21e:	bfb8      	it	lt
 800c220:	9204      	strlt	r2, [sp, #16]
 800c222:	7823      	ldrb	r3, [r4, #0]
 800c224:	2b2e      	cmp	r3, #46	; 0x2e
 800c226:	d10c      	bne.n	800c242 <_vfiprintf_r+0x176>
 800c228:	7863      	ldrb	r3, [r4, #1]
 800c22a:	2b2a      	cmp	r3, #42	; 0x2a
 800c22c:	d135      	bne.n	800c29a <_vfiprintf_r+0x1ce>
 800c22e:	9b03      	ldr	r3, [sp, #12]
 800c230:	1d1a      	adds	r2, r3, #4
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	9203      	str	r2, [sp, #12]
 800c236:	2b00      	cmp	r3, #0
 800c238:	bfb8      	it	lt
 800c23a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c23e:	3402      	adds	r4, #2
 800c240:	9305      	str	r3, [sp, #20]
 800c242:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c328 <_vfiprintf_r+0x25c>
 800c246:	7821      	ldrb	r1, [r4, #0]
 800c248:	2203      	movs	r2, #3
 800c24a:	4650      	mov	r0, sl
 800c24c:	f7f3 ffc8 	bl	80001e0 <memchr>
 800c250:	b140      	cbz	r0, 800c264 <_vfiprintf_r+0x198>
 800c252:	2340      	movs	r3, #64	; 0x40
 800c254:	eba0 000a 	sub.w	r0, r0, sl
 800c258:	fa03 f000 	lsl.w	r0, r3, r0
 800c25c:	9b04      	ldr	r3, [sp, #16]
 800c25e:	4303      	orrs	r3, r0
 800c260:	3401      	adds	r4, #1
 800c262:	9304      	str	r3, [sp, #16]
 800c264:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c268:	482c      	ldr	r0, [pc, #176]	; (800c31c <_vfiprintf_r+0x250>)
 800c26a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c26e:	2206      	movs	r2, #6
 800c270:	f7f3 ffb6 	bl	80001e0 <memchr>
 800c274:	2800      	cmp	r0, #0
 800c276:	d03f      	beq.n	800c2f8 <_vfiprintf_r+0x22c>
 800c278:	4b29      	ldr	r3, [pc, #164]	; (800c320 <_vfiprintf_r+0x254>)
 800c27a:	bb1b      	cbnz	r3, 800c2c4 <_vfiprintf_r+0x1f8>
 800c27c:	9b03      	ldr	r3, [sp, #12]
 800c27e:	3307      	adds	r3, #7
 800c280:	f023 0307 	bic.w	r3, r3, #7
 800c284:	3308      	adds	r3, #8
 800c286:	9303      	str	r3, [sp, #12]
 800c288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c28a:	443b      	add	r3, r7
 800c28c:	9309      	str	r3, [sp, #36]	; 0x24
 800c28e:	e767      	b.n	800c160 <_vfiprintf_r+0x94>
 800c290:	fb0c 3202 	mla	r2, ip, r2, r3
 800c294:	460c      	mov	r4, r1
 800c296:	2001      	movs	r0, #1
 800c298:	e7a5      	b.n	800c1e6 <_vfiprintf_r+0x11a>
 800c29a:	2300      	movs	r3, #0
 800c29c:	3401      	adds	r4, #1
 800c29e:	9305      	str	r3, [sp, #20]
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	f04f 0c0a 	mov.w	ip, #10
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2ac:	3a30      	subs	r2, #48	; 0x30
 800c2ae:	2a09      	cmp	r2, #9
 800c2b0:	d903      	bls.n	800c2ba <_vfiprintf_r+0x1ee>
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d0c5      	beq.n	800c242 <_vfiprintf_r+0x176>
 800c2b6:	9105      	str	r1, [sp, #20]
 800c2b8:	e7c3      	b.n	800c242 <_vfiprintf_r+0x176>
 800c2ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2be:	4604      	mov	r4, r0
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	e7f0      	b.n	800c2a6 <_vfiprintf_r+0x1da>
 800c2c4:	ab03      	add	r3, sp, #12
 800c2c6:	9300      	str	r3, [sp, #0]
 800c2c8:	462a      	mov	r2, r5
 800c2ca:	4b16      	ldr	r3, [pc, #88]	; (800c324 <_vfiprintf_r+0x258>)
 800c2cc:	a904      	add	r1, sp, #16
 800c2ce:	4630      	mov	r0, r6
 800c2d0:	f3af 8000 	nop.w
 800c2d4:	4607      	mov	r7, r0
 800c2d6:	1c78      	adds	r0, r7, #1
 800c2d8:	d1d6      	bne.n	800c288 <_vfiprintf_r+0x1bc>
 800c2da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2dc:	07d9      	lsls	r1, r3, #31
 800c2de:	d405      	bmi.n	800c2ec <_vfiprintf_r+0x220>
 800c2e0:	89ab      	ldrh	r3, [r5, #12]
 800c2e2:	059a      	lsls	r2, r3, #22
 800c2e4:	d402      	bmi.n	800c2ec <_vfiprintf_r+0x220>
 800c2e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2e8:	f000 fc45 	bl	800cb76 <__retarget_lock_release_recursive>
 800c2ec:	89ab      	ldrh	r3, [r5, #12]
 800c2ee:	065b      	lsls	r3, r3, #25
 800c2f0:	f53f af12 	bmi.w	800c118 <_vfiprintf_r+0x4c>
 800c2f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2f6:	e711      	b.n	800c11c <_vfiprintf_r+0x50>
 800c2f8:	ab03      	add	r3, sp, #12
 800c2fa:	9300      	str	r3, [sp, #0]
 800c2fc:	462a      	mov	r2, r5
 800c2fe:	4b09      	ldr	r3, [pc, #36]	; (800c324 <_vfiprintf_r+0x258>)
 800c300:	a904      	add	r1, sp, #16
 800c302:	4630      	mov	r0, r6
 800c304:	f000 f880 	bl	800c408 <_printf_i>
 800c308:	e7e4      	b.n	800c2d4 <_vfiprintf_r+0x208>
 800c30a:	bf00      	nop
 800c30c:	0801114c 	.word	0x0801114c
 800c310:	0801116c 	.word	0x0801116c
 800c314:	0801112c 	.word	0x0801112c
 800c318:	080110f6 	.word	0x080110f6
 800c31c:	08011100 	.word	0x08011100
 800c320:	00000000 	.word	0x00000000
 800c324:	0800c0a7 	.word	0x0800c0a7
 800c328:	080110fc 	.word	0x080110fc

0800c32c <_printf_common>:
 800c32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c330:	4616      	mov	r6, r2
 800c332:	4699      	mov	r9, r3
 800c334:	688a      	ldr	r2, [r1, #8]
 800c336:	690b      	ldr	r3, [r1, #16]
 800c338:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c33c:	4293      	cmp	r3, r2
 800c33e:	bfb8      	it	lt
 800c340:	4613      	movlt	r3, r2
 800c342:	6033      	str	r3, [r6, #0]
 800c344:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c348:	4607      	mov	r7, r0
 800c34a:	460c      	mov	r4, r1
 800c34c:	b10a      	cbz	r2, 800c352 <_printf_common+0x26>
 800c34e:	3301      	adds	r3, #1
 800c350:	6033      	str	r3, [r6, #0]
 800c352:	6823      	ldr	r3, [r4, #0]
 800c354:	0699      	lsls	r1, r3, #26
 800c356:	bf42      	ittt	mi
 800c358:	6833      	ldrmi	r3, [r6, #0]
 800c35a:	3302      	addmi	r3, #2
 800c35c:	6033      	strmi	r3, [r6, #0]
 800c35e:	6825      	ldr	r5, [r4, #0]
 800c360:	f015 0506 	ands.w	r5, r5, #6
 800c364:	d106      	bne.n	800c374 <_printf_common+0x48>
 800c366:	f104 0a19 	add.w	sl, r4, #25
 800c36a:	68e3      	ldr	r3, [r4, #12]
 800c36c:	6832      	ldr	r2, [r6, #0]
 800c36e:	1a9b      	subs	r3, r3, r2
 800c370:	42ab      	cmp	r3, r5
 800c372:	dc26      	bgt.n	800c3c2 <_printf_common+0x96>
 800c374:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c378:	1e13      	subs	r3, r2, #0
 800c37a:	6822      	ldr	r2, [r4, #0]
 800c37c:	bf18      	it	ne
 800c37e:	2301      	movne	r3, #1
 800c380:	0692      	lsls	r2, r2, #26
 800c382:	d42b      	bmi.n	800c3dc <_printf_common+0xb0>
 800c384:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c388:	4649      	mov	r1, r9
 800c38a:	4638      	mov	r0, r7
 800c38c:	47c0      	blx	r8
 800c38e:	3001      	adds	r0, #1
 800c390:	d01e      	beq.n	800c3d0 <_printf_common+0xa4>
 800c392:	6823      	ldr	r3, [r4, #0]
 800c394:	68e5      	ldr	r5, [r4, #12]
 800c396:	6832      	ldr	r2, [r6, #0]
 800c398:	f003 0306 	and.w	r3, r3, #6
 800c39c:	2b04      	cmp	r3, #4
 800c39e:	bf08      	it	eq
 800c3a0:	1aad      	subeq	r5, r5, r2
 800c3a2:	68a3      	ldr	r3, [r4, #8]
 800c3a4:	6922      	ldr	r2, [r4, #16]
 800c3a6:	bf0c      	ite	eq
 800c3a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3ac:	2500      	movne	r5, #0
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	bfc4      	itt	gt
 800c3b2:	1a9b      	subgt	r3, r3, r2
 800c3b4:	18ed      	addgt	r5, r5, r3
 800c3b6:	2600      	movs	r6, #0
 800c3b8:	341a      	adds	r4, #26
 800c3ba:	42b5      	cmp	r5, r6
 800c3bc:	d11a      	bne.n	800c3f4 <_printf_common+0xc8>
 800c3be:	2000      	movs	r0, #0
 800c3c0:	e008      	b.n	800c3d4 <_printf_common+0xa8>
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	4652      	mov	r2, sl
 800c3c6:	4649      	mov	r1, r9
 800c3c8:	4638      	mov	r0, r7
 800c3ca:	47c0      	blx	r8
 800c3cc:	3001      	adds	r0, #1
 800c3ce:	d103      	bne.n	800c3d8 <_printf_common+0xac>
 800c3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3d8:	3501      	adds	r5, #1
 800c3da:	e7c6      	b.n	800c36a <_printf_common+0x3e>
 800c3dc:	18e1      	adds	r1, r4, r3
 800c3de:	1c5a      	adds	r2, r3, #1
 800c3e0:	2030      	movs	r0, #48	; 0x30
 800c3e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c3e6:	4422      	add	r2, r4
 800c3e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c3ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c3f0:	3302      	adds	r3, #2
 800c3f2:	e7c7      	b.n	800c384 <_printf_common+0x58>
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	4622      	mov	r2, r4
 800c3f8:	4649      	mov	r1, r9
 800c3fa:	4638      	mov	r0, r7
 800c3fc:	47c0      	blx	r8
 800c3fe:	3001      	adds	r0, #1
 800c400:	d0e6      	beq.n	800c3d0 <_printf_common+0xa4>
 800c402:	3601      	adds	r6, #1
 800c404:	e7d9      	b.n	800c3ba <_printf_common+0x8e>
	...

0800c408 <_printf_i>:
 800c408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c40c:	7e0f      	ldrb	r7, [r1, #24]
 800c40e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c410:	2f78      	cmp	r7, #120	; 0x78
 800c412:	4691      	mov	r9, r2
 800c414:	4680      	mov	r8, r0
 800c416:	460c      	mov	r4, r1
 800c418:	469a      	mov	sl, r3
 800c41a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c41e:	d807      	bhi.n	800c430 <_printf_i+0x28>
 800c420:	2f62      	cmp	r7, #98	; 0x62
 800c422:	d80a      	bhi.n	800c43a <_printf_i+0x32>
 800c424:	2f00      	cmp	r7, #0
 800c426:	f000 80d8 	beq.w	800c5da <_printf_i+0x1d2>
 800c42a:	2f58      	cmp	r7, #88	; 0x58
 800c42c:	f000 80a3 	beq.w	800c576 <_printf_i+0x16e>
 800c430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c434:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c438:	e03a      	b.n	800c4b0 <_printf_i+0xa8>
 800c43a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c43e:	2b15      	cmp	r3, #21
 800c440:	d8f6      	bhi.n	800c430 <_printf_i+0x28>
 800c442:	a101      	add	r1, pc, #4	; (adr r1, 800c448 <_printf_i+0x40>)
 800c444:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c448:	0800c4a1 	.word	0x0800c4a1
 800c44c:	0800c4b5 	.word	0x0800c4b5
 800c450:	0800c431 	.word	0x0800c431
 800c454:	0800c431 	.word	0x0800c431
 800c458:	0800c431 	.word	0x0800c431
 800c45c:	0800c431 	.word	0x0800c431
 800c460:	0800c4b5 	.word	0x0800c4b5
 800c464:	0800c431 	.word	0x0800c431
 800c468:	0800c431 	.word	0x0800c431
 800c46c:	0800c431 	.word	0x0800c431
 800c470:	0800c431 	.word	0x0800c431
 800c474:	0800c5c1 	.word	0x0800c5c1
 800c478:	0800c4e5 	.word	0x0800c4e5
 800c47c:	0800c5a3 	.word	0x0800c5a3
 800c480:	0800c431 	.word	0x0800c431
 800c484:	0800c431 	.word	0x0800c431
 800c488:	0800c5e3 	.word	0x0800c5e3
 800c48c:	0800c431 	.word	0x0800c431
 800c490:	0800c4e5 	.word	0x0800c4e5
 800c494:	0800c431 	.word	0x0800c431
 800c498:	0800c431 	.word	0x0800c431
 800c49c:	0800c5ab 	.word	0x0800c5ab
 800c4a0:	682b      	ldr	r3, [r5, #0]
 800c4a2:	1d1a      	adds	r2, r3, #4
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	602a      	str	r2, [r5, #0]
 800c4a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	e0a3      	b.n	800c5fc <_printf_i+0x1f4>
 800c4b4:	6820      	ldr	r0, [r4, #0]
 800c4b6:	6829      	ldr	r1, [r5, #0]
 800c4b8:	0606      	lsls	r6, r0, #24
 800c4ba:	f101 0304 	add.w	r3, r1, #4
 800c4be:	d50a      	bpl.n	800c4d6 <_printf_i+0xce>
 800c4c0:	680e      	ldr	r6, [r1, #0]
 800c4c2:	602b      	str	r3, [r5, #0]
 800c4c4:	2e00      	cmp	r6, #0
 800c4c6:	da03      	bge.n	800c4d0 <_printf_i+0xc8>
 800c4c8:	232d      	movs	r3, #45	; 0x2d
 800c4ca:	4276      	negs	r6, r6
 800c4cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4d0:	485e      	ldr	r0, [pc, #376]	; (800c64c <_printf_i+0x244>)
 800c4d2:	230a      	movs	r3, #10
 800c4d4:	e019      	b.n	800c50a <_printf_i+0x102>
 800c4d6:	680e      	ldr	r6, [r1, #0]
 800c4d8:	602b      	str	r3, [r5, #0]
 800c4da:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c4de:	bf18      	it	ne
 800c4e0:	b236      	sxthne	r6, r6
 800c4e2:	e7ef      	b.n	800c4c4 <_printf_i+0xbc>
 800c4e4:	682b      	ldr	r3, [r5, #0]
 800c4e6:	6820      	ldr	r0, [r4, #0]
 800c4e8:	1d19      	adds	r1, r3, #4
 800c4ea:	6029      	str	r1, [r5, #0]
 800c4ec:	0601      	lsls	r1, r0, #24
 800c4ee:	d501      	bpl.n	800c4f4 <_printf_i+0xec>
 800c4f0:	681e      	ldr	r6, [r3, #0]
 800c4f2:	e002      	b.n	800c4fa <_printf_i+0xf2>
 800c4f4:	0646      	lsls	r6, r0, #25
 800c4f6:	d5fb      	bpl.n	800c4f0 <_printf_i+0xe8>
 800c4f8:	881e      	ldrh	r6, [r3, #0]
 800c4fa:	4854      	ldr	r0, [pc, #336]	; (800c64c <_printf_i+0x244>)
 800c4fc:	2f6f      	cmp	r7, #111	; 0x6f
 800c4fe:	bf0c      	ite	eq
 800c500:	2308      	moveq	r3, #8
 800c502:	230a      	movne	r3, #10
 800c504:	2100      	movs	r1, #0
 800c506:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c50a:	6865      	ldr	r5, [r4, #4]
 800c50c:	60a5      	str	r5, [r4, #8]
 800c50e:	2d00      	cmp	r5, #0
 800c510:	bfa2      	ittt	ge
 800c512:	6821      	ldrge	r1, [r4, #0]
 800c514:	f021 0104 	bicge.w	r1, r1, #4
 800c518:	6021      	strge	r1, [r4, #0]
 800c51a:	b90e      	cbnz	r6, 800c520 <_printf_i+0x118>
 800c51c:	2d00      	cmp	r5, #0
 800c51e:	d04d      	beq.n	800c5bc <_printf_i+0x1b4>
 800c520:	4615      	mov	r5, r2
 800c522:	fbb6 f1f3 	udiv	r1, r6, r3
 800c526:	fb03 6711 	mls	r7, r3, r1, r6
 800c52a:	5dc7      	ldrb	r7, [r0, r7]
 800c52c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c530:	4637      	mov	r7, r6
 800c532:	42bb      	cmp	r3, r7
 800c534:	460e      	mov	r6, r1
 800c536:	d9f4      	bls.n	800c522 <_printf_i+0x11a>
 800c538:	2b08      	cmp	r3, #8
 800c53a:	d10b      	bne.n	800c554 <_printf_i+0x14c>
 800c53c:	6823      	ldr	r3, [r4, #0]
 800c53e:	07de      	lsls	r6, r3, #31
 800c540:	d508      	bpl.n	800c554 <_printf_i+0x14c>
 800c542:	6923      	ldr	r3, [r4, #16]
 800c544:	6861      	ldr	r1, [r4, #4]
 800c546:	4299      	cmp	r1, r3
 800c548:	bfde      	ittt	le
 800c54a:	2330      	movle	r3, #48	; 0x30
 800c54c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c550:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c554:	1b52      	subs	r2, r2, r5
 800c556:	6122      	str	r2, [r4, #16]
 800c558:	f8cd a000 	str.w	sl, [sp]
 800c55c:	464b      	mov	r3, r9
 800c55e:	aa03      	add	r2, sp, #12
 800c560:	4621      	mov	r1, r4
 800c562:	4640      	mov	r0, r8
 800c564:	f7ff fee2 	bl	800c32c <_printf_common>
 800c568:	3001      	adds	r0, #1
 800c56a:	d14c      	bne.n	800c606 <_printf_i+0x1fe>
 800c56c:	f04f 30ff 	mov.w	r0, #4294967295
 800c570:	b004      	add	sp, #16
 800c572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c576:	4835      	ldr	r0, [pc, #212]	; (800c64c <_printf_i+0x244>)
 800c578:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c57c:	6829      	ldr	r1, [r5, #0]
 800c57e:	6823      	ldr	r3, [r4, #0]
 800c580:	f851 6b04 	ldr.w	r6, [r1], #4
 800c584:	6029      	str	r1, [r5, #0]
 800c586:	061d      	lsls	r5, r3, #24
 800c588:	d514      	bpl.n	800c5b4 <_printf_i+0x1ac>
 800c58a:	07df      	lsls	r7, r3, #31
 800c58c:	bf44      	itt	mi
 800c58e:	f043 0320 	orrmi.w	r3, r3, #32
 800c592:	6023      	strmi	r3, [r4, #0]
 800c594:	b91e      	cbnz	r6, 800c59e <_printf_i+0x196>
 800c596:	6823      	ldr	r3, [r4, #0]
 800c598:	f023 0320 	bic.w	r3, r3, #32
 800c59c:	6023      	str	r3, [r4, #0]
 800c59e:	2310      	movs	r3, #16
 800c5a0:	e7b0      	b.n	800c504 <_printf_i+0xfc>
 800c5a2:	6823      	ldr	r3, [r4, #0]
 800c5a4:	f043 0320 	orr.w	r3, r3, #32
 800c5a8:	6023      	str	r3, [r4, #0]
 800c5aa:	2378      	movs	r3, #120	; 0x78
 800c5ac:	4828      	ldr	r0, [pc, #160]	; (800c650 <_printf_i+0x248>)
 800c5ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c5b2:	e7e3      	b.n	800c57c <_printf_i+0x174>
 800c5b4:	0659      	lsls	r1, r3, #25
 800c5b6:	bf48      	it	mi
 800c5b8:	b2b6      	uxthmi	r6, r6
 800c5ba:	e7e6      	b.n	800c58a <_printf_i+0x182>
 800c5bc:	4615      	mov	r5, r2
 800c5be:	e7bb      	b.n	800c538 <_printf_i+0x130>
 800c5c0:	682b      	ldr	r3, [r5, #0]
 800c5c2:	6826      	ldr	r6, [r4, #0]
 800c5c4:	6961      	ldr	r1, [r4, #20]
 800c5c6:	1d18      	adds	r0, r3, #4
 800c5c8:	6028      	str	r0, [r5, #0]
 800c5ca:	0635      	lsls	r5, r6, #24
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	d501      	bpl.n	800c5d4 <_printf_i+0x1cc>
 800c5d0:	6019      	str	r1, [r3, #0]
 800c5d2:	e002      	b.n	800c5da <_printf_i+0x1d2>
 800c5d4:	0670      	lsls	r0, r6, #25
 800c5d6:	d5fb      	bpl.n	800c5d0 <_printf_i+0x1c8>
 800c5d8:	8019      	strh	r1, [r3, #0]
 800c5da:	2300      	movs	r3, #0
 800c5dc:	6123      	str	r3, [r4, #16]
 800c5de:	4615      	mov	r5, r2
 800c5e0:	e7ba      	b.n	800c558 <_printf_i+0x150>
 800c5e2:	682b      	ldr	r3, [r5, #0]
 800c5e4:	1d1a      	adds	r2, r3, #4
 800c5e6:	602a      	str	r2, [r5, #0]
 800c5e8:	681d      	ldr	r5, [r3, #0]
 800c5ea:	6862      	ldr	r2, [r4, #4]
 800c5ec:	2100      	movs	r1, #0
 800c5ee:	4628      	mov	r0, r5
 800c5f0:	f7f3 fdf6 	bl	80001e0 <memchr>
 800c5f4:	b108      	cbz	r0, 800c5fa <_printf_i+0x1f2>
 800c5f6:	1b40      	subs	r0, r0, r5
 800c5f8:	6060      	str	r0, [r4, #4]
 800c5fa:	6863      	ldr	r3, [r4, #4]
 800c5fc:	6123      	str	r3, [r4, #16]
 800c5fe:	2300      	movs	r3, #0
 800c600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c604:	e7a8      	b.n	800c558 <_printf_i+0x150>
 800c606:	6923      	ldr	r3, [r4, #16]
 800c608:	462a      	mov	r2, r5
 800c60a:	4649      	mov	r1, r9
 800c60c:	4640      	mov	r0, r8
 800c60e:	47d0      	blx	sl
 800c610:	3001      	adds	r0, #1
 800c612:	d0ab      	beq.n	800c56c <_printf_i+0x164>
 800c614:	6823      	ldr	r3, [r4, #0]
 800c616:	079b      	lsls	r3, r3, #30
 800c618:	d413      	bmi.n	800c642 <_printf_i+0x23a>
 800c61a:	68e0      	ldr	r0, [r4, #12]
 800c61c:	9b03      	ldr	r3, [sp, #12]
 800c61e:	4298      	cmp	r0, r3
 800c620:	bfb8      	it	lt
 800c622:	4618      	movlt	r0, r3
 800c624:	e7a4      	b.n	800c570 <_printf_i+0x168>
 800c626:	2301      	movs	r3, #1
 800c628:	4632      	mov	r2, r6
 800c62a:	4649      	mov	r1, r9
 800c62c:	4640      	mov	r0, r8
 800c62e:	47d0      	blx	sl
 800c630:	3001      	adds	r0, #1
 800c632:	d09b      	beq.n	800c56c <_printf_i+0x164>
 800c634:	3501      	adds	r5, #1
 800c636:	68e3      	ldr	r3, [r4, #12]
 800c638:	9903      	ldr	r1, [sp, #12]
 800c63a:	1a5b      	subs	r3, r3, r1
 800c63c:	42ab      	cmp	r3, r5
 800c63e:	dcf2      	bgt.n	800c626 <_printf_i+0x21e>
 800c640:	e7eb      	b.n	800c61a <_printf_i+0x212>
 800c642:	2500      	movs	r5, #0
 800c644:	f104 0619 	add.w	r6, r4, #25
 800c648:	e7f5      	b.n	800c636 <_printf_i+0x22e>
 800c64a:	bf00      	nop
 800c64c:	08011107 	.word	0x08011107
 800c650:	08011118 	.word	0x08011118

0800c654 <_sbrk_r>:
 800c654:	b538      	push	{r3, r4, r5, lr}
 800c656:	4d06      	ldr	r5, [pc, #24]	; (800c670 <_sbrk_r+0x1c>)
 800c658:	2300      	movs	r3, #0
 800c65a:	4604      	mov	r4, r0
 800c65c:	4608      	mov	r0, r1
 800c65e:	602b      	str	r3, [r5, #0]
 800c660:	f7f9 fda4 	bl	80061ac <_sbrk>
 800c664:	1c43      	adds	r3, r0, #1
 800c666:	d102      	bne.n	800c66e <_sbrk_r+0x1a>
 800c668:	682b      	ldr	r3, [r5, #0]
 800c66a:	b103      	cbz	r3, 800c66e <_sbrk_r+0x1a>
 800c66c:	6023      	str	r3, [r4, #0]
 800c66e:	bd38      	pop	{r3, r4, r5, pc}
 800c670:	20002b6c 	.word	0x20002b6c

0800c674 <__swbuf_r>:
 800c674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c676:	460e      	mov	r6, r1
 800c678:	4614      	mov	r4, r2
 800c67a:	4605      	mov	r5, r0
 800c67c:	b118      	cbz	r0, 800c686 <__swbuf_r+0x12>
 800c67e:	6983      	ldr	r3, [r0, #24]
 800c680:	b90b      	cbnz	r3, 800c686 <__swbuf_r+0x12>
 800c682:	f000 f9d9 	bl	800ca38 <__sinit>
 800c686:	4b21      	ldr	r3, [pc, #132]	; (800c70c <__swbuf_r+0x98>)
 800c688:	429c      	cmp	r4, r3
 800c68a:	d12b      	bne.n	800c6e4 <__swbuf_r+0x70>
 800c68c:	686c      	ldr	r4, [r5, #4]
 800c68e:	69a3      	ldr	r3, [r4, #24]
 800c690:	60a3      	str	r3, [r4, #8]
 800c692:	89a3      	ldrh	r3, [r4, #12]
 800c694:	071a      	lsls	r2, r3, #28
 800c696:	d52f      	bpl.n	800c6f8 <__swbuf_r+0x84>
 800c698:	6923      	ldr	r3, [r4, #16]
 800c69a:	b36b      	cbz	r3, 800c6f8 <__swbuf_r+0x84>
 800c69c:	6923      	ldr	r3, [r4, #16]
 800c69e:	6820      	ldr	r0, [r4, #0]
 800c6a0:	1ac0      	subs	r0, r0, r3
 800c6a2:	6963      	ldr	r3, [r4, #20]
 800c6a4:	b2f6      	uxtb	r6, r6
 800c6a6:	4283      	cmp	r3, r0
 800c6a8:	4637      	mov	r7, r6
 800c6aa:	dc04      	bgt.n	800c6b6 <__swbuf_r+0x42>
 800c6ac:	4621      	mov	r1, r4
 800c6ae:	4628      	mov	r0, r5
 800c6b0:	f000 f92e 	bl	800c910 <_fflush_r>
 800c6b4:	bb30      	cbnz	r0, 800c704 <__swbuf_r+0x90>
 800c6b6:	68a3      	ldr	r3, [r4, #8]
 800c6b8:	3b01      	subs	r3, #1
 800c6ba:	60a3      	str	r3, [r4, #8]
 800c6bc:	6823      	ldr	r3, [r4, #0]
 800c6be:	1c5a      	adds	r2, r3, #1
 800c6c0:	6022      	str	r2, [r4, #0]
 800c6c2:	701e      	strb	r6, [r3, #0]
 800c6c4:	6963      	ldr	r3, [r4, #20]
 800c6c6:	3001      	adds	r0, #1
 800c6c8:	4283      	cmp	r3, r0
 800c6ca:	d004      	beq.n	800c6d6 <__swbuf_r+0x62>
 800c6cc:	89a3      	ldrh	r3, [r4, #12]
 800c6ce:	07db      	lsls	r3, r3, #31
 800c6d0:	d506      	bpl.n	800c6e0 <__swbuf_r+0x6c>
 800c6d2:	2e0a      	cmp	r6, #10
 800c6d4:	d104      	bne.n	800c6e0 <__swbuf_r+0x6c>
 800c6d6:	4621      	mov	r1, r4
 800c6d8:	4628      	mov	r0, r5
 800c6da:	f000 f919 	bl	800c910 <_fflush_r>
 800c6de:	b988      	cbnz	r0, 800c704 <__swbuf_r+0x90>
 800c6e0:	4638      	mov	r0, r7
 800c6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6e4:	4b0a      	ldr	r3, [pc, #40]	; (800c710 <__swbuf_r+0x9c>)
 800c6e6:	429c      	cmp	r4, r3
 800c6e8:	d101      	bne.n	800c6ee <__swbuf_r+0x7a>
 800c6ea:	68ac      	ldr	r4, [r5, #8]
 800c6ec:	e7cf      	b.n	800c68e <__swbuf_r+0x1a>
 800c6ee:	4b09      	ldr	r3, [pc, #36]	; (800c714 <__swbuf_r+0xa0>)
 800c6f0:	429c      	cmp	r4, r3
 800c6f2:	bf08      	it	eq
 800c6f4:	68ec      	ldreq	r4, [r5, #12]
 800c6f6:	e7ca      	b.n	800c68e <__swbuf_r+0x1a>
 800c6f8:	4621      	mov	r1, r4
 800c6fa:	4628      	mov	r0, r5
 800c6fc:	f000 f80c 	bl	800c718 <__swsetup_r>
 800c700:	2800      	cmp	r0, #0
 800c702:	d0cb      	beq.n	800c69c <__swbuf_r+0x28>
 800c704:	f04f 37ff 	mov.w	r7, #4294967295
 800c708:	e7ea      	b.n	800c6e0 <__swbuf_r+0x6c>
 800c70a:	bf00      	nop
 800c70c:	0801114c 	.word	0x0801114c
 800c710:	0801116c 	.word	0x0801116c
 800c714:	0801112c 	.word	0x0801112c

0800c718 <__swsetup_r>:
 800c718:	4b32      	ldr	r3, [pc, #200]	; (800c7e4 <__swsetup_r+0xcc>)
 800c71a:	b570      	push	{r4, r5, r6, lr}
 800c71c:	681d      	ldr	r5, [r3, #0]
 800c71e:	4606      	mov	r6, r0
 800c720:	460c      	mov	r4, r1
 800c722:	b125      	cbz	r5, 800c72e <__swsetup_r+0x16>
 800c724:	69ab      	ldr	r3, [r5, #24]
 800c726:	b913      	cbnz	r3, 800c72e <__swsetup_r+0x16>
 800c728:	4628      	mov	r0, r5
 800c72a:	f000 f985 	bl	800ca38 <__sinit>
 800c72e:	4b2e      	ldr	r3, [pc, #184]	; (800c7e8 <__swsetup_r+0xd0>)
 800c730:	429c      	cmp	r4, r3
 800c732:	d10f      	bne.n	800c754 <__swsetup_r+0x3c>
 800c734:	686c      	ldr	r4, [r5, #4]
 800c736:	89a3      	ldrh	r3, [r4, #12]
 800c738:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c73c:	0719      	lsls	r1, r3, #28
 800c73e:	d42c      	bmi.n	800c79a <__swsetup_r+0x82>
 800c740:	06dd      	lsls	r5, r3, #27
 800c742:	d411      	bmi.n	800c768 <__swsetup_r+0x50>
 800c744:	2309      	movs	r3, #9
 800c746:	6033      	str	r3, [r6, #0]
 800c748:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c74c:	81a3      	strh	r3, [r4, #12]
 800c74e:	f04f 30ff 	mov.w	r0, #4294967295
 800c752:	e03e      	b.n	800c7d2 <__swsetup_r+0xba>
 800c754:	4b25      	ldr	r3, [pc, #148]	; (800c7ec <__swsetup_r+0xd4>)
 800c756:	429c      	cmp	r4, r3
 800c758:	d101      	bne.n	800c75e <__swsetup_r+0x46>
 800c75a:	68ac      	ldr	r4, [r5, #8]
 800c75c:	e7eb      	b.n	800c736 <__swsetup_r+0x1e>
 800c75e:	4b24      	ldr	r3, [pc, #144]	; (800c7f0 <__swsetup_r+0xd8>)
 800c760:	429c      	cmp	r4, r3
 800c762:	bf08      	it	eq
 800c764:	68ec      	ldreq	r4, [r5, #12]
 800c766:	e7e6      	b.n	800c736 <__swsetup_r+0x1e>
 800c768:	0758      	lsls	r0, r3, #29
 800c76a:	d512      	bpl.n	800c792 <__swsetup_r+0x7a>
 800c76c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c76e:	b141      	cbz	r1, 800c782 <__swsetup_r+0x6a>
 800c770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c774:	4299      	cmp	r1, r3
 800c776:	d002      	beq.n	800c77e <__swsetup_r+0x66>
 800c778:	4630      	mov	r0, r6
 800c77a:	f7ff fa41 	bl	800bc00 <_free_r>
 800c77e:	2300      	movs	r3, #0
 800c780:	6363      	str	r3, [r4, #52]	; 0x34
 800c782:	89a3      	ldrh	r3, [r4, #12]
 800c784:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c788:	81a3      	strh	r3, [r4, #12]
 800c78a:	2300      	movs	r3, #0
 800c78c:	6063      	str	r3, [r4, #4]
 800c78e:	6923      	ldr	r3, [r4, #16]
 800c790:	6023      	str	r3, [r4, #0]
 800c792:	89a3      	ldrh	r3, [r4, #12]
 800c794:	f043 0308 	orr.w	r3, r3, #8
 800c798:	81a3      	strh	r3, [r4, #12]
 800c79a:	6923      	ldr	r3, [r4, #16]
 800c79c:	b94b      	cbnz	r3, 800c7b2 <__swsetup_r+0x9a>
 800c79e:	89a3      	ldrh	r3, [r4, #12]
 800c7a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c7a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7a8:	d003      	beq.n	800c7b2 <__swsetup_r+0x9a>
 800c7aa:	4621      	mov	r1, r4
 800c7ac:	4630      	mov	r0, r6
 800c7ae:	f000 fa09 	bl	800cbc4 <__smakebuf_r>
 800c7b2:	89a0      	ldrh	r0, [r4, #12]
 800c7b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c7b8:	f010 0301 	ands.w	r3, r0, #1
 800c7bc:	d00a      	beq.n	800c7d4 <__swsetup_r+0xbc>
 800c7be:	2300      	movs	r3, #0
 800c7c0:	60a3      	str	r3, [r4, #8]
 800c7c2:	6963      	ldr	r3, [r4, #20]
 800c7c4:	425b      	negs	r3, r3
 800c7c6:	61a3      	str	r3, [r4, #24]
 800c7c8:	6923      	ldr	r3, [r4, #16]
 800c7ca:	b943      	cbnz	r3, 800c7de <__swsetup_r+0xc6>
 800c7cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c7d0:	d1ba      	bne.n	800c748 <__swsetup_r+0x30>
 800c7d2:	bd70      	pop	{r4, r5, r6, pc}
 800c7d4:	0781      	lsls	r1, r0, #30
 800c7d6:	bf58      	it	pl
 800c7d8:	6963      	ldrpl	r3, [r4, #20]
 800c7da:	60a3      	str	r3, [r4, #8]
 800c7dc:	e7f4      	b.n	800c7c8 <__swsetup_r+0xb0>
 800c7de:	2000      	movs	r0, #0
 800c7e0:	e7f7      	b.n	800c7d2 <__swsetup_r+0xba>
 800c7e2:	bf00      	nop
 800c7e4:	200000ac 	.word	0x200000ac
 800c7e8:	0801114c 	.word	0x0801114c
 800c7ec:	0801116c 	.word	0x0801116c
 800c7f0:	0801112c 	.word	0x0801112c

0800c7f4 <abort>:
 800c7f4:	b508      	push	{r3, lr}
 800c7f6:	2006      	movs	r0, #6
 800c7f8:	f000 faa2 	bl	800cd40 <raise>
 800c7fc:	2001      	movs	r0, #1
 800c7fe:	f7f9 fc5d 	bl	80060bc <_exit>
	...

0800c804 <__sflush_r>:
 800c804:	898a      	ldrh	r2, [r1, #12]
 800c806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c80a:	4605      	mov	r5, r0
 800c80c:	0710      	lsls	r0, r2, #28
 800c80e:	460c      	mov	r4, r1
 800c810:	d458      	bmi.n	800c8c4 <__sflush_r+0xc0>
 800c812:	684b      	ldr	r3, [r1, #4]
 800c814:	2b00      	cmp	r3, #0
 800c816:	dc05      	bgt.n	800c824 <__sflush_r+0x20>
 800c818:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	dc02      	bgt.n	800c824 <__sflush_r+0x20>
 800c81e:	2000      	movs	r0, #0
 800c820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c826:	2e00      	cmp	r6, #0
 800c828:	d0f9      	beq.n	800c81e <__sflush_r+0x1a>
 800c82a:	2300      	movs	r3, #0
 800c82c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c830:	682f      	ldr	r7, [r5, #0]
 800c832:	602b      	str	r3, [r5, #0]
 800c834:	d032      	beq.n	800c89c <__sflush_r+0x98>
 800c836:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c838:	89a3      	ldrh	r3, [r4, #12]
 800c83a:	075a      	lsls	r2, r3, #29
 800c83c:	d505      	bpl.n	800c84a <__sflush_r+0x46>
 800c83e:	6863      	ldr	r3, [r4, #4]
 800c840:	1ac0      	subs	r0, r0, r3
 800c842:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c844:	b10b      	cbz	r3, 800c84a <__sflush_r+0x46>
 800c846:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c848:	1ac0      	subs	r0, r0, r3
 800c84a:	2300      	movs	r3, #0
 800c84c:	4602      	mov	r2, r0
 800c84e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c850:	6a21      	ldr	r1, [r4, #32]
 800c852:	4628      	mov	r0, r5
 800c854:	47b0      	blx	r6
 800c856:	1c43      	adds	r3, r0, #1
 800c858:	89a3      	ldrh	r3, [r4, #12]
 800c85a:	d106      	bne.n	800c86a <__sflush_r+0x66>
 800c85c:	6829      	ldr	r1, [r5, #0]
 800c85e:	291d      	cmp	r1, #29
 800c860:	d82c      	bhi.n	800c8bc <__sflush_r+0xb8>
 800c862:	4a2a      	ldr	r2, [pc, #168]	; (800c90c <__sflush_r+0x108>)
 800c864:	40ca      	lsrs	r2, r1
 800c866:	07d6      	lsls	r6, r2, #31
 800c868:	d528      	bpl.n	800c8bc <__sflush_r+0xb8>
 800c86a:	2200      	movs	r2, #0
 800c86c:	6062      	str	r2, [r4, #4]
 800c86e:	04d9      	lsls	r1, r3, #19
 800c870:	6922      	ldr	r2, [r4, #16]
 800c872:	6022      	str	r2, [r4, #0]
 800c874:	d504      	bpl.n	800c880 <__sflush_r+0x7c>
 800c876:	1c42      	adds	r2, r0, #1
 800c878:	d101      	bne.n	800c87e <__sflush_r+0x7a>
 800c87a:	682b      	ldr	r3, [r5, #0]
 800c87c:	b903      	cbnz	r3, 800c880 <__sflush_r+0x7c>
 800c87e:	6560      	str	r0, [r4, #84]	; 0x54
 800c880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c882:	602f      	str	r7, [r5, #0]
 800c884:	2900      	cmp	r1, #0
 800c886:	d0ca      	beq.n	800c81e <__sflush_r+0x1a>
 800c888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c88c:	4299      	cmp	r1, r3
 800c88e:	d002      	beq.n	800c896 <__sflush_r+0x92>
 800c890:	4628      	mov	r0, r5
 800c892:	f7ff f9b5 	bl	800bc00 <_free_r>
 800c896:	2000      	movs	r0, #0
 800c898:	6360      	str	r0, [r4, #52]	; 0x34
 800c89a:	e7c1      	b.n	800c820 <__sflush_r+0x1c>
 800c89c:	6a21      	ldr	r1, [r4, #32]
 800c89e:	2301      	movs	r3, #1
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	47b0      	blx	r6
 800c8a4:	1c41      	adds	r1, r0, #1
 800c8a6:	d1c7      	bne.n	800c838 <__sflush_r+0x34>
 800c8a8:	682b      	ldr	r3, [r5, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d0c4      	beq.n	800c838 <__sflush_r+0x34>
 800c8ae:	2b1d      	cmp	r3, #29
 800c8b0:	d001      	beq.n	800c8b6 <__sflush_r+0xb2>
 800c8b2:	2b16      	cmp	r3, #22
 800c8b4:	d101      	bne.n	800c8ba <__sflush_r+0xb6>
 800c8b6:	602f      	str	r7, [r5, #0]
 800c8b8:	e7b1      	b.n	800c81e <__sflush_r+0x1a>
 800c8ba:	89a3      	ldrh	r3, [r4, #12]
 800c8bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8c0:	81a3      	strh	r3, [r4, #12]
 800c8c2:	e7ad      	b.n	800c820 <__sflush_r+0x1c>
 800c8c4:	690f      	ldr	r7, [r1, #16]
 800c8c6:	2f00      	cmp	r7, #0
 800c8c8:	d0a9      	beq.n	800c81e <__sflush_r+0x1a>
 800c8ca:	0793      	lsls	r3, r2, #30
 800c8cc:	680e      	ldr	r6, [r1, #0]
 800c8ce:	bf08      	it	eq
 800c8d0:	694b      	ldreq	r3, [r1, #20]
 800c8d2:	600f      	str	r7, [r1, #0]
 800c8d4:	bf18      	it	ne
 800c8d6:	2300      	movne	r3, #0
 800c8d8:	eba6 0807 	sub.w	r8, r6, r7
 800c8dc:	608b      	str	r3, [r1, #8]
 800c8de:	f1b8 0f00 	cmp.w	r8, #0
 800c8e2:	dd9c      	ble.n	800c81e <__sflush_r+0x1a>
 800c8e4:	6a21      	ldr	r1, [r4, #32]
 800c8e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c8e8:	4643      	mov	r3, r8
 800c8ea:	463a      	mov	r2, r7
 800c8ec:	4628      	mov	r0, r5
 800c8ee:	47b0      	blx	r6
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	dc06      	bgt.n	800c902 <__sflush_r+0xfe>
 800c8f4:	89a3      	ldrh	r3, [r4, #12]
 800c8f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8fa:	81a3      	strh	r3, [r4, #12]
 800c8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c900:	e78e      	b.n	800c820 <__sflush_r+0x1c>
 800c902:	4407      	add	r7, r0
 800c904:	eba8 0800 	sub.w	r8, r8, r0
 800c908:	e7e9      	b.n	800c8de <__sflush_r+0xda>
 800c90a:	bf00      	nop
 800c90c:	20400001 	.word	0x20400001

0800c910 <_fflush_r>:
 800c910:	b538      	push	{r3, r4, r5, lr}
 800c912:	690b      	ldr	r3, [r1, #16]
 800c914:	4605      	mov	r5, r0
 800c916:	460c      	mov	r4, r1
 800c918:	b913      	cbnz	r3, 800c920 <_fflush_r+0x10>
 800c91a:	2500      	movs	r5, #0
 800c91c:	4628      	mov	r0, r5
 800c91e:	bd38      	pop	{r3, r4, r5, pc}
 800c920:	b118      	cbz	r0, 800c92a <_fflush_r+0x1a>
 800c922:	6983      	ldr	r3, [r0, #24]
 800c924:	b90b      	cbnz	r3, 800c92a <_fflush_r+0x1a>
 800c926:	f000 f887 	bl	800ca38 <__sinit>
 800c92a:	4b14      	ldr	r3, [pc, #80]	; (800c97c <_fflush_r+0x6c>)
 800c92c:	429c      	cmp	r4, r3
 800c92e:	d11b      	bne.n	800c968 <_fflush_r+0x58>
 800c930:	686c      	ldr	r4, [r5, #4]
 800c932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d0ef      	beq.n	800c91a <_fflush_r+0xa>
 800c93a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c93c:	07d0      	lsls	r0, r2, #31
 800c93e:	d404      	bmi.n	800c94a <_fflush_r+0x3a>
 800c940:	0599      	lsls	r1, r3, #22
 800c942:	d402      	bmi.n	800c94a <_fflush_r+0x3a>
 800c944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c946:	f000 f915 	bl	800cb74 <__retarget_lock_acquire_recursive>
 800c94a:	4628      	mov	r0, r5
 800c94c:	4621      	mov	r1, r4
 800c94e:	f7ff ff59 	bl	800c804 <__sflush_r>
 800c952:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c954:	07da      	lsls	r2, r3, #31
 800c956:	4605      	mov	r5, r0
 800c958:	d4e0      	bmi.n	800c91c <_fflush_r+0xc>
 800c95a:	89a3      	ldrh	r3, [r4, #12]
 800c95c:	059b      	lsls	r3, r3, #22
 800c95e:	d4dd      	bmi.n	800c91c <_fflush_r+0xc>
 800c960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c962:	f000 f908 	bl	800cb76 <__retarget_lock_release_recursive>
 800c966:	e7d9      	b.n	800c91c <_fflush_r+0xc>
 800c968:	4b05      	ldr	r3, [pc, #20]	; (800c980 <_fflush_r+0x70>)
 800c96a:	429c      	cmp	r4, r3
 800c96c:	d101      	bne.n	800c972 <_fflush_r+0x62>
 800c96e:	68ac      	ldr	r4, [r5, #8]
 800c970:	e7df      	b.n	800c932 <_fflush_r+0x22>
 800c972:	4b04      	ldr	r3, [pc, #16]	; (800c984 <_fflush_r+0x74>)
 800c974:	429c      	cmp	r4, r3
 800c976:	bf08      	it	eq
 800c978:	68ec      	ldreq	r4, [r5, #12]
 800c97a:	e7da      	b.n	800c932 <_fflush_r+0x22>
 800c97c:	0801114c 	.word	0x0801114c
 800c980:	0801116c 	.word	0x0801116c
 800c984:	0801112c 	.word	0x0801112c

0800c988 <std>:
 800c988:	2300      	movs	r3, #0
 800c98a:	b510      	push	{r4, lr}
 800c98c:	4604      	mov	r4, r0
 800c98e:	e9c0 3300 	strd	r3, r3, [r0]
 800c992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c996:	6083      	str	r3, [r0, #8]
 800c998:	8181      	strh	r1, [r0, #12]
 800c99a:	6643      	str	r3, [r0, #100]	; 0x64
 800c99c:	81c2      	strh	r2, [r0, #14]
 800c99e:	6183      	str	r3, [r0, #24]
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	2208      	movs	r2, #8
 800c9a4:	305c      	adds	r0, #92	; 0x5c
 800c9a6:	f7ff f80f 	bl	800b9c8 <memset>
 800c9aa:	4b05      	ldr	r3, [pc, #20]	; (800c9c0 <std+0x38>)
 800c9ac:	6263      	str	r3, [r4, #36]	; 0x24
 800c9ae:	4b05      	ldr	r3, [pc, #20]	; (800c9c4 <std+0x3c>)
 800c9b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c9b2:	4b05      	ldr	r3, [pc, #20]	; (800c9c8 <std+0x40>)
 800c9b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c9b6:	4b05      	ldr	r3, [pc, #20]	; (800c9cc <std+0x44>)
 800c9b8:	6224      	str	r4, [r4, #32]
 800c9ba:	6323      	str	r3, [r4, #48]	; 0x30
 800c9bc:	bd10      	pop	{r4, pc}
 800c9be:	bf00      	nop
 800c9c0:	0800cd79 	.word	0x0800cd79
 800c9c4:	0800cd9b 	.word	0x0800cd9b
 800c9c8:	0800cdd3 	.word	0x0800cdd3
 800c9cc:	0800cdf7 	.word	0x0800cdf7

0800c9d0 <_cleanup_r>:
 800c9d0:	4901      	ldr	r1, [pc, #4]	; (800c9d8 <_cleanup_r+0x8>)
 800c9d2:	f000 b8af 	b.w	800cb34 <_fwalk_reent>
 800c9d6:	bf00      	nop
 800c9d8:	0800c911 	.word	0x0800c911

0800c9dc <__sfmoreglue>:
 800c9dc:	b570      	push	{r4, r5, r6, lr}
 800c9de:	2268      	movs	r2, #104	; 0x68
 800c9e0:	1e4d      	subs	r5, r1, #1
 800c9e2:	4355      	muls	r5, r2
 800c9e4:	460e      	mov	r6, r1
 800c9e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c9ea:	f7ff f975 	bl	800bcd8 <_malloc_r>
 800c9ee:	4604      	mov	r4, r0
 800c9f0:	b140      	cbz	r0, 800ca04 <__sfmoreglue+0x28>
 800c9f2:	2100      	movs	r1, #0
 800c9f4:	e9c0 1600 	strd	r1, r6, [r0]
 800c9f8:	300c      	adds	r0, #12
 800c9fa:	60a0      	str	r0, [r4, #8]
 800c9fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ca00:	f7fe ffe2 	bl	800b9c8 <memset>
 800ca04:	4620      	mov	r0, r4
 800ca06:	bd70      	pop	{r4, r5, r6, pc}

0800ca08 <__sfp_lock_acquire>:
 800ca08:	4801      	ldr	r0, [pc, #4]	; (800ca10 <__sfp_lock_acquire+0x8>)
 800ca0a:	f000 b8b3 	b.w	800cb74 <__retarget_lock_acquire_recursive>
 800ca0e:	bf00      	nop
 800ca10:	20002b69 	.word	0x20002b69

0800ca14 <__sfp_lock_release>:
 800ca14:	4801      	ldr	r0, [pc, #4]	; (800ca1c <__sfp_lock_release+0x8>)
 800ca16:	f000 b8ae 	b.w	800cb76 <__retarget_lock_release_recursive>
 800ca1a:	bf00      	nop
 800ca1c:	20002b69 	.word	0x20002b69

0800ca20 <__sinit_lock_acquire>:
 800ca20:	4801      	ldr	r0, [pc, #4]	; (800ca28 <__sinit_lock_acquire+0x8>)
 800ca22:	f000 b8a7 	b.w	800cb74 <__retarget_lock_acquire_recursive>
 800ca26:	bf00      	nop
 800ca28:	20002b6a 	.word	0x20002b6a

0800ca2c <__sinit_lock_release>:
 800ca2c:	4801      	ldr	r0, [pc, #4]	; (800ca34 <__sinit_lock_release+0x8>)
 800ca2e:	f000 b8a2 	b.w	800cb76 <__retarget_lock_release_recursive>
 800ca32:	bf00      	nop
 800ca34:	20002b6a 	.word	0x20002b6a

0800ca38 <__sinit>:
 800ca38:	b510      	push	{r4, lr}
 800ca3a:	4604      	mov	r4, r0
 800ca3c:	f7ff fff0 	bl	800ca20 <__sinit_lock_acquire>
 800ca40:	69a3      	ldr	r3, [r4, #24]
 800ca42:	b11b      	cbz	r3, 800ca4c <__sinit+0x14>
 800ca44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca48:	f7ff bff0 	b.w	800ca2c <__sinit_lock_release>
 800ca4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ca50:	6523      	str	r3, [r4, #80]	; 0x50
 800ca52:	4b13      	ldr	r3, [pc, #76]	; (800caa0 <__sinit+0x68>)
 800ca54:	4a13      	ldr	r2, [pc, #76]	; (800caa4 <__sinit+0x6c>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	62a2      	str	r2, [r4, #40]	; 0x28
 800ca5a:	42a3      	cmp	r3, r4
 800ca5c:	bf04      	itt	eq
 800ca5e:	2301      	moveq	r3, #1
 800ca60:	61a3      	streq	r3, [r4, #24]
 800ca62:	4620      	mov	r0, r4
 800ca64:	f000 f820 	bl	800caa8 <__sfp>
 800ca68:	6060      	str	r0, [r4, #4]
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	f000 f81c 	bl	800caa8 <__sfp>
 800ca70:	60a0      	str	r0, [r4, #8]
 800ca72:	4620      	mov	r0, r4
 800ca74:	f000 f818 	bl	800caa8 <__sfp>
 800ca78:	2200      	movs	r2, #0
 800ca7a:	60e0      	str	r0, [r4, #12]
 800ca7c:	2104      	movs	r1, #4
 800ca7e:	6860      	ldr	r0, [r4, #4]
 800ca80:	f7ff ff82 	bl	800c988 <std>
 800ca84:	68a0      	ldr	r0, [r4, #8]
 800ca86:	2201      	movs	r2, #1
 800ca88:	2109      	movs	r1, #9
 800ca8a:	f7ff ff7d 	bl	800c988 <std>
 800ca8e:	68e0      	ldr	r0, [r4, #12]
 800ca90:	2202      	movs	r2, #2
 800ca92:	2112      	movs	r1, #18
 800ca94:	f7ff ff78 	bl	800c988 <std>
 800ca98:	2301      	movs	r3, #1
 800ca9a:	61a3      	str	r3, [r4, #24]
 800ca9c:	e7d2      	b.n	800ca44 <__sinit+0xc>
 800ca9e:	bf00      	nop
 800caa0:	08011044 	.word	0x08011044
 800caa4:	0800c9d1 	.word	0x0800c9d1

0800caa8 <__sfp>:
 800caa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caaa:	4607      	mov	r7, r0
 800caac:	f7ff ffac 	bl	800ca08 <__sfp_lock_acquire>
 800cab0:	4b1e      	ldr	r3, [pc, #120]	; (800cb2c <__sfp+0x84>)
 800cab2:	681e      	ldr	r6, [r3, #0]
 800cab4:	69b3      	ldr	r3, [r6, #24]
 800cab6:	b913      	cbnz	r3, 800cabe <__sfp+0x16>
 800cab8:	4630      	mov	r0, r6
 800caba:	f7ff ffbd 	bl	800ca38 <__sinit>
 800cabe:	3648      	adds	r6, #72	; 0x48
 800cac0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cac4:	3b01      	subs	r3, #1
 800cac6:	d503      	bpl.n	800cad0 <__sfp+0x28>
 800cac8:	6833      	ldr	r3, [r6, #0]
 800caca:	b30b      	cbz	r3, 800cb10 <__sfp+0x68>
 800cacc:	6836      	ldr	r6, [r6, #0]
 800cace:	e7f7      	b.n	800cac0 <__sfp+0x18>
 800cad0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cad4:	b9d5      	cbnz	r5, 800cb0c <__sfp+0x64>
 800cad6:	4b16      	ldr	r3, [pc, #88]	; (800cb30 <__sfp+0x88>)
 800cad8:	60e3      	str	r3, [r4, #12]
 800cada:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cade:	6665      	str	r5, [r4, #100]	; 0x64
 800cae0:	f000 f847 	bl	800cb72 <__retarget_lock_init_recursive>
 800cae4:	f7ff ff96 	bl	800ca14 <__sfp_lock_release>
 800cae8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800caec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800caf0:	6025      	str	r5, [r4, #0]
 800caf2:	61a5      	str	r5, [r4, #24]
 800caf4:	2208      	movs	r2, #8
 800caf6:	4629      	mov	r1, r5
 800caf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cafc:	f7fe ff64 	bl	800b9c8 <memset>
 800cb00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cb04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cb08:	4620      	mov	r0, r4
 800cb0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb0c:	3468      	adds	r4, #104	; 0x68
 800cb0e:	e7d9      	b.n	800cac4 <__sfp+0x1c>
 800cb10:	2104      	movs	r1, #4
 800cb12:	4638      	mov	r0, r7
 800cb14:	f7ff ff62 	bl	800c9dc <__sfmoreglue>
 800cb18:	4604      	mov	r4, r0
 800cb1a:	6030      	str	r0, [r6, #0]
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	d1d5      	bne.n	800cacc <__sfp+0x24>
 800cb20:	f7ff ff78 	bl	800ca14 <__sfp_lock_release>
 800cb24:	230c      	movs	r3, #12
 800cb26:	603b      	str	r3, [r7, #0]
 800cb28:	e7ee      	b.n	800cb08 <__sfp+0x60>
 800cb2a:	bf00      	nop
 800cb2c:	08011044 	.word	0x08011044
 800cb30:	ffff0001 	.word	0xffff0001

0800cb34 <_fwalk_reent>:
 800cb34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb38:	4606      	mov	r6, r0
 800cb3a:	4688      	mov	r8, r1
 800cb3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cb40:	2700      	movs	r7, #0
 800cb42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb46:	f1b9 0901 	subs.w	r9, r9, #1
 800cb4a:	d505      	bpl.n	800cb58 <_fwalk_reent+0x24>
 800cb4c:	6824      	ldr	r4, [r4, #0]
 800cb4e:	2c00      	cmp	r4, #0
 800cb50:	d1f7      	bne.n	800cb42 <_fwalk_reent+0xe>
 800cb52:	4638      	mov	r0, r7
 800cb54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb58:	89ab      	ldrh	r3, [r5, #12]
 800cb5a:	2b01      	cmp	r3, #1
 800cb5c:	d907      	bls.n	800cb6e <_fwalk_reent+0x3a>
 800cb5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb62:	3301      	adds	r3, #1
 800cb64:	d003      	beq.n	800cb6e <_fwalk_reent+0x3a>
 800cb66:	4629      	mov	r1, r5
 800cb68:	4630      	mov	r0, r6
 800cb6a:	47c0      	blx	r8
 800cb6c:	4307      	orrs	r7, r0
 800cb6e:	3568      	adds	r5, #104	; 0x68
 800cb70:	e7e9      	b.n	800cb46 <_fwalk_reent+0x12>

0800cb72 <__retarget_lock_init_recursive>:
 800cb72:	4770      	bx	lr

0800cb74 <__retarget_lock_acquire_recursive>:
 800cb74:	4770      	bx	lr

0800cb76 <__retarget_lock_release_recursive>:
 800cb76:	4770      	bx	lr

0800cb78 <__swhatbuf_r>:
 800cb78:	b570      	push	{r4, r5, r6, lr}
 800cb7a:	460e      	mov	r6, r1
 800cb7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb80:	2900      	cmp	r1, #0
 800cb82:	b096      	sub	sp, #88	; 0x58
 800cb84:	4614      	mov	r4, r2
 800cb86:	461d      	mov	r5, r3
 800cb88:	da08      	bge.n	800cb9c <__swhatbuf_r+0x24>
 800cb8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	602a      	str	r2, [r5, #0]
 800cb92:	061a      	lsls	r2, r3, #24
 800cb94:	d410      	bmi.n	800cbb8 <__swhatbuf_r+0x40>
 800cb96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb9a:	e00e      	b.n	800cbba <__swhatbuf_r+0x42>
 800cb9c:	466a      	mov	r2, sp
 800cb9e:	f000 f951 	bl	800ce44 <_fstat_r>
 800cba2:	2800      	cmp	r0, #0
 800cba4:	dbf1      	blt.n	800cb8a <__swhatbuf_r+0x12>
 800cba6:	9a01      	ldr	r2, [sp, #4]
 800cba8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cbac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cbb0:	425a      	negs	r2, r3
 800cbb2:	415a      	adcs	r2, r3
 800cbb4:	602a      	str	r2, [r5, #0]
 800cbb6:	e7ee      	b.n	800cb96 <__swhatbuf_r+0x1e>
 800cbb8:	2340      	movs	r3, #64	; 0x40
 800cbba:	2000      	movs	r0, #0
 800cbbc:	6023      	str	r3, [r4, #0]
 800cbbe:	b016      	add	sp, #88	; 0x58
 800cbc0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cbc4 <__smakebuf_r>:
 800cbc4:	898b      	ldrh	r3, [r1, #12]
 800cbc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cbc8:	079d      	lsls	r5, r3, #30
 800cbca:	4606      	mov	r6, r0
 800cbcc:	460c      	mov	r4, r1
 800cbce:	d507      	bpl.n	800cbe0 <__smakebuf_r+0x1c>
 800cbd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cbd4:	6023      	str	r3, [r4, #0]
 800cbd6:	6123      	str	r3, [r4, #16]
 800cbd8:	2301      	movs	r3, #1
 800cbda:	6163      	str	r3, [r4, #20]
 800cbdc:	b002      	add	sp, #8
 800cbde:	bd70      	pop	{r4, r5, r6, pc}
 800cbe0:	ab01      	add	r3, sp, #4
 800cbe2:	466a      	mov	r2, sp
 800cbe4:	f7ff ffc8 	bl	800cb78 <__swhatbuf_r>
 800cbe8:	9900      	ldr	r1, [sp, #0]
 800cbea:	4605      	mov	r5, r0
 800cbec:	4630      	mov	r0, r6
 800cbee:	f7ff f873 	bl	800bcd8 <_malloc_r>
 800cbf2:	b948      	cbnz	r0, 800cc08 <__smakebuf_r+0x44>
 800cbf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbf8:	059a      	lsls	r2, r3, #22
 800cbfa:	d4ef      	bmi.n	800cbdc <__smakebuf_r+0x18>
 800cbfc:	f023 0303 	bic.w	r3, r3, #3
 800cc00:	f043 0302 	orr.w	r3, r3, #2
 800cc04:	81a3      	strh	r3, [r4, #12]
 800cc06:	e7e3      	b.n	800cbd0 <__smakebuf_r+0xc>
 800cc08:	4b0d      	ldr	r3, [pc, #52]	; (800cc40 <__smakebuf_r+0x7c>)
 800cc0a:	62b3      	str	r3, [r6, #40]	; 0x28
 800cc0c:	89a3      	ldrh	r3, [r4, #12]
 800cc0e:	6020      	str	r0, [r4, #0]
 800cc10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc14:	81a3      	strh	r3, [r4, #12]
 800cc16:	9b00      	ldr	r3, [sp, #0]
 800cc18:	6163      	str	r3, [r4, #20]
 800cc1a:	9b01      	ldr	r3, [sp, #4]
 800cc1c:	6120      	str	r0, [r4, #16]
 800cc1e:	b15b      	cbz	r3, 800cc38 <__smakebuf_r+0x74>
 800cc20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc24:	4630      	mov	r0, r6
 800cc26:	f000 f91f 	bl	800ce68 <_isatty_r>
 800cc2a:	b128      	cbz	r0, 800cc38 <__smakebuf_r+0x74>
 800cc2c:	89a3      	ldrh	r3, [r4, #12]
 800cc2e:	f023 0303 	bic.w	r3, r3, #3
 800cc32:	f043 0301 	orr.w	r3, r3, #1
 800cc36:	81a3      	strh	r3, [r4, #12]
 800cc38:	89a0      	ldrh	r0, [r4, #12]
 800cc3a:	4305      	orrs	r5, r0
 800cc3c:	81a5      	strh	r5, [r4, #12]
 800cc3e:	e7cd      	b.n	800cbdc <__smakebuf_r+0x18>
 800cc40:	0800c9d1 	.word	0x0800c9d1

0800cc44 <memmove>:
 800cc44:	4288      	cmp	r0, r1
 800cc46:	b510      	push	{r4, lr}
 800cc48:	eb01 0402 	add.w	r4, r1, r2
 800cc4c:	d902      	bls.n	800cc54 <memmove+0x10>
 800cc4e:	4284      	cmp	r4, r0
 800cc50:	4623      	mov	r3, r4
 800cc52:	d807      	bhi.n	800cc64 <memmove+0x20>
 800cc54:	1e43      	subs	r3, r0, #1
 800cc56:	42a1      	cmp	r1, r4
 800cc58:	d008      	beq.n	800cc6c <memmove+0x28>
 800cc5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc62:	e7f8      	b.n	800cc56 <memmove+0x12>
 800cc64:	4402      	add	r2, r0
 800cc66:	4601      	mov	r1, r0
 800cc68:	428a      	cmp	r2, r1
 800cc6a:	d100      	bne.n	800cc6e <memmove+0x2a>
 800cc6c:	bd10      	pop	{r4, pc}
 800cc6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc76:	e7f7      	b.n	800cc68 <memmove+0x24>

0800cc78 <__malloc_lock>:
 800cc78:	4801      	ldr	r0, [pc, #4]	; (800cc80 <__malloc_lock+0x8>)
 800cc7a:	f7ff bf7b 	b.w	800cb74 <__retarget_lock_acquire_recursive>
 800cc7e:	bf00      	nop
 800cc80:	20002b68 	.word	0x20002b68

0800cc84 <__malloc_unlock>:
 800cc84:	4801      	ldr	r0, [pc, #4]	; (800cc8c <__malloc_unlock+0x8>)
 800cc86:	f7ff bf76 	b.w	800cb76 <__retarget_lock_release_recursive>
 800cc8a:	bf00      	nop
 800cc8c:	20002b68 	.word	0x20002b68

0800cc90 <_realloc_r>:
 800cc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc94:	4680      	mov	r8, r0
 800cc96:	4614      	mov	r4, r2
 800cc98:	460e      	mov	r6, r1
 800cc9a:	b921      	cbnz	r1, 800cca6 <_realloc_r+0x16>
 800cc9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cca0:	4611      	mov	r1, r2
 800cca2:	f7ff b819 	b.w	800bcd8 <_malloc_r>
 800cca6:	b92a      	cbnz	r2, 800ccb4 <_realloc_r+0x24>
 800cca8:	f7fe ffaa 	bl	800bc00 <_free_r>
 800ccac:	4625      	mov	r5, r4
 800ccae:	4628      	mov	r0, r5
 800ccb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccb4:	f000 f8fa 	bl	800ceac <_malloc_usable_size_r>
 800ccb8:	4284      	cmp	r4, r0
 800ccba:	4607      	mov	r7, r0
 800ccbc:	d802      	bhi.n	800ccc4 <_realloc_r+0x34>
 800ccbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ccc2:	d812      	bhi.n	800ccea <_realloc_r+0x5a>
 800ccc4:	4621      	mov	r1, r4
 800ccc6:	4640      	mov	r0, r8
 800ccc8:	f7ff f806 	bl	800bcd8 <_malloc_r>
 800cccc:	4605      	mov	r5, r0
 800ccce:	2800      	cmp	r0, #0
 800ccd0:	d0ed      	beq.n	800ccae <_realloc_r+0x1e>
 800ccd2:	42bc      	cmp	r4, r7
 800ccd4:	4622      	mov	r2, r4
 800ccd6:	4631      	mov	r1, r6
 800ccd8:	bf28      	it	cs
 800ccda:	463a      	movcs	r2, r7
 800ccdc:	f7fe ff82 	bl	800bbe4 <memcpy>
 800cce0:	4631      	mov	r1, r6
 800cce2:	4640      	mov	r0, r8
 800cce4:	f7fe ff8c 	bl	800bc00 <_free_r>
 800cce8:	e7e1      	b.n	800ccae <_realloc_r+0x1e>
 800ccea:	4635      	mov	r5, r6
 800ccec:	e7df      	b.n	800ccae <_realloc_r+0x1e>

0800ccee <_raise_r>:
 800ccee:	291f      	cmp	r1, #31
 800ccf0:	b538      	push	{r3, r4, r5, lr}
 800ccf2:	4604      	mov	r4, r0
 800ccf4:	460d      	mov	r5, r1
 800ccf6:	d904      	bls.n	800cd02 <_raise_r+0x14>
 800ccf8:	2316      	movs	r3, #22
 800ccfa:	6003      	str	r3, [r0, #0]
 800ccfc:	f04f 30ff 	mov.w	r0, #4294967295
 800cd00:	bd38      	pop	{r3, r4, r5, pc}
 800cd02:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cd04:	b112      	cbz	r2, 800cd0c <_raise_r+0x1e>
 800cd06:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd0a:	b94b      	cbnz	r3, 800cd20 <_raise_r+0x32>
 800cd0c:	4620      	mov	r0, r4
 800cd0e:	f000 f831 	bl	800cd74 <_getpid_r>
 800cd12:	462a      	mov	r2, r5
 800cd14:	4601      	mov	r1, r0
 800cd16:	4620      	mov	r0, r4
 800cd18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd1c:	f000 b818 	b.w	800cd50 <_kill_r>
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d00a      	beq.n	800cd3a <_raise_r+0x4c>
 800cd24:	1c59      	adds	r1, r3, #1
 800cd26:	d103      	bne.n	800cd30 <_raise_r+0x42>
 800cd28:	2316      	movs	r3, #22
 800cd2a:	6003      	str	r3, [r0, #0]
 800cd2c:	2001      	movs	r0, #1
 800cd2e:	e7e7      	b.n	800cd00 <_raise_r+0x12>
 800cd30:	2400      	movs	r4, #0
 800cd32:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cd36:	4628      	mov	r0, r5
 800cd38:	4798      	blx	r3
 800cd3a:	2000      	movs	r0, #0
 800cd3c:	e7e0      	b.n	800cd00 <_raise_r+0x12>
	...

0800cd40 <raise>:
 800cd40:	4b02      	ldr	r3, [pc, #8]	; (800cd4c <raise+0xc>)
 800cd42:	4601      	mov	r1, r0
 800cd44:	6818      	ldr	r0, [r3, #0]
 800cd46:	f7ff bfd2 	b.w	800ccee <_raise_r>
 800cd4a:	bf00      	nop
 800cd4c:	200000ac 	.word	0x200000ac

0800cd50 <_kill_r>:
 800cd50:	b538      	push	{r3, r4, r5, lr}
 800cd52:	4d07      	ldr	r5, [pc, #28]	; (800cd70 <_kill_r+0x20>)
 800cd54:	2300      	movs	r3, #0
 800cd56:	4604      	mov	r4, r0
 800cd58:	4608      	mov	r0, r1
 800cd5a:	4611      	mov	r1, r2
 800cd5c:	602b      	str	r3, [r5, #0]
 800cd5e:	f7f9 f99d 	bl	800609c <_kill>
 800cd62:	1c43      	adds	r3, r0, #1
 800cd64:	d102      	bne.n	800cd6c <_kill_r+0x1c>
 800cd66:	682b      	ldr	r3, [r5, #0]
 800cd68:	b103      	cbz	r3, 800cd6c <_kill_r+0x1c>
 800cd6a:	6023      	str	r3, [r4, #0]
 800cd6c:	bd38      	pop	{r3, r4, r5, pc}
 800cd6e:	bf00      	nop
 800cd70:	20002b6c 	.word	0x20002b6c

0800cd74 <_getpid_r>:
 800cd74:	f7f9 b98a 	b.w	800608c <_getpid>

0800cd78 <__sread>:
 800cd78:	b510      	push	{r4, lr}
 800cd7a:	460c      	mov	r4, r1
 800cd7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd80:	f000 f89c 	bl	800cebc <_read_r>
 800cd84:	2800      	cmp	r0, #0
 800cd86:	bfab      	itete	ge
 800cd88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cd8a:	89a3      	ldrhlt	r3, [r4, #12]
 800cd8c:	181b      	addge	r3, r3, r0
 800cd8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cd92:	bfac      	ite	ge
 800cd94:	6563      	strge	r3, [r4, #84]	; 0x54
 800cd96:	81a3      	strhlt	r3, [r4, #12]
 800cd98:	bd10      	pop	{r4, pc}

0800cd9a <__swrite>:
 800cd9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd9e:	461f      	mov	r7, r3
 800cda0:	898b      	ldrh	r3, [r1, #12]
 800cda2:	05db      	lsls	r3, r3, #23
 800cda4:	4605      	mov	r5, r0
 800cda6:	460c      	mov	r4, r1
 800cda8:	4616      	mov	r6, r2
 800cdaa:	d505      	bpl.n	800cdb8 <__swrite+0x1e>
 800cdac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdb0:	2302      	movs	r3, #2
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f000 f868 	bl	800ce88 <_lseek_r>
 800cdb8:	89a3      	ldrh	r3, [r4, #12]
 800cdba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cdc2:	81a3      	strh	r3, [r4, #12]
 800cdc4:	4632      	mov	r2, r6
 800cdc6:	463b      	mov	r3, r7
 800cdc8:	4628      	mov	r0, r5
 800cdca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdce:	f000 b817 	b.w	800ce00 <_write_r>

0800cdd2 <__sseek>:
 800cdd2:	b510      	push	{r4, lr}
 800cdd4:	460c      	mov	r4, r1
 800cdd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdda:	f000 f855 	bl	800ce88 <_lseek_r>
 800cdde:	1c43      	adds	r3, r0, #1
 800cde0:	89a3      	ldrh	r3, [r4, #12]
 800cde2:	bf15      	itete	ne
 800cde4:	6560      	strne	r0, [r4, #84]	; 0x54
 800cde6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cdea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cdee:	81a3      	strheq	r3, [r4, #12]
 800cdf0:	bf18      	it	ne
 800cdf2:	81a3      	strhne	r3, [r4, #12]
 800cdf4:	bd10      	pop	{r4, pc}

0800cdf6 <__sclose>:
 800cdf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdfa:	f000 b813 	b.w	800ce24 <_close_r>
	...

0800ce00 <_write_r>:
 800ce00:	b538      	push	{r3, r4, r5, lr}
 800ce02:	4d07      	ldr	r5, [pc, #28]	; (800ce20 <_write_r+0x20>)
 800ce04:	4604      	mov	r4, r0
 800ce06:	4608      	mov	r0, r1
 800ce08:	4611      	mov	r1, r2
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	602a      	str	r2, [r5, #0]
 800ce0e:	461a      	mov	r2, r3
 800ce10:	f7f9 f97b 	bl	800610a <_write>
 800ce14:	1c43      	adds	r3, r0, #1
 800ce16:	d102      	bne.n	800ce1e <_write_r+0x1e>
 800ce18:	682b      	ldr	r3, [r5, #0]
 800ce1a:	b103      	cbz	r3, 800ce1e <_write_r+0x1e>
 800ce1c:	6023      	str	r3, [r4, #0]
 800ce1e:	bd38      	pop	{r3, r4, r5, pc}
 800ce20:	20002b6c 	.word	0x20002b6c

0800ce24 <_close_r>:
 800ce24:	b538      	push	{r3, r4, r5, lr}
 800ce26:	4d06      	ldr	r5, [pc, #24]	; (800ce40 <_close_r+0x1c>)
 800ce28:	2300      	movs	r3, #0
 800ce2a:	4604      	mov	r4, r0
 800ce2c:	4608      	mov	r0, r1
 800ce2e:	602b      	str	r3, [r5, #0]
 800ce30:	f7f9 f987 	bl	8006142 <_close>
 800ce34:	1c43      	adds	r3, r0, #1
 800ce36:	d102      	bne.n	800ce3e <_close_r+0x1a>
 800ce38:	682b      	ldr	r3, [r5, #0]
 800ce3a:	b103      	cbz	r3, 800ce3e <_close_r+0x1a>
 800ce3c:	6023      	str	r3, [r4, #0]
 800ce3e:	bd38      	pop	{r3, r4, r5, pc}
 800ce40:	20002b6c 	.word	0x20002b6c

0800ce44 <_fstat_r>:
 800ce44:	b538      	push	{r3, r4, r5, lr}
 800ce46:	4d07      	ldr	r5, [pc, #28]	; (800ce64 <_fstat_r+0x20>)
 800ce48:	2300      	movs	r3, #0
 800ce4a:	4604      	mov	r4, r0
 800ce4c:	4608      	mov	r0, r1
 800ce4e:	4611      	mov	r1, r2
 800ce50:	602b      	str	r3, [r5, #0]
 800ce52:	f7f9 f982 	bl	800615a <_fstat>
 800ce56:	1c43      	adds	r3, r0, #1
 800ce58:	d102      	bne.n	800ce60 <_fstat_r+0x1c>
 800ce5a:	682b      	ldr	r3, [r5, #0]
 800ce5c:	b103      	cbz	r3, 800ce60 <_fstat_r+0x1c>
 800ce5e:	6023      	str	r3, [r4, #0]
 800ce60:	bd38      	pop	{r3, r4, r5, pc}
 800ce62:	bf00      	nop
 800ce64:	20002b6c 	.word	0x20002b6c

0800ce68 <_isatty_r>:
 800ce68:	b538      	push	{r3, r4, r5, lr}
 800ce6a:	4d06      	ldr	r5, [pc, #24]	; (800ce84 <_isatty_r+0x1c>)
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	4604      	mov	r4, r0
 800ce70:	4608      	mov	r0, r1
 800ce72:	602b      	str	r3, [r5, #0]
 800ce74:	f7f9 f981 	bl	800617a <_isatty>
 800ce78:	1c43      	adds	r3, r0, #1
 800ce7a:	d102      	bne.n	800ce82 <_isatty_r+0x1a>
 800ce7c:	682b      	ldr	r3, [r5, #0]
 800ce7e:	b103      	cbz	r3, 800ce82 <_isatty_r+0x1a>
 800ce80:	6023      	str	r3, [r4, #0]
 800ce82:	bd38      	pop	{r3, r4, r5, pc}
 800ce84:	20002b6c 	.word	0x20002b6c

0800ce88 <_lseek_r>:
 800ce88:	b538      	push	{r3, r4, r5, lr}
 800ce8a:	4d07      	ldr	r5, [pc, #28]	; (800cea8 <_lseek_r+0x20>)
 800ce8c:	4604      	mov	r4, r0
 800ce8e:	4608      	mov	r0, r1
 800ce90:	4611      	mov	r1, r2
 800ce92:	2200      	movs	r2, #0
 800ce94:	602a      	str	r2, [r5, #0]
 800ce96:	461a      	mov	r2, r3
 800ce98:	f7f9 f97a 	bl	8006190 <_lseek>
 800ce9c:	1c43      	adds	r3, r0, #1
 800ce9e:	d102      	bne.n	800cea6 <_lseek_r+0x1e>
 800cea0:	682b      	ldr	r3, [r5, #0]
 800cea2:	b103      	cbz	r3, 800cea6 <_lseek_r+0x1e>
 800cea4:	6023      	str	r3, [r4, #0]
 800cea6:	bd38      	pop	{r3, r4, r5, pc}
 800cea8:	20002b6c 	.word	0x20002b6c

0800ceac <_malloc_usable_size_r>:
 800ceac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ceb0:	1f18      	subs	r0, r3, #4
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	bfbc      	itt	lt
 800ceb6:	580b      	ldrlt	r3, [r1, r0]
 800ceb8:	18c0      	addlt	r0, r0, r3
 800ceba:	4770      	bx	lr

0800cebc <_read_r>:
 800cebc:	b538      	push	{r3, r4, r5, lr}
 800cebe:	4d07      	ldr	r5, [pc, #28]	; (800cedc <_read_r+0x20>)
 800cec0:	4604      	mov	r4, r0
 800cec2:	4608      	mov	r0, r1
 800cec4:	4611      	mov	r1, r2
 800cec6:	2200      	movs	r2, #0
 800cec8:	602a      	str	r2, [r5, #0]
 800ceca:	461a      	mov	r2, r3
 800cecc:	f7f9 f900 	bl	80060d0 <_read>
 800ced0:	1c43      	adds	r3, r0, #1
 800ced2:	d102      	bne.n	800ceda <_read_r+0x1e>
 800ced4:	682b      	ldr	r3, [r5, #0]
 800ced6:	b103      	cbz	r3, 800ceda <_read_r+0x1e>
 800ced8:	6023      	str	r3, [r4, #0]
 800ceda:	bd38      	pop	{r3, r4, r5, pc}
 800cedc:	20002b6c 	.word	0x20002b6c

0800cee0 <_init>:
 800cee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cee2:	bf00      	nop
 800cee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cee6:	bc08      	pop	{r3}
 800cee8:	469e      	mov	lr, r3
 800ceea:	4770      	bx	lr

0800ceec <_fini>:
 800ceec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceee:	bf00      	nop
 800cef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cef2:	bc08      	pop	{r3}
 800cef4:	469e      	mov	lr, r3
 800cef6:	4770      	bx	lr
